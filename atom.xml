<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2017-08-30T12:39:16+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitLab CI Untuk .NET Developer Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/"/>
    <updated>2017-08-30T12:32:47+07:00</updated>
    <id>http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2017/08/gitlabci.png">Sudah hampir setahun saya menggunakan <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> sebagai tool/software CI <a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>. Ada banyak manfaat yang saya rasakan terutama untuk mengurangi pekerjaan-pekerjaan <code>sepele</code> tapi <code>berulang</code> seperti pembuatan paket instalasi, upload updatean terbaru ke server atau deploy web api/service ke server development atau production.  Dengan menggunakan software CI(<a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>) seperti <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> pekerjaan-pekerjaan membosankan tersebut bisa dilakukan hanya dengan mengklik satu tombol atau bisa juga dibuat otomatis ketika kita mem-push perubahan source code ke repository git. Waktu yang dibutuhkan juga biasanya tidak lama sekitar 1-3 menit, ya tergantung besar atau kecilnya project yang akan dibuild/deploy.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-011.png"></p>

<p>Selain itu dari sisi dokumentasi juga ikut terbantu, karena tool seperti <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> dan dengan bantuan pluginnya bisa otomatis mengenerate history build dari waktu ke waktu.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-021.png"></p>

<p>Tapi pada postingan kali ini saya ingin membahas tool/software CI(<a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>) yang lain yaitu <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>. Beberapa hari ini saya menyempatkan untuk mencoba <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> dan kesimpulannya ada beberapa kelebihan <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> dibandingkan <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> yaitu:</p>

<ul>
<li><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah terintegrasi dengan <a href="https://gitlab.com/">GitLab </a>. <a href="https://gitlab.com/">GitLab </a> adalah layanan cloud untuk repository git, jadi mirip dengan <a href="http://github.com/">github</a> atau <a href="http://bitbucket.org/">bitbucket</a>. Kelebihan gitlab dibandingkan dengan github dan bitbucket adalah untuk layanan gratisnya tidak ada pembatasan jumlah tim atau jumlah repository private yang bisa dibuat. Sedangkan untuk <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> repository gitnya harus diinstall terpisah atau menggunakan layanan repository git yang sudah ada seperti gitlab, github atau bitbucket.</li>
<li>Konfigurasi Job di <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> lebih sederhana dibandingkan <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a>. Konfigurasi job <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> menggunakan file text biasa dengan format <a href="https://en.wikipedia.org/wiki/YAML">YAML</a>, sehingga file konfigurasi ini bisa kita tambahkan ke repository git.</li>
<li>Penggunaan  <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> sangat cocok untuk keperluan internal kantor, jadi jika ingin digunakan secara public (di akses via internet) harus menyediakan mesin khusus yang mempunyai ip public atau bisa juga menggunakan VPS. Sedangkan untuk <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sendiri kita cukup menyediakan mesin yang mempunyai akses internet dan tidak harus mempunyai ip public.</li>
<li>Satu job <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah bisa digunakan untuk beberapa <a href="https://docs.gitlab.com/ee/ci/yaml/README.html#stages">stage</a> sedangkan dengan <a href="http://coding4ever.net/blog/categories/jenkins/">Jenkins</a> kita harus membuat beberapa job untuk masing-masing stage (<a href="https://en.wiktionary.org/wiki/CMIIW">CMIIW</a>).</li>
<li>Apalagi ya…, silahkan dicoba sendiri he he :-D</li>
</ul>


<h3>Continuous Integration</h3>

<p>Sebelum kita lanjut ke pembahasan <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>, saya ingin mereview kembali apa yang dimaksud dengan CI (<a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>).  <a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.</p>

<p>Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses build untuk memastikan tidak ada kode yang merusak/membuat proses build gagal. Jadi semakin cepat kegagalan build ini diketahui semakin cepat pula kita meresponnya. Dan jika proses build-nya berhasil akan dilanjutkan dengan proses deploy. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan unit testing, integration testing dan testing otomatis lainnya.</p>

<p>Sebagai .NET developer kita sudah biasa melakukan proses build dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh deploy anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<p>Proses build ini selain bisa dibuat otomatis setiap kita mem-push source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak build pas jam makan siang enggak boleh makan siang sampai proses build-nya berhasil atau yang merusak build pas jam pulang kantor enggak boleh pulang sampai proses build-nya berhasil :-D</p>

<p>Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :</p>

<ul>
<li>Menulis kode, build dan tes di komputer masing-masing (seperti biasa).</li>
<li>Commit dan push kode ke server repository/source control seperti GIT atau SVN.</li>
<li>Server CI akan meng-clone/pull repository kemudian melakukan build, menjalankan tes otomatis (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama.</li>
</ul>


<p>Nah mudah-mudahan sampai di sini sudah punya gambaran ya tentang apa itu <a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a> dan bagaimana cara kerjanya.</p>

<h3>Apa saja yang perlu diketahui ?</h3>

<p>Untuk belajar CI, tentu saja ada pengetahun penunjang yang perlu Anda pelajari yaitu penggunakan <a href="https://en.wikipedia.org/wiki/Version_control">Source/Version Control</a> terutama <a href="https://git-scm.com/">GIT</a> dan aplikasi GIT Client seperti <a href="https://tortoisegit.org/download/">TortoiseGit</a>. Pengetahun lainnya adalah pembuatan paket instalasi menggunakan <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> untuk aplikasi desktop atau bisa juga pengetahuan mendeploy web api/service ke server.</p>

<h3>GitLab CI</h3>

<p><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> adalah salah satu tool/software <a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a> gratis yang merupakan bagian dari <a href="https://about.gitlab.com/">GitLab</a>. <a href="https://about.gitlab.com/">GitLab</a> sendiri merupakan layanan cloud repository git, jadi mirip dengan <a href="http://github.com/">github</a> atau <a href="http://bitbucket.org/">bitbucket</a>. Kelebihan dari <a href="https://about.gitlab.com/">GitLab</a> ini sendiri, untuk versi gratisnya tidak dibatasi seperti halnya <a href="http://github.com/">github</a> dan <a href="http://bitbucket.org/">bitbucket</a>. Jadi dengan versi gratisnya tidak ada pembatasan jumlah private repository yang bisa kita buat ataupun jumlah tim yang terlibat. Menarik bukan untuk sebuah layanan cloud repository git yang gratis.</p>

<p><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sendiri kalo kita lihat lebih mirip dengan sebuah dashboard untuk mengelola job dan log hasil buildnya. Jadi aslinya yang melakukan build dan deploy itu bukanlah <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> tapi tool lain yang disebut dengan  <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a>. <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> ini harus kita install di mesin (pc/server) yang mempunyai akses internet agar bisa terhubung ke service <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>. Mesin untuk <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> tidak harus mempunyai ip public yang penting terkoneksi dengan internet.</p>

<p>Idenya sederhana tapi brilian, dengan konsep seperti ini akan menghemat resource dari server <a href="https://about.gitlab.com/">GitLab</a> itu sendiri, karena semua resource yang dibutuhkan untuk proses build dan deploy di tanggung oleh mesin dari user/developer. Tapi dari sisi user/developer juga diuntungkan karena mesin untuk build dan deploynya adalah milik kita sendiri, sehingga kita punya akses full untuk setup/konfigurasi tool/software apa saja yang dibutuhkan untuk proses build dan deploy tersebut.</p>

<h3>GitLab Runner</h3>

<p><a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> adalah tool/software yang bertugas untuk menjalankan job dan mengirimkan kembali hasilnya ke <a href="https://about.gitlab.com/">GitLab</a>, nah data-data inilah yang akan diolah oleh <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>.</p>

<p>GitLab Runner bisa diinstall untuk GNU/Linux, macOS, FreeBSD, dan Windows.</p>

<h4>Instalasi GitLab Runner</h4>

<p><a href="https://docs.gitlab.com/runner/install/windows.html">Instalasi GitLab Runner</a> sendiri sangat mudah, ditambah dengan dokumentasi yang lengkap. Jadi seharusnya Anda tidak akan mendapatkan masalah untuk langkah-langkah instalasinya. Untuk petunjuknya bisa ada cek di <a href="https://docs.gitlab.com/runner/install/windows.html">sini</a>.</p>

<p>Untuk memastikan instalasinya GitLab Runnernya berhasil, silahkan Anda cek service GitLab Runnernya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-03.png"></p>

<h4>Mendaftarkan Repository ke GitLab Runner</h4>

<p>Setelah instalasi GitLab Runner, berikutnya adalah mendaftarkan repository git ke GitLab Runner. Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1</strong>.  Login ke <a href="https://about.gitlab.com/">GitLab</a>, klo belum punya ya silahkan daftar terlebih dulu.</p>

<p><strong>Langkah 2</strong>.  Buat repository baru</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-04.png"></p>

<p><strong>Langkah 3</strong>.  Setelah membuat repositorynya berhasil, klik link <code>Settings</code> -> <code>Pipelines</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-05.png"></p>

<p>Scroll ke bawah sedikit, kemudian catat informasi <code>Specific Runners</code> untuk poin 2 dan 3.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-06.png"></p>

<p>Kemudian di bagian <code>Shared Runners</code> klik tombol <code>Disable shared Runners</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-07.png"></p>

<p><strong>Langkah 4</strong>.  Berikutnya adalah mengaktifkan <code>Command Prompt</code> dengan mode <code>Administrator</code> kemudian masuk ke folder instalasi GitLab Runner</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-08.png"></p>

<p>Setelah itu ketik perintah <code>gitlab-runner register</code>, kemudian tinggal jawab pertanyaan yang ada termasuk informasi <code>Specific Runners</code> yang kita dapatkan di <code>langkah 3</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-09.png"></p>

<p>Jika proses registrasinya berhasil, kita bisa cek runner aktifnya dibawah informasi <code>Specific Runners</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-10.png"></p>

<h3>Contoh Project</h3>

<p>Untuk keperluan uji coba kali ini saya menggunakan contoh aplikasi Northwind yang bisa Anda download di <a href="https://github.com/k4m4r82/RepositoryPattern">sini</a>. Setelah itu kita <code>push</code> source codenya ke link repository gitlab yang sudah kita buat di langkah-langkah sebelumnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-11.png"></p>

<p>Dan untuk proses <code>push</code>-nya saya menggunakan <a href="https://tortoisegit.org/download/">TortoiseGit</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-12.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-14.png"></p>

<h3>Menambahkan file .gitlab-ci.yml</h3>

<p>Untuk melakukan konfigurasi <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>, kita perlu menambahkan file dengan nama <a href="https://docs.gitlab.com/ee/ci/yaml/">.gitlab-ci.yml</a>. File ini adalah file text biasa yang menggunakan format <a href="https://en.wikipedia.org/wiki/YAML">YAML</a>, sehingga file konfigurasi ini bisa kita tambahkan ke folder source code kemudian kita simpan juga ke repository git.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-15.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-161.png"></p>

<p>Berikut contoh isi file <code>.gitlab-ci.yml</code></p>

<div><script src='https://gist.github.com/f88e4bb02eb8ade0d9d049a07ec6ee30.js'></script>
<noscript><pre><code>variables:
  MsBuildPath: &quot;C:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe&quot;
  NugetPath: &quot;C:\\GitLab-Runner\\NuGet\\nuget.exe&quot;
  SolutionName: &quot;Northwind.sln&quot;

stages: # tipe dari job
  - restore # stage untuk merestore paket nuget
  - build # stage untuk proses build  
  
cache:
  untracked: true
  paths:    
    - lib # folder hasil restore nuget package    

restore_nuget_package: # job 1
  stage: restore
  script:
    - echo &quot;Sedang merestore paket nuget untuk %SolutionName%...&quot;
    - &#39;&quot;%NugetPath%&quot; restore &quot;src\%SolutionName%&quot;&#39;  
    
build_solution: # job 2
  stage: build
  script:     
    - echo &quot;Sedang melakukan proses build untuk %SolutionName%...&quot;
    - &#39;&quot;%MsBuildPath%&quot; &quot;src\%SolutionName%&quot;&#39;    
  only:
    - master # validasi untuk branch atau tag</code></pre></noscript></div>


<p>Coba perhatikan skrip di atas, di baris ke-6 kita mendefinisikan beberapa stage yaitu <code>restore</code> dan <code>build</code>, kita bisa juga menambahkan stage yang lain misal <code>test</code>, <code>deploy</code>, <code>development</code>, <code>production</code>, dst. Stage digunakan untuk menentukan jenis dari job. Jadi perlu diingat bahwa stage dan job itu berbeda, walaupun dibanyak contoh menggunakan nama yang sama untuk stage dan job.</p>

<p>Eksekusi antar job di <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> itu sifatnya independen atau dengan kata lain tidak ada hubungan antar job. Ketika job B membutuhkan file yang dihasilkan oleh job A secara default tidak bisa, sehingga kita perlu menambahkan konfigurasi <code>cache</code>, seperti yang terlihat di baris ke-10. Kita mendaftarkan folder <code>lib</code> ke dalam konfigurasi <code>cache</code>. Folder <code>lib</code> ini berisi file-file library (*.dll) hasil dari job <code>restore_nuget_package</code>. Semua file yang ada di folder <code>lib</code> ini dibutuhkan pada saat menjalankan job <code>build_solution</code>.</p>

<p>Berikutnya kita pindah ke baris 15, di baris ini kita mendefinisikan job dengan nama <code>restore_nuget_package</code> dengan tipe stage <code>restore</code>, kemudian menjalankan skrip untuk merestore paket nuget.</p>

<p>Terakhir di baris ke-21, kita mendefinisikan job lain dengan nama <code>build_solution</code>, sesuai namanya job ini digunakan untuk membuild solution atau project atau klo lewat IDE Visual Studio .NET kita menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging).</p>

<h3>Cara Mengecek/Memvalidasi Skrip File .gitlab-ci.yml</h3>

<p>Sebelum kita menambahkan file <code>.gitlab-ci.yml</code> ke repository git, ada baiknya kita cek terlebih dahulu apakah script yang kita tuliskan sudah benar atau belum.
<a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah menyediakan link khusus untuk mengeceknya, yang bisa Anda cek di <a href="https://gitlab.com/ci/lint">sini</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-171.png"></p>

<h3>Testing Build</h3>

<p>Untuk testing build kita tinggal melakukan push ke repository git.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-181.png"></p>

<p>Kemudian untuk melihat log progres buildnya kita bisa cek link <code>Pipelines</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-19.png"></p>

<p>Gambar detail job yang sedang dijalankan</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-201.png"></p>

<p>Untuk melihat detail log dari masing-masing job, tinggal kita klik nama jobnya, misal job restore nuget package</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-211.png"></p>

<p>job build solution</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-221.png"></p>

<p>Status proses build berhasil</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170830-231.png"></p>

<p>Untuk contoh lengkap hasil buildnya bisa Anda cek di <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">sini</a></p>

<p>Akhirnya selesai juga postingan <a href="http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/">GitLab CI untuk .NET Developer Bagian #1</a>, dan mudah-mudahan bisa dipahami :-D. Untuk postingan berikutnya insyaAlloh kita akan menambahkan job untuk membuat paket instalasi menggunakan Inno Setup dan menguploadnya sehingga bisa langsung didownload via  Dashboard <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>.</p>

<p>Selamat <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Service SMS Gateway Untuk Engine Gammu]]></title>
    <link href="http://coding4ever.net/blog/2017/08/22/membuat-service-sms-gateway-untuk-engine-gammu/"/>
    <updated>2017-08-22T15:59:07+07:00</updated>
    <id>http://coding4ever.net/blog/2017/08/22/membuat-service-sms-gateway-untuk-engine-gammu</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2017/08/gammu.png" width="100" height="100">Pasti udah pada tau kan apa itu <a href="https://wammu.eu/gammu/">Gammu</a> ? Klo enggak ya keterlaluan he he. Itu loh engine yang biasa digunakan untuk mengirim dan menerima sms dan biasanya sering digunakan untuk membuat sms gateway.</p>

<p>Di postingan ini saya tidak akan membahas bagaimana cara instalasi <a href="https://wammu.eu/gammu/">Gammu</a>, konfigurasi dan database yang digunakan. Jadi saya mengasumsikan bahwa service Gammu Anda (GammuSMSD) sudah berjalan dengan baik, dengan kata lain jika ada sms masuk ke nomor yang Anda gunakan sebagai sms center, maka service <a href="https://wammu.eu/gammu/">Gammu</a> otomatis akan meng-INSERT-kan sms tersebut ke tabel inbox.</p>

<!-- more -->


<h3>Struktur Tabel Gammu</h3>

<p>Sebelum kita lanjut bagaimana membuat windows service untuk engine <a href="https://wammu.eu/gammu/">Gammu</a> ada baiknya kita melihat dulu struktur tabel <a href="https://wammu.eu/gammu/">Gammu</a> secara menyeluruh.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-01.png"></p>

<p>Dari keenam tabel di atas, kita cukup fokus di 3 tabel utama yaitu <code>inbox</code>, <code>outbox</code> dan <code>outbox_multipart</code>. Tabel inbox otomatis terisi, jika ada sama masuk tentunya dengan syarat service Gammu Anda (GammuSMSD) sudah berjalan dengan baik. Di tabel inbox ini juga sudah ada field dengan nama Processed yang bisa kita gunakan sebagai flag/penanda sms yang sudah diproses.</p>

<p>Nah jika ada sms yang mau dikirim, tinggal kita INSERT-kan datanya secara manual ke tabel outbox. Dan jika smsnya panjang (lebih dari 160 karakter), smsnya harus kita pecah menjadi 2, 3, dst sesuai dengan jumlah karakter yang mau dikirim. Setelah dipecah, sms pertama masuk ke tabel outbox, dan sisanya masuk ke tabel outbox_multipart.</p>

<p>Untuk informasi lebih lanjut tentang struktur database <a href="https://wammu.eu/gammu/">Gammu</a> bisa Anda cek di <a href="https://wammu.eu/docs/manual/smsd/tables.html">sini</a>.</p>

<h3>Konfigurasi Gammu</h3>

<p>Untuk konfigurasi gammu ada dua file yang harus kita edit nilainya yaitu file <code>smsdrc</code> dan <code>gammurc</code>. File ini biasanya ada di folder <code>Instalasi Gammu\share\doc\gammu\examples\config</code> trus kita copykan ke folder <code>Instalasi Gammu\bin</code>. Berikut adalah contoh konfigurasi gammu yang saya gunakan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># konfigurasi file gammurc
</span><span class='line'>
</span><span class='line'>[gammu]
</span><span class='line'>device = com3:
</span><span class='line'>connection = at115200</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># konfigurasi file smsdrc
</span><span class='line'>
</span><span class='line'>[gammu]
</span><span class='line'>device = com3:
</span><span class='line'>connection = at115200
</span><span class='line'>
</span><span class='line'>[smsd]
</span><span class='line'># SMSD service to use, one of FILES, MYSQL, PGSQL, DBI
</span><span class='line'>service = SQL
</span><span class='line'>
</span><span class='line'># File (or stderr, syslog, eventlog) where information will be logged
</span><span class='line'>logfile = C:\gammu\log\gammu.log
</span><span class='line'>
</span><span class='line'># Amount of information being logged, each bit mean one level
</span><span class='line'>debuglevel = 255
</span><span class='line'>
</span><span class='line'># How many seconds should SMSD wait after there is no message in outbox before scanning it again. Default is 30.
</span><span class='line'>commtimeout = 1
</span><span class='line'>
</span><span class='line'># Shows how many seconds SMSD should wait for network answer during sending sms. If nothing happen during this time, sms will be resent. Default is 30.
</span><span class='line'>sendtimeout = 10
</span><span class='line'>
</span><span class='line'># Phone communication settings
</span><span class='line'>checksecurity = 0
</span><span class='line'>CheckBattery = 0
</span><span class='line'>
</span><span class='line'># Database backends congfiguration
</span><span class='line'>user = root
</span><span class='line'>password = rahasia
</span><span class='line'>host = gammuodbc
</span><span class='line'>
</span><span class='line'># pc can also contain port or socket path after colon (eg. localhost:/path/to/socket)
</span><span class='line'>database = db_gammu
</span><span class='line'>
</span><span class='line'># DBI configuration
</span><span class='line'>driver = odbc
</span><span class='line'>
</span><span class='line'># Possible values: mysql, pgsql, sqlite, mssql (Microsoft SQL Server), access (Microsoft Access), oracle
</span><span class='line'># ref: https://wammu.eu/docs/manual/smsd/config.html#gammu-smsdrc
</span><span class='line'>sql = mysql</span></code></pre></td></tr></table></div></figure>


<p>Coba perhatikan konfigurasi pada file <code>smsdrc</code> di atas terutama di bagian <code>host</code>, nilainya kita isikan dengan nama ODBC yang terhubung ke database gammu, dan untuk membuat ODBCnya kita gunakan fasilitas ODBC Data Source.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-02.png"></p>

<p>Untuk menambahkan ODBC di atas, sebelumnya kita harus menginstall terlebih dulu MySQL Connector/ODBC.</p>

<h3>Environment Testing dan Development Tool yang Digunakan</h3>

<ul>
<li>Windows 7 Pro 64 bit</li>
<li>Visual Studio Community 2013 – untuk bahasa yang digunakan C#</li>
<li>Tipe aplikasi – Windows Service</li>
<li>Micro ORM <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper.NET</a></li>
<li>Gammu-1.38.4-Windows-64bit</li>
<li>Database SQLite – untuk menyimpan data siswa, mata pelajaran dan nilai</li>
<li>Database MySQL v5.5.45 – untuk menyimpan data gammu</li>
<li>MySQL Connector/ODBC v5.3.9</li>
<li>Modem Wavecom M1306B</li>
</ul>


<p>Kok menggunakan Connector/ODBC ? Iya karena Gammu v1.38.4 sudah mendukung koneksi menggunakan ODBC. Jadi selain MySQL, dengan menggunakan ODBC dukungan databasenya jadi lebih banyak seperti PostgreSQL, SQLite, Oracle, MS SQL Server dan MS Access.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-03.png"></p>

<h3>Contoh Kasus</h3>

<p>Untuk contoh kasusnya kita akan membuat service sms gateway untuk request data yang berhubungan dengan siswa seperti data pribadi, mata pelajaran dan nilai. Service sms gateway ini akan terhubung ke dua database yaitu database gammu yang tersimpan di MySQL dan database nilai yang tersimpan di SQLite. Sms gateway ini mempunyai beberapa format request data yaitu:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CEKMP                  # request data mata pelajaran
</span><span class='line'>CEKSISWA#NIS           # request data siswa
</span><span class='line'>CEKNILAI#NIS#&lt;KODE MP> # request data nilai, kode mp optional</span></code></pre></td></tr></table></div></figure>


<p>Untuk data siswa, mata pelajaran dan nilainya disimpan menggunakan database SQLite.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-04.png"></p>

<h3>Project SMS Gateway</h3>

<p>Project SMS Gateway ini dibangun dengan menggunakan <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">konsep separation  of  concern</a> atau pemisahan kode program berdasarkan fungsinya. Semua kode untuk akses database harus dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop, dengan mudah digunakan untuk aplikasi lainnya seperti web, console atau windows service. Selain itu penerapan konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a> secara disiplin, dapat menghasilkan kode program yang dapat dites secara otomatis menggunakan tool <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a>.</p>

<p>Untuk urusan kode akses database, project ini menggunakan pattern/pola <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a> yang berisi semua kode untuk mengakses database. Semua kode yang sepesifik terhadap implementasi akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana akses database diterapkan, apakah menggunakan ADO.NET murni (raw ADO.NET) atau menggunakan tool ORM/Micro ORM seperti <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper.NET</a>, <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> atau NHibernate. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-05.png"></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-06.png"></p>

<p>Nah untuk contoh project SMS Gateway ini menggunakan arsitektur yang kedua.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-07.png"></p>

<p>Yang pertama adalah project <code>WindowsServiceGammu.Model</code>. Project ini bertipe <code>Class Library</code> yang berisi class model/entity yang merupakan representasi dari sebuah table. Jadi kalo kita ingin menerapkan konsep OOP dalam pemrograman database maka class-class model/entity ini wajib kita gunakan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-08.png"></p>

<p>Berikutnya adalah project <code>WindowsServiceGammu.Repository</code>. Project ini bertipe <code>Class Library</code> yang berisi class-class repository yang bertugas untuk menangani operasi CRUD. Biasanya untuk masing-masing class model/entity kita buatkan class repositorynya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-09.png"></p>

<p>Pada gambar di atas saya menggunakan dua class context yaitu <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/Context/MySqlContext.cs">MySqlContext</a> dan <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/Context/SQLiteContext.cs">SQLiteContext</a>. Class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertugas untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function. Selain class context juga ada class-class repository yang bertugas untuk menangani operasi CRUD. Berikut adalah contoh class repository untuk class <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/SiswaRepository.cs">SiswaRepository</a> dan <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/GammuRepository.cs">GammuRepository</a>.</p>

<div><script src='https://gist.github.com/6398e259ef86dcf1a3386a2e3cd55215.js'></script>
<noscript><pre><code>using Dapper;
using log4net;
using WindowsServiceGammu.Model;

namespace WindowsServiceGammu.Repository
{
    public interface ISiswaRepository
    {
        Siswa GetByNIS(string nis);
    }

    public class SiswaRepository : ISiswaRepository
    {
        private IDapperContext _context;
        private ILog _log;

        public SiswaRepository(IDapperContext context, ILog log)
        {
            this._context = context;
            this._log = log;
        }

        public Siswa GetByNIS(string nis)
        {
            Siswa siswa = null;

            try
            {
                var sql = @&quot;select nis, nama 
                            from siswa 
                            where nis = @nis&quot;;

                siswa = _context.db.QuerySingleOrDefault&lt;Siswa&gt;(sql, new { nis });
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return siswa;   
        }
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/e7f4273deeec9753254b46b8a830fa5d.js'></script>
<noscript><pre><code>using Dapper;
using log4net;
using WindowsServiceGammu.Model.Gammu;

namespace WindowsServiceGammu.Repository
{
    public interface IGammuRepository
    {
        /// &lt;summary&gt;
        /// Method untuk membaca data sms di tabel inbox yang belum diproses
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        IList&lt;Inbox&gt; ReadInbox();

        /// &lt;summary&gt;
        /// Method untuk mengupdate status inbox menjadi sudah diproses
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;inboxId&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int UpdateInbox(int inboxId);

        /// &lt;summary&gt;
        /// Method untuk menyimpan data sms yang akan dikirim ke tabel outbox
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int SaveOutbox(Outbox obj);

        /// &lt;summary&gt;
        /// Method untuk menyimpan data sms ke 2, 3, dst ke tabel outbox_multipart, jika data sms lebih dari 160 karakter
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int SaveOutboxMultipart(OutboxMultipart obj);
    }

    public class GammuRepository : IGammuRepository
    {
        private IDapperContext _context;
        private ILog _log;

        public GammuRepository(IDapperContext context, ILog log)
        {
            this._context = context;
            this._log = log;
        }

        public IList&lt;Inbox&gt; ReadInbox()
        {
            IList&lt;Inbox&gt; listOfSMS = new List&lt;Inbox&gt;();

            try
            {
                var sql = @&quot;SELECT `ID`, `UDH`, `SenderNumber`, `TextDecoded`, `ReceivingDateTime`
                            FROM inbox 
                            WHERE Processed = &#39;false&#39;
                            ORDER BY ReceivingDateTime&quot;;

                listOfSMS = _context.db.Query&lt;Inbox&gt;(sql)
                                              .ToList();

            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return listOfSMS;
        }

        public int UpdateInbox(int inboxId)
        {
            var result = 0;

            try
            {
                var sql = @&quot;UPDATE inbox SET Processed = &#39;true&#39; 
                            WHERE id = @inboxId&quot;;
                result = _context.db.Execute(sql, new { inboxId });
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }

        public int SaveOutbox(Outbox obj)
        {
            var result = 0;

            try
            {
                var sql = @&quot;INSERT INTO outbox (DestinationNumber, UDH, TextDecoded, MultiPart, CreatorID)
                            VALUES (@DestinationNumber, @UDH, @TextDecoded, @MultiPart, &#39;Gammu&#39;)&quot;;
                result = _context.db.Execute(sql, obj);

                if (result &gt; 0)
                {
                    sql = @&quot;SELECT CONVERT(LAST_INSERT_ID(), SIGNED INTEGER) AS ID&quot;;
                    obj.Id = _context.db.QuerySingleOrDefault&lt;int&gt;(sql);
                }
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }

        public int SaveOutboxMultipart(OutboxMultipart obj)
        {
            var result = 0;

            try
            {
                var sql = @&quot;INSERT INTO outbox_multipart(ID, UDH, TextDecoded, SequencePosition)
                            VALUES (@ID, @UDH, @TextDecoded, SequencePosition)&quot;;
                result = _context.db.Execute(sql, obj);
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }
    }
}</code></pre></noscript></div>


<p>Untuk class repository lainnya bisa Anda cek di <a href="https://github.com/k4m4r82/gammu-sms-gateway/tree/master/src/WindowsServiceGammu.Repository">sini</a>.</p>

<p>Dan yang terakhir adalah project <code>WindowsServiceGammu.Service</code> yang bertipe <code>Windows Service</code>. Project ini tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-10.png"></p>

<p>Project ini hanya memanggil class-class model atau repository yang sudah ada.</p>

<p>Ada dua class utama yang digunakan oleh project ini yang pertama yaitu class <code>MainService</code> yang merupakan turunan dari class ServiceBase. Class ServiceBase adalah class bawaan .NET Framework yang merupakan class dasar agar sebuah aplikasi bisa di register/menjadi bagian dari aplikasi service (Windows Service).</p>

<div><script src='https://gist.github.com/1713b5f3b53013a0cf2e0e5c199875cf.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;

using log4net;

namespace WindowsServiceGammu.Service
{
    public partial class MainService : ServiceBase
    {
        private readonly List&lt;TaskBase&gt; _listOfTask;
        private readonly ILog _log;
        private const int RefreshInterval = 1000; // In milliseconds

        public MainService()
        {
            InitializeComponent();
            _log = Program.log;

            // Add in this list the tasks to run periodically.
            // Tasks frequencies are set in the corresponding classes.
            _listOfTask = new List&lt;TaskBase&gt;
            {
                new SMSGatewayTask(RefreshInterval, _log)
            };
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _log.Info(&quot;Services started ...&quot;);
                _listOfTask.ForEach(t =&gt; t.StartService());
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
                Stop();
            }
        }

        protected override void OnStop()
        {
            _log.Info(&quot;Services stoped ...&quot;);
            _listOfTask.ForEach(t =&gt; t.StopService());
        }
    }
}</code></pre></noscript></div>


<p>Berikutnya adalah class <code>SMSGatewayTask</code> yang bertugas untuk membaca tabel inbox-nya gammu, memvalidasi perintah yang ada dan mengenerate pesan balasan dan kemudian menyimpannya ke tabel outbox. Semua aktivitas membaca dan menyimpan kembali ke database ini dibantu oleh class-class repository.</p>

<div><script src='https://gist.github.com/5d25b7f4ab056635fc915bb1404cf909.js'></script>
<noscript><pre><code>using log4net;
using WindowsServiceGammu.Model;
using WindowsServiceGammu.Model.Gammu;
using WindowsServiceGammu.Repository;

namespace WindowsServiceGammu.Service
{
    public class SMSGatewayTask : TaskBase
    {
        private ILog _log;

        public SMSGatewayTask(int refreshInterval, ILog log)
            : base(refreshInterval) // In milliseconds
        {
            _log = log;
        }        

        protected override void ExecTask()
        {
            using (IDapperContext mysqlContext = new MySqlContext())
            {
                IGammuRepository gammuRepo = new GammuRepository(mysqlContext, _log);
                var listOfInbox = gammuRepo.ReadInbox();

                foreach (var inbox in listOfInbox)
                {                    
                    var phoneNumber = inbox.SenderNumber;

                    if (phoneNumber.Substring(0, 3) == &quot;+62&quot;)
                    {
                        var keyword = inbox.TextDecoded;
                        var prefix = keyword;
                        var msg = string.Empty;

                        if (keyword.IndexOf(&quot;#&quot;) &gt;= 0) // karakter # -&gt; separator keyword
                        {
                            var nis = string.Empty;
                            var kodeMP = string.Empty;

                            var arrKeyword = keyword.Split(&#39;#&#39;);
                            prefix = arrKeyword[0];

                            switch (prefix.ToUpper())
                            {
                                case &quot;CEKSISWA&quot;: // FORMAT PERINTAH: CEKSISWA#NIS
                                    nis = arrKeyword[1]; // nis di ambil dari parameter pertama
                                    msg = GetBalasanCekSiswa(nis);

                                    break;

                                case &quot;CEKNILAI&quot;: // FORMAT PERINTAH: CEKNILAI#NIS#&lt;OPTIONAL KODE MP&gt;
                                    nis = arrKeyword[1]; // nis di ambil dari parameter pertama
                                    kodeMP = arrKeyword.Count() &gt; 2 ? arrKeyword[2] : string.Empty;

                                    msg = GetBalasanCekNilai(nis, kodeMP);
                                    break;

                                default:
                                    break;
                            }
                        }
                        else
                        {
                            // FORMAT PERINTAH: CEKMP
                            if (keyword.ToUpper() == &quot;CEKMP&quot;)
                            {
                                msg = GetBalasanCekMP();
                            }
                            else // keyword tidak valid
                            {
                                msg = string.Format(&quot;Keyword {0} tidak terdaftar&quot;, keyword.ToUpper());
                            }
                        }

                        SaveOutbox(msg, inbox, gammuRepo);
                    }                    
                }
            }
        }

        /// &lt;summary&gt;
        /// Method untuk menyimpan pesan yang akan dikirim ke tabel outbox
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;msg&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;inbox&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;gammuRepo&quot;&gt;&lt;/param&gt;
        private void SaveOutbox(string msg, Inbox inbox, IGammuRepository gammuRepo)
        {
            var result = 0;

            // insert ke tabel outbox
            var jumlahSMS = (int)Math.Ceiling((double)msg.Length / 160);

            if (jumlahSMS &gt; 1) // balasan sms &gt; 160 karakter, sms dipecah sebelum dikirim
            {
                var listSms = msg.SplitByLength(153)
                                 .ToList();

                var smsKe = 1;
                var outboxID = 0;
                foreach (var sms in listSms)
                {
                    var udh = inbox.UDH;

                    if (udh.Length == 0)
                    {
                        udh = string.Format(&quot;050003A7{0:00}{1:00}&quot;, listSms.Count, smsKe);
                    }
                    else
                    {
                        udh = inbox.UDH.Substring(0, inbox.UDH.Length - 4);
                        udh = string.Format(&quot;{0}{1:00}{2:00}&quot;, udh, listSms.Count, smsKe);
                    }

                    if (smsKe == 1)
                    {
                        var outbox = new Outbox
                        {
                            DestinationNumber = inbox.SenderNumber,
                            UDH = udh,
                            TextDecoded = sms,
                            MultiPart = &quot;true&quot;
                        };

                        result = gammuRepo.SaveOutbox(outbox);
                        if (result &gt; 0)
                        {
                            outboxID = outbox.Id;
                        }
                    }
                    else // sms ke 2, 3, dst, simpan ke tabel outbox_multipart
                    {
                        var outboxMultipart = new OutboxMultipart
                        {
                            Id = outboxID,
                            UDH = udh,
                            TextDecoded = sms,
                            SequencePosition = smsKe
                        };

                        result = gammuRepo.SaveOutboxMultipart(outboxMultipart);
                    }

                    smsKe++;
                }
            }
            else // balasan sms &lt;= 160 karakter
            {
                var outbox = new Outbox
                {
                    DestinationNumber = inbox.SenderNumber,
                    UDH = string.Empty,
                    TextDecoded = msg,
                    MultiPart = &quot;false&quot;
                };

                result = gammuRepo.SaveOutbox(outbox);
            }

            if (result &gt; 0)
            {
                // update status pesan di inbox menjadi sudah diproses
                result = gammuRepo.UpdateInbox(inbox.Id);
            }
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKSISWA#NIS
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;nis&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekSiswa(string nis)
        {
            var msg = string.Empty;

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                ISiswaRepository siswaRepo = new SiswaRepository(sqliteContext, _log);
                var siswa = siswaRepo.GetByNIS(nis);

                if (siswa == null)
                {
                    msg = string.Format(&quot;NIS: {0} tidak ditemukan&quot;, nis);
                }
                else
                {
                    msg = string.Format(&quot;NIS: {0}\nNAMA: {1}&quot;, siswa.nis, siswa.nama);
                }
            }

            return msg;
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKNILAI#NIS#&lt;OPTIONAL KODE MP&gt;
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;nis&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;kodeMP&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekNilai(string nis, string kodeMP)
        {
            var msg = string.Empty;

            IList&lt;Nilai&gt; listOfNilai = new List&lt;Nilai&gt;();

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                ISiswaRepository siswaRepo = new SiswaRepository(sqliteContext, _log);
                var siswa = siswaRepo.GetByNIS(nis);

                if (siswa == null)
                {
                    msg = string.Format(&quot;NIS: {0} tidak ditemukan&quot;, nis);
                }
                else
                {
                    INilaiRepository nilaiRepo = new NilaiRepository(sqliteContext, _log);

                    if (nis.Length &gt; 0 &amp;&amp; kodeMP.Length &gt; 0)
                    {
                        var nilai = nilaiRepo.GetByNIS(nis, kodeMP);
                        listOfNilai.Add(nilai);
                    }
                    else
                    {
                        listOfNilai = nilaiRepo.GetByNIS(nis);
                    }

                    msg = string.Format(&quot;NIS: {0}\nNAMA: {1}\n&quot;, siswa.nis, siswa.nama);
                    msg += &quot;Nilai:\n&quot;;

                    foreach (var nilai in listOfNilai)
                    {
                        msg += string.Format(&quot;{0}: {1}\n&quot;, nilai.kode, nilai.nilai);
                    }
                }
            }

            return msg;
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKMP
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekMP()
        {
            var msg = string.Empty;

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                IMataPelajaranRepository mataPelajaranRepo = new MataPelajaranRepository(sqliteContext, _log);
                var listOfMataPelajaran = mataPelajaranRepo.GetAll();

                msg = string.Empty;
                msg = &quot;kode mata pelajaran:\n&quot;;

                foreach (var mataPelajaran in listOfMataPelajaran)
                {
                    msg += string.Format(&quot;{0}: {1}\n&quot;, mataPelajaran.kode, mataPelajaran.deskripsi);
                }
            }

            return msg;
        }
    }
}</code></pre></noscript></div>


<h3>Instalasi Windows Service</h3>

<p>Seperti yang sudah saya jelaskan di atas, project dengan tipe Windows Service tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service. Untuk mendaftarkannya kita gunakan tool bawaan .NET Framework yaitu InstallUtil.exe.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># install service
</span><span class='line'>%WINDIR%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe WindowsServiceGammu.Service.exe
</span><span class='line'>
</span><span class='line'># uninstall service
</span><span class='line'>%WINDIR%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe WindowsServiceGammu.Service.exe /u</span></code></pre></td></tr></table></div></figure>


<p>Jika berhasil seharusnya service sms gateway yang sudah kita buat akan terdaftar di Windows Service.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/08/20170822-11.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/gammu-sms-gateway">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenRetail - Open Source Project for Retail Business]]></title>
    <link href="http://coding4ever.net/blog/2017/04/13/openretail-open-source-software-for-retail-business/"/>
    <updated>2017-04-13T22:18:44+07:00</updated>
    <id>http://coding4ever.net/blog/2017/04/13/openretail-open-source-software-for-retail-business</id>
    <content type="html"><![CDATA[<h3>Apa itu OpenRetail?</h3>

<p><img class="left" src="https://openretailblog.files.wordpress.com/2017/04/logo-openretail.png" width="91" height="91"><a href="http://openretailblog.wordpress.com/">OpenRetail</a> adalah software open source khusus untuk bidang usaha ritel, grosir, mini market, toko bangunan, toko komputer, toko buku dan bidang usaha lainnya yang sejenis.</p>

<p>Saat ini pilihan software untuk usaha retil memang banyak ditambah lagi harga yang bervariasi mulai dari ratusan hingga jutaan rupiah. Tapi untuk software yang gratis, open source dan berkualitas mungkin OpenRetail adalah solusinya :-).</p>

<!-- more -->


<h3>Apakah aplikasi ini benar-benar gratis?</h3>

<p>Yuph, benar-benar gratis, bahkan lebih dari itu <a href="http://openretailblog.wordpress.com/">OpenRetail</a> adalah software open source sehingga Anda bisa mendownload kode sumbernya, mempelajarinya dan mengembangkan sendiri sesuai kebutuhan, tapi dengan syarat tidak boleh menghapus informasi asli tentang pembuat aplikasi ini.</p>

<p>Sebagai penutup, jika Anda merasakan manfaat menggunakan OpenRetail, jangan lupa untuk ikut <a href="https://openretailblog.wordpress.com/kontribusi/">berkontribusi</a> dalam pengembangan <a href="http://openretailblog.wordpress.com/">OpenRetail</a>.</p>

<p>Download: <a href="https://github.com/rudi-krsoftware/open-retail/releases">OpenRetail</a></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-1.png"></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-2.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-3.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-4.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-5.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/01/07.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-6.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-7.png" title="" ></p>

<p><img class="center" src="https://openretailblog.files.wordpress.com/2017/04/08042017-8.png" title="" ></p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Log Aplikasi Menggunakan Log4Net]]></title>
    <link href="http://coding4ever.net/blog/2017/01/23/membuat-log-aplikasi-menggunakan-log4net/"/>
    <updated>2017-01-23T15:03:40+07:00</updated>
    <id>http://coding4ever.net/blog/2017/01/23/membuat-log-aplikasi-menggunakan-log4net</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2017/01/logo-log4net.png" width="77" height="64">Secara teknis kita memang tidak bisa membuat aplikasi yang 100% bebas dari bug. Seberapa keraspun kita mencoba pasti aplikasi yang kita buat ada bugnya. Di sisi lain user adalah tester terbaik yang pernah ada :-D. Mereka bisa melakukan hal-hal luar biasa di luar perkiraan dan skenario kita yang bisa menyebabkan error, sayangnya user biasanya kurang bisa menjelaskan dengan baik apa yang menyebabkan error. Yang jelas, kita tidak dapat memperbaiki bug sampai kita tahu penyebabnya.</p>

<!-- more -->


<p>Saat ini, sebagian besar aplikasi menggunakan logging sebagai cara untuk menyimpan informasi tentang operasi yang dilakukan, karena data tersebut sangat berguna ketika kita harus mendiagnosa masalah yang terjadi pada saat aplikasi dijalankan. Logging di sini tidak hanya digunakan untuk mencatat error yang terjadi, tapi bisa juga digunakan untuk mencatat operasi harian yang dilakukan oleh aplikasi, seperti operasi simpan, update, delete atau yang lebih dikenal dengan istilah operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>.</p>

<p>Dari pada kita harus membuat fungsi sendiri untuk melakukan proses logging, ada baiknya kita menggunakan library yang sudah terbukti ampuh, mudah digunakan dan open source. Salah satunya adalah <a href="https://logging.apache.org/log4net/">log4net</a>.</p>

<h3>Log4net</h3>

<p><a href="https://logging.apache.org/log4net/">Log4net</a> adalah library open source yang dibangun di atas teknologi .NET. Dengan menggunakan library ini kita bisa dengan mudah mengatur output dari log, apakah akan ditampilkan langsung di layar console, disimpan ke file text/database atau pilihan output lainnya. <a href="https://logging.apache.org/log4net/">Log4net</a> merupakan hasil portingan dari library <a href="https://logging.apache.org/log4j/2.x/">Log4J</a> yang digunakan untuk Java.</p>

<p>Beberapa fungsi atau fitur <a href="https://logging.apache.org/log4net/">Log4net</a> yang akan dibahas pada postingan kali ini adalah:</p>

<ul>
<li>Logger – Logger adalah object yang bertugas mengeluarkan pesan log. Inilah object utama yang kita gunakan dalam kode program.</li>
<li>Level - Secara default, <a href="https://logging.apache.org/log4net/">Log4net</a> menyediakan beberapa level logging, diurutkan berdasarkan urutan prioritas terendah

<ul>
<li>ALL</li>
<li>DEBUG</li>
<li>INFO</li>
<li>WARN</li>
<li>ERROR</li>
<li>FATAL</li>
<li>OFF</li>
</ul>
</li>
<li>Appender - Appender  adalah  object  yang  bertugas  menampilkan  log  message. Ada beberapa appender yang biasa digunakan, misalnya:

<ul>
<li>ConsoleAppender - untuk  menampilkan  log  ke  console atau command prompt</li>
<li>RollingFileAppender - untuk menyimpan log ke dalam file</li>
</ul>


<p>Selain itu ada juga appender untuk menyimpan  ke  database,  mengirim  email,  mengakses  log  sistem operasi, dan berbagai tujuan lainnya. Untuk informasi lebih lanjut tentang <code>log4net appender</code> bisa Anda cek di <a href="https://logging.apache.org/log4net/release/config-examples.html">sini</a>.</p></li>
</ul>


<h3>Menggunakan Log4net</h3>

<p>Sebelum menggunakan <a href="https://logging.apache.org/log4net/">Log4net</a> kita siapkan terlebih dulu project uji cobanya. Project ini bisa langsung Anda download di <a href="https://github.com/k4m4r82/DemoLog4Net">sini</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-01.png"></p>

<p>Project ini menggunakan konsep <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a> untuk menerapkan <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">konsep separation of concern</a> atau pemisahan kode program berdasarkan fungsinya. Semua kode untuk akses database harus dipisahkan dengan kode untuk pengaturan user interface. Informasi lebih lanjut tentang <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a> bisa Anda cek di <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">sini</a>.</p>

<h5>Langkah 1: Menyiapkan tabel untuk menyimpan hasil log</h5>

<p>Seperti yang sudah saya jelaskan di bagian intro, bahwa <a href="https://logging.apache.org/log4net/">Log4net</a> mempunyai beberapa jenis objek appender yang bertugas untuk menampilkan log, salah satunya adalah  appender untuk menyimpan ke database. Karena data lognya akan disimpan ke database, tentunya kita harus menyiapkan struktur tabelnya terlebih dulu. Berdasarkan dokumentasi resmi <a href="https://logging.apache.org/log4net/release/config-examples.html">Apache log4net</a> struktur tabel standar yang digunakan adalah sebagai berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Log</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">Id</span> <span class="nb">int</span> <span class="k">IDENTITY</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">Date</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="k">Level</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Logger</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Message</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">4000</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="k">Exception</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">2000</span><span class="p">)</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Karena tidak semua field tabel di atas kita butuhkan, selain itu ada beberapa field yang perlu kita tambahkan, sehingga struktur tabel log di atas kita revisi seperti berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Logs</span><span class="p">(</span>
</span><span class='line'>    <span class="n">LogID</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTOINCREMENT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="k">Level</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ClassName</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span>
</span><span class='line'>    <span class="n">MethodName</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Message</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NewValue</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>    <span class="n">OldValue</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>    <span class="k">Exception</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>    <span class="n">CreatedBy</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span>
</span><span class='line'>    <span class="n">LogDate</span> <span class="n">DATETIME</span> <span class="k">DEFAULT</span> <span class="k">CURRENT_TIMESTAMP</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penjelasan struktur tabel:</p>

<ul>
<li>Level – Berisi salah satu level dari <a href="https://logging.apache.org/log4net/">Log4net</a> yaitu DEBUG, INFO, WARN, ERROR, FATAL dan level lainnya.</li>
<li>ClassName – Berisi namespace dan nama class yang memanggil objek logger</li>
<li>MethodName – Berisi nama method yang memanggil objek logger</li>
<li>Message – Berisi pesan yang kita tambahkan pada saat memanggil objek logger</li>
<li>NewValue – Berisi data yang ditambahkan atau data setelah di edit dalam format json</li>
<li>OldValue – Berisi data sebelum di edit atau data yang dihapus</li>
<li>Exception – Menyimpan nilai string dari objek exception</li>
<li>CreatedBy – Menyimpan informasi user yang menjalankan aplikasi</li>
</ul>


<p>Di bawah ini adalah contoh hasil log yang sudah disimpan ke dalam database.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-021.png"></p>

<h5>Langkah 2: Menambahkan library <a href="https://logging.apache.org/log4net/">Log4net</a> via <a href="http://coding4ever.net/blog/2014/03/11/nuget/">nuget package manager</a></h5>

<p>Library <a href="https://logging.apache.org/log4net/">Log4net</a> sudah tersedia di repository <a href="http://www.nuget.org/">nuget</a> sehingga mempermudah kita dalam proses instalasinya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-03.png"></p>

<h5>Langkah 3: Menambahkan class Log4NetRepository dan Log4NetAppender</h5>

<p>Setelah menyiapkan tabel <code>logs</code> (langkah 1), langkah berikutnya adalah menambahkan <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Repository.Service/Log4NetRepository.cs">class repository</a> untuk mengakses tabel tersebut. Class ini dibuat berdasarkan <a href="http://coding4ever.net/blog/categories/repository-pattern/">repository pattern</a> yang sudah pernah saya bahas di <a href="http://coding4ever.net/blog/categories/repository-pattern/">sini</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-04.png"></p>

<p>Class <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Repository.Service/Log4NetRepository.cs">Log4NetRepository</a> ini nantinya akan kita akses melalui class <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Repository.Service/Log4NetAppender.cs">Log4NetAppender</a>. Class <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Repository.Service/Log4NetAppender.cs">Log4NetAppender</a> merupakan class  custom Log4Net appender yang merupakan turunan dari class <a href="https://logging.apache.org/log4net/log4net-1.2.13/release/sdk/log4net.Appender.AppenderSkeleton.html">AppenderSkeleton</a>. Class ini akan meng-override method Append.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-05.png"></p>

<p>Setelah itu kita lengkapi kode implementasinya seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-06.png"></p>

<p>Untuk informasi lebih lanjut tentang <code>log4net appender</code> bisa Anda cek di <a href="https://logging.apache.org/log4net/release/config-examples.html">sini</a>.</p>

<h5>Langkah 4: Menambahkan konfigurasi Log4Net</h5>

<p>Edit file app.config/web.config, di file ini kita akan menambahkan konfigurasi log4net untuk mengeset custom appender dan level logging yang sudah kita buat dilangkah 3.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-07.png"></p>

<h5>Langkah 5: Tes Pemanggilan Objek Logger</h5>

<p>Sebelum kita lanjut ke tes pemanggilan objek logger, aktifkan terlebih dulu class  entry point (<a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.WinFormApp/Program.cs">Program.cs</a>). Setelah itu tambahkan kode berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-08.png"></p>

<p>Dibaris ke 9, kita menambahkan attribut <code>[assembly: log4net.Config.XmlConfigurator(Watch = true)]</code> yang berfungsi untuk membaca konfigurasi log4net yang tersimpan di file app.config/web.config.</p>

<p>Dibaris 14 kita menambahkan public static objek dengan nama log (logger), objek inilah yang bertugas untuk mengeluaran pesan log. Dan terakhir di baris 23 kita menambahkan custom property dengan nama <code>UserName</code>. Nilai property ini akan di baca oleh class <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Repository.Service/Log4NetAppender.cs">custome Log4Net appender</a> sebelum di simpan ke database.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-09.png"></p>

<p>Setelah semua persiapan selesai, kita akan memanggil objek logger pada event/method tertentu, misal pada saat menyimpan data (Save), Edit data (Update) dan Hapus Data (Delete).</p>

<h4>Logger untuk Method Save</h4>

<p>Berikut adalah contoh pemanggilan objek logger untuk method Save.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-10.png"></p>

<p>Perhatikan baris ke 115, kita mengeset nilai custom property dengan nama <code>NewValue</code>. Isinya adalah nilai dari objek class model/entity yang sudah di konversi ke format <a href="http://www.json.org/">JSON</a>. Method <code>ToJson</code> adalah <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">method extension</a> yang saya tambahkan untuk mempermudah proses konversi dari objek class model/entity ke format json. Saya sendiri menganggap <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">method extension</a> ini sebagai <code>jurus terlarang</code> :-D, kenapa terlarang karena <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">method extension</a> ini melanggar salah satu aturan dalam dunia <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> yaitu kita bisa menambahkan method baru dari sebuah class tanpa melalui mekanisme pewarisan (inheritance). Berikut kode untuk <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">method extension</a> <a href="https://github.com/k4m4r82/DemoLog4Net/blob/master/src/Northwind.Model/ModelExtension.cs">ToJson</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-11.png"></p>

<p>Kembali ke method Save di atas,jika dipanggil akan menghasilkan log seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-12.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-21.png"></p>

<p>Perhatikan field <code>NewValue</code> di atas, isinya adalah nilai dari objek Category yang sudah di konversi ke dalam format json.</p>

<h4>Logger untuk Method Delete</h4>

<p>Mirip dengan contoh pemanggilan objek logger untuk method Save. Hanya saja di sini kita mengeset nilai custom property dengan nama <code>OldValue</code> yang isinya adalah nilai objek class model/entity yang sudah  dikonversi ke json.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-14.png"></p>

<h4>Logger untuk Method Update</h4>

<p>Khusus untuk method Update kita akan me-log dua data yaitu data sebelum (OldValue) dan sesudah (NewValue) diupdate. Jadi kita akan memanggil objek logger di dua lokasi yang berbeda yaitu di layer User Interface (UI) dan layer Data Access (Repository).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-15.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-17.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-18.png"></p>

<p>Field <code>NewValue</code> akan berisi dengan data setelah diupdate, sedangkan field <code>OldValue</code> akan berisi dengan data sebelum diupdate.</p>

<h4>Terakhir Logger untuk Exception/Error</h4>

<p>Untuk log exception/error bisa langsung kita tempatkan di blok try .. catch.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-19.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/230117-20.png"></p>

<h3>Kesimpulan</h3>

<p>Dengan menggunakan library <a href="https://logging.apache.org/log4net/">log4net</a> akan memudahkan tugas harian kita dalam membuat log aplikasi.</p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoLog4Net">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manajemen Perubahan Struktur Database Menggunakan Liquibase]]></title>
    <link href="http://coding4ever.net/blog/2017/01/18/manajemen-perubahan-struktur-database-menggunakan-liquibase/"/>
    <updated>2017-01-18T10:53:57+07:00</updated>
    <id>http://coding4ever.net/blog/2017/01/18/manajemen-perubahan-struktur-database-menggunakan-liquibase</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2017/01/logo-lb.png" width="105" height="72">Dalam pembuatan aplikasi perubahan struktur/schema database merupakan hal yang wajar, baik pada fase development maupun setelah masuk ke fase implementasi (production/live). Ada banyak alasan kenapa kita perlu melakukan perubahan struktur database, contoh:</p>

<!-- more -->


<ul>
<li>Penambahan fitur baru yang membutuhan penambahan attribut/field di tabel yang sudah ada atau malah menambahkan tabel yang baru.</li>
<li>Perbaikan bug yang menyebabkan perubahan nama atau jenis data dalam database.</li>
<li>Issue kinerja sistem yang memerlukan tambahan index dalam database.</li>
</ul>


<p>Perubahan-perubahan ini tentunya <code>wajib</code> kita catat baik secara manual maupun menggunakan tool khusus yang bisa dengan mudah membuat log perubahan struktur database dari waktu ke waktu, karena jika tidak bisa berpotensi menjadi bug di kemudian hari.</p>

<p>Beberapa tool database management seperti <a href="https://www.webyog.com/">SQLyog</a> versi <a href="https://www.webyog.com/product/sqlyogFeatureListExpanded">Enterprise/Ultimate</a> atau <a href="http://www.sqlmanager.net/en/">EMS SQL Manager</a> versi berbayarnya memang menyediakan fitur untuk melakukan sinkronisasi struktur database dengan mudah, tapi bagi Anda yang mempunyai anggaran terbatas untuk membeli lisensinya ada alternatif tool gratis dan open source yang bisa kita gunakan salah satunya yaitu  <a href="http://www.liquibase.org/">Liquibase</a>.</p>

<p>Pernah kebayang nggak ngoding tanpa <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> seperti <a href="https://git-scm.com/">Git</a> atau <a href="https://subversion.apache.org/">SVN</a> kalo dulu mungkin iya, kalo sekarang <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> merupakan hal yang <code>wajib</code> kita gunakan untuk memberikan rasa aman saat ber-coding ria :-D. <a href="https://en.wikipedia.org/wiki/Version_control">Source/version control</a> ini digunakan untuk mencatat perubahan kode dari waktu ke waktu, apalagi kalo ngodingnya bareng-bareng, hanya orang-orang <code>kreatif</code> saja yang bisa melakukannya tanpa  <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> :-D. Dengan mengusung tema <code>Source Control for Your Database</code> <a href="http://www.liquibase.org/">Liquibase</a> juga bisa kita fungsikan sebagai <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> untuk mencatat perubahan struktur/schema database.</p>

<h3>Instalasi  Liquibase</h3>

<p><a href="http://www.liquibase.org/">Liquibase</a> tidak memerlukan instalasi khusus, kita tinggal download filenya di web site resmi <a href="http://www.liquibase.org/download/index.html">Liquibase</a> kemudian mengekstraknya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-01.png"></p>

<p>Selain itu ada tool lain yang perlu kita siapkan yaitu:</p>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">JRE</a> atau <a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html">JDK</a> karena <a href="http://www.liquibase.org/">Liquibase</a> ditulis menggunakan Java.</li>
<li>JDBC driver disesuaikan dengan database yang digunakan, untuk contoh di sini saya menggunakan database <a href="https://www.postgresql.org/">PostgreSQL</a>. Setelah didownload kita copykan ke folder lib</li>
</ul>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-02.png"></p>

<h3>Membuat Changelog</h3>

<p>Struktur database dalam <a href="http://www.liquibase.org/">Liquibase</a> ditulis dalam format XML, disebut dengan istilah <code>changelog</code>. Ada beberapa <a href="http://www.liquibase.org/documentation/command_line.html">perintah</a> yang bisa digunakan untuk menghasilkan <code>changelog</code>, tentunya disesuaikan dengan kebutuhan.</p>

<h5>generateChangelog</h5>

<p>Perintah ini digunakan untuk membuat <code>changelog</code> dari struktur database secara lengkap jadi mirip dengan perintah dump/export ke sql. Biasanya kita gunakan pada saat implementasi awal sistem untuk mengopykan struktur database kosongan dari server development ke server production/live. Misal di awal implementasi sistem kita mempunyai struktur database seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-03.png"></p>

<p>Dari gambar di atas kita baru mempunyai dua buah tabel yaitu <code>m_customer</code> dan <code>m_supplier</code>.</p>

<p>Kemudian kita jalankan perintah <code>generateChangelog</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>liquibase --url<span class="o">=</span><span class="s2">&quot;jdbc:postgresql://localhost:5432/db-develop&quot;</span> --username<span class="o">=</span>postgres --password<span class="o">=</span>masterkey --changeLogFile<span class="o">=</span>output/db.changelog-1.0.xml generateChangeLog
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-04.png"></p>

<p>Akan menghasilkan file <code>changelog</code> seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-05.png"></p>

<div><script src='https://gist.github.com/f1b99d6a19c05b241367caa332a11ed5.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.1&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; xmlns:ext=&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd&quot;&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484639745890-1&quot;&gt;
        &lt;createTable tableName=&quot;m_customer&quot;&gt;
            &lt;column name=&quot;customer_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;nama_customer&quot; type=&quot;VARCHAR(50)&quot;/&gt;
            &lt;column name=&quot;alamat&quot; type=&quot;VARCHAR(100)&quot;/&gt;
            &lt;column name=&quot;kontak&quot; type=&quot;VARCHAR(50)&quot;/&gt;
            &lt;column name=&quot;telepon&quot; type=&quot;VARCHAR(20)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;plafon_piutang&quot; type=&quot;numeric(15, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;total_piutang&quot; type=&quot;numeric(15, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;total_pembayaran_piutang&quot; type=&quot;numeric(15, 2)&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484639745890-2&quot;&gt;
        &lt;createTable tableName=&quot;m_supplier&quot;&gt;
            &lt;column name=&quot;supplier_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;nama_supplier&quot; type=&quot;VARCHAR(50)&quot;/&gt;
            &lt;column name=&quot;alamat&quot; type=&quot;VARCHAR(100)&quot;/&gt;
            &lt;column name=&quot;kontak&quot; type=&quot;VARCHAR(50)&quot;/&gt;
            &lt;column name=&quot;telepon&quot; type=&quot;VARCHAR(20)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;total_hutang&quot; type=&quot;numeric(15, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;total_pembayaran_hutang&quot; type=&quot;numeric(15, 2)&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
&lt;/databaseChangeLog&gt;
</code></pre></noscript></div>


<p>Mungkin tidak perlu dijelaskan lagi ya, karena isi dari file <a href="https://gist.github.com/k4m4r82/f1b99d6a19c05b241367caa332a11ed5#file-db-changelog-1-0-xml">db.changelog-1.0.xml</a> di atas hanya menjelaskan struktur dari tabel <code>m_customer</code> dan <code>m_supplier</code> dalam format XML.</p>

<p>Setelah itu kita jalankan perintah <code>update</code> agar <code>changelog</code> yang dihasilkan dari perintah <code>generateChangelog</code> di atas dieksekusi ke database target (db production/live).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>liquibase --url<span class="o">=</span><span class="s2">&quot;jdbc:postgresql://localhost:5432/db-production&quot;</span> --username<span class="o">=</span>postgres --password<span class="o">=</span>masterkey --changeLogFile<span class="o">=</span>output/db.changelog-1.0.xml update   
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-06.png"></p>

<p>Dari gambar di bawah ini terlihat kondisi database production sebelum (sebelah kiri) dan sesudah dijalankan perintah <code>update</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-07.png"></p>

<p>Pada saat pertama kali <a href="http://www.liquibase.org/">Liquibase</a> dijalankan untuk database target, <a href="http://www.liquibase.org/">Liquibase</a> akan membuat dua buah tabel sistem yaitu <a href="http://www.liquibase.org/documentation/databasechangelog_table.html">databasechangelog</a> dan <a href="http://www.liquibase.org/documentation/databasechangeloglock_table.html">databasechangeloglock</a> kedua tabel ini digunakan untuk mencatat hasil eksekusi <code>changelog</code> dari waktu ke waktu. Jadi perlu diperhatikan kedua tabel ini jangan dihapus.</p>

<h5>diffChangeLog</h5>

<p>Selama fase development maupun setelah masuk ke fase implementasi (production/live) kadang-kadang terjadi perubahan struktur database, sehingga kita perlu mengetahui perbedaan dari struktur lama dan baru, untuk melakukan ini kita menggunakan perintah <code>diffChangeLog</code>.</p>

<p>Misal seperti penjelasan gambar di bawah ini, yang sebelah kiri adalah struktur awal database yang hanya mempunyai dua buah tabel yaitu <code>m_customer</code> dan <code>m_supplier</code>, selama proses development berlangsung terjadi penambahan beberapa tabel baru yaitu <code>m_golongan</code>, <code>m_produk</code> dan tabel baru lainnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-08.png"></p>

<p>Nah untuk menghasilkan <code>changelog</code>, yang isinya adalah perbedaan struktur lama dan baru kita gunakan perintah <code>diffChangeLog</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>liquibase --url<span class="o">=</span><span class="s2">&quot;jdbc:postgresql://localhost:5432/db-production&quot;</span> --username<span class="o">=</span>postgres --password<span class="o">=</span>masterkey --referenceUrl<span class="o">=</span><span class="s2">&quot;jdbc:postgresql://localhost:5432/db-develop&quot;</span> --referenceUsername<span class="o">=</span>postgres --referencePassword<span class="o">=</span>masterkey  --changeLogFile<span class="o">=</span>output/db.changelog-1.1.xml diffChangeLog
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-09.png"></p>

<p>Contoh file <code>changelog</code> yang dihasilkan:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-10.png"></p>

<div><script src='https://gist.github.com/e66ba9f2bff96f9ba50406d34864d87e.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.1&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; xmlns:ext=&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd&quot;&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484641393235-1&quot;&gt;
        &lt;createTable tableName=&quot;m_alasan_penyesuaian_stok&quot;&gt;
            &lt;column name=&quot;alasan_penyesuaian_stok_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;alasan&quot; type=&quot;VARCHAR(100)&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484641393235-2&quot;&gt;
        &lt;createTable tableName=&quot;m_golongan&quot;&gt;
            &lt;column name=&quot;golongan_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;nama_golongan&quot; type=&quot;VARCHAR(50)&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484641393235-3&quot;&gt;
        &lt;createTable tableName=&quot;m_produk&quot;&gt;
            &lt;column name=&quot;produk_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;kode_barcode&quot; type=&quot;VARCHAR(15)&quot;/&gt;
            &lt;column name=&quot;nama_produk&quot; type=&quot;VARCHAR(50)&quot;/&gt;
            &lt;column name=&quot;satuan&quot; type=&quot;VARCHAR(20)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;stok&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;harga_beli&quot; type=&quot;numeric(10, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;harga_jual&quot; type=&quot;numeric(10, 2)&quot;/&gt;
            &lt;column name=&quot;golongan_id&quot; type=&quot;CHAR(36)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;minimal_stok&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;stok_gudang&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;minimal_stok_gudang&quot; type=&quot;numeric(5, 2)&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
    &lt;changeSet author=&quot;Administrator (generated)&quot; id=&quot;1484641393235-4&quot;&gt;
        &lt;createTable tableName=&quot;t_penyesuaian_stok&quot;&gt;
            &lt;column name=&quot;penyesuaian_stok_id&quot; type=&quot;CHAR(36)&quot;&gt;
                &lt;constraints nullable=&quot;false&quot;/&gt;
            &lt;/column&gt;
            &lt;column name=&quot;produk_id&quot; type=&quot;CHAR(36)&quot;/&gt;
            &lt;column name=&quot;alasan_penyesuaian_id&quot; type=&quot;CHAR(36)&quot;/&gt;
            &lt;column name=&quot;tanggal&quot; type=&quot;date&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;penambahan_stok&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;pengurangan_stok&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;penambahan_stok_gudang&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;0.00&quot; name=&quot;pengurangan_stok_gudang&quot; type=&quot;numeric(5, 2)&quot;/&gt;
            &lt;column name=&quot;keterangan&quot; type=&quot;VARCHAR(100)&quot;/&gt;
            &lt;column defaultValueComputed=&quot;now()&quot; name=&quot;tanggal_sistem&quot; type=&quot;TIMESTAMP(6) WITHOUT TIME ZONE&quot;/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
&lt;/databaseChangeLog&gt;</code></pre></noscript></div>


<p>Kemudian kita jalankan lagi perintah <code>update</code>. Perintah <code>update</code> ini melakukan <code>patch</code> ke database target (database production/live).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>liquibase --url<span class="o">=</span><span class="s2">&quot;jdbc:postgresql://localhost:5432/db-production&quot;</span> --username<span class="o">=</span>postgres --password<span class="o">=</span>masterkey --changeLogFile<span class="o">=</span>output/db.changelog-1.1.xml update
</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu kita cek lagi struktur database productionnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2017/01/180117-11.png"></p>

<p>Gampang bukan :-), dengan menggunakan <a href="http://www.liquibase.org/">Liquibase</a> proses migrasi struktur database pun menjadi lebih mudah.</p>

<h3>File Liquibase Properties</h3>

<p>Untuk menyingkat penulisan perintah <a href="http://www.liquibase.org/">Liquibase</a> kita bisa memanfaatkan file liquibase properties. Di file ini kita mengeset semua nilai parameter yang dibutuhkan pada saat menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a>. Secara default nama yang digunakan untuk file liquibase properties adalah <code>liquibase.properties</code>, jika menggunakan nama default ini kita bisa langsung menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a> seperti berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># generateChangelog</span>
</span><span class='line'>liquibase generateChangelog
</span><span class='line'>
</span><span class='line'><span class="c"># diffChangeLog</span>
</span><span class='line'>liquibase diffChangeLog
</span><span class='line'>
</span><span class='line'><span class="c"># update/patch database target</span>
</span><span class='line'>liquibase update
</span></code></pre></td></tr></table></div></figure>


<p>dan jika menggunakan nama yang lain, misal untuk masing-masing perintah kita buatkan  file liquibase properties tersendiri, pada saat menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a> harus kita sebutkan secara explicit nama file  liquibase properties-nya dengan menambahkan parameter <code>defaultsFile=&lt;nama_file_liquibase_properties&gt;</code>. Contoh:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># generateChangelog</span>
</span><span class='line'>liquibase --defaultsFile<span class="o">=</span>generate-liquibase.properties generateChangelog
</span><span class='line'>
</span><span class='line'><span class="c"># diffChangeLog</span>
</span><span class='line'>liquibase --defaultsFile<span class="o">=</span>diff-liquibase.properties diffChangeLog
</span><span class='line'>
</span><span class='line'><span class="c"># update/patch database target</span>
</span><span class='line'>liquibase --defaultsFile<span class="o">=</span>update-liquibase.properties update
</span></code></pre></td></tr></table></div></figure>


<p>Dan untuk masing-masing file liquibase properties-nya kita isi seperti berikut:</p>

<div><script src='https://gist.github.com/16429101488c5c734e8f86832c6dc646.js'></script>
<noscript><pre><code># liquibase.properties
driver: org.postgresql.Driver
classpath: ./lib/postgresql-9.4.1212.jar
url: jdbc:postgresql://localhost:5432/db-develop
username: postgres
password: masterkey
changeLogFile: output/db.changelog-1.0.xml</code></pre></noscript></div>




<div><script src='https://gist.github.com/033067883ebff3ab40ed2b08b3c06a42.js'></script>
<noscript><pre><code># liquibase.properties
driver: org.postgresql.Driver
classpath: ./lib/postgresql-9.4.1212.jar

# db-production
url: jdbc:postgresql://localhost:5432/db-production
username: postgres
password: masterkey

# db-develop
referenceUrl: jdbc:postgresql://localhost:5432/db-develop
referenceUsername: postgres
referencePassword: masterkey

changeLogFile: output/db.changelog-1.1.xml</code></pre></noscript></div>




<div><script src='https://gist.github.com/4ad6e69e060e7fcd4da12fa56fbbaf0c.js'></script>
<noscript><pre><code># liquibase.properties
driver: org.postgresql.Driver
classpath: ./lib/postgresql-9.4.1212.jar
url: jdbc:postgresql://localhost:5432/db-production
username: postgres
password: masterkey
changeLogFile: output/db.changelog-1.0.xml</code></pre></noscript></div>


<p>Selamat mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Otomatis Project Visual Basic 6 Menggunakan Jenkins]]></title>
    <link href="http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/"/>
    <updated>2016-12-26T10:02:21+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Mas kalo di tempat saya masih menggunakan tool jadul seperti Visual Basic 6 untuk pengembangan aplikasinya, apakah masih bisa menggunakan <a href="https://jenkins.io/">Jenkins</a> sebagai software <a href="http://coding4ever.net/blog/categories/continuous-integration/">CInya</a> ? Jawabannya bisa, walaupun secara plugin, di <a href="https://jenkins.io/">Jenkins</a> belum ada plugin khusus untuk keperluan &ldquo;build otomatis project Visual Basic 6&rdquo; seperti halnya di .NET yang sudah tersedia <a href="https://wiki.jenkins-ci.org/display/JENKINS/MSBuild+Plugin">plugin MSBuild</a>. Sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a>  yang ditulis menggunakan bahasa <a href="https://en.wikipedia.org/wiki/PowerShell">PowerShell</a>. Kalo masih bingung dengan skrip <a href="https://github.com/psake/psake">psake</a>, skrip ini mirip dengan skrip rake yang dibuat menggunakan bahasa Ruby.</p>

<!-- more -->


<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>Source/version control Git</li>
<li>Server Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Library (dll/ocx) pihak ketiga</li>
<li>Skrip <a href="https://github.com/psake/psake">psake</a> - psake is a build automation tool written in PowerShell</li>
<li><a href="https://upx.github.io/">UPX</a> - UPX is a free, portable, extendable, high-performance executable packer for several executable formats</li>
</ul>


<h3>PC/Laptop Development</h3>

<ul>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Source/version control Git</li>
<li>TortoiseGit</li>
</ul>


<h3>Skrip Build Otomatis Project Visual Basic 6</h3>

<p>Secara plugin di <a href="https://jenkins.io/">Jenkins</a> memang belum tersedia plugin khusus untuk keperluan &ldquo;build project Visual Basic 6&rdquo; tapi sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a> untuk keperluan ini. Contoh skrip  <a href="https://github.com/psake/psake">psake</a> untuk keperluan <a href="http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/">build otomatis project Visual Basic 6</a> bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">sini</a>.</p>

<p>Berikut contoh skripnya:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># This build assumes the following directory structure</span>
</span><span class='line'><span class="c1"># Script assumes all directories exists, initialized by a parent script</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># \build_artifact - This folder is created if it is missing and contains output of the build</span>
</span><span class='line'><span class="c1"># \build_log      - This folder is created if it is missing and contains log of the build</span>
</span><span class='line'><span class="c1"># \src            - This folder contains the source code or project you want to build</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># run : .\psake.ps1 build.ps1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># properties that is used by the script</span>
</span><span class='line'><span class="n">properties</span> <span class="p">{</span>                    
</span><span class='line'>  <span class="vg">$vb6bin</span> <span class="o">=</span> <span class="s2">&quot;C:\Program Files (x86)\Microsoft Visual Studio\VB98\VB6.EXE&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="vg">$build_dir</span> <span class="o">=</span> <span class="no">Split</span><span class="o">-</span><span class="no">Path</span> <span class="vg">$psake</span><span class="o">.</span><span class="n">build_script_file</span>
</span><span class='line'>  <span class="vg">$src_dir</span> <span class="o">=</span> <span class="s2">&quot;$build_dir</span><span class="se">\s</span><span class="s2">rc&quot;</span>
</span><span class='line'>  <span class="vg">$build_artifact_dir</span> <span class="o">=</span> <span class="s2">&quot;$build_dir</span><span class="se">\b</span><span class="s2">uild_artifact&quot;</span>
</span><span class='line'>  <span class="vg">$build_log_dir</span> <span class="o">=</span> <span class="s2">&quot;$build_dir</span><span class="se">\b</span><span class="s2">uild_log&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="vg">$project_name</span> <span class="o">=</span> <span class="s2">&quot;Northwind.vbp&quot;</span>
</span><span class='line'>  <span class="vg">$project</span> <span class="o">=</span> <span class="s2">&quot;$src_dir\$project_name&quot;</span>        
</span><span class='line'>  <span class="vg">$logfile</span> <span class="o">=</span> <span class="s2">&quot;$build_log_dir\$project_name.log&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">function</span> <span class="no">NormalizeOutDir</span><span class="p">(</span><span class="vg">$outdir</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="ow">not</span> <span class="p">(</span><span class="vg">$outdir</span><span class="o">.</span><span class="n">EndsWith</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">))) {</span>
</span><span class='line'><span class="s2">     $outdir += &#39;</span><span class="se">\&#39;</span><span class="s2"></span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> if ($outdir.Contains(&quot;</span> <span class="s2">&quot;)) {</span>
</span><span class='line'><span class="s2">     $outdir = $outdir + &quot;</span><span class="p">\</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> return $outdir</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">function HasFailed($logFile) {</span>
</span><span class='line'><span class="s2"> return ((Select-String &quot;</span><span class="n">failed</span><span class="s2">&quot; $logfile -Quiet) -or (Select-String &quot;</span><span class="ow">not</span> <span class="n">found</span><span class="s2">&quot; $logfile -Quiet))</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">function HasSucceeded($logFile) {</span>
</span><span class='line'><span class="s2"> return (Select-String &quot;</span><span class="n">succeeded</span><span class="s2">&quot; $logFile -Quiet)</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">FormatTaskName ((&quot;</span><span class="o">-</span><span class="s2">&quot;*25) + &quot;</span><span class="o">[</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">]</span><span class="s2">&quot; + (&quot;</span><span class="o">-</span><span class="s2">&quot;*25))</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Task Default -Depends Build</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Task Build -Depends CreateLogFile {              </span>
</span><span class='line'><span class="s2">    $outdir = NormalizeOutDir(&quot;</span><span class="vg">$build_artifact_dir</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">    $failed = $false</span>
</span><span class='line'><span class="s2">    $retries = 0</span>
</span><span class='line'><span class="s2">    $succeeded = $false</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">    Write-Host &quot;</span><span class="no">Building</span> <span class="vg">$name</span><span class="s2">&quot; -ForegroundColor Green</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> try {</span>
</span><span class='line'><span class="s2">     Exec {&amp; $vb6bin /m $project /out $logfile /outdir $outdir}</span>
</span><span class='line'><span class="s2"> } catch {</span>
</span><span class='line'><span class="s2">     $failed = $true</span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    while (!($failed -or $succeeded)) {</span>
</span><span class='line'><span class="s2">        Write-Host -NoNewline &quot;</span><span class="o">.</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        Start-Sleep -s 1</span>
</span><span class='line'><span class="s2">        $failed = HasFailed($logfile)</span>
</span><span class='line'><span class="s2">        $succeeded = HasSucceeded($logfile)</span>
</span><span class='line'><span class="s2">        $retries = $retries + 1</span>
</span><span class='line'><span class="s2">        $failed = ($failed -or ($retries -eq 60)) -and !$succeeded</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    if ($failed)</span>
</span><span class='line'><span class="s2">    {</span>
</span><span class='line'><span class="s2">        Type $logfile</span>
</span><span class='line'><span class="s2">        throw &quot;</span><span class="no">Unable</span> <span class="n">to</span> <span class="n">build</span> <span class="vg">$name</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2">    Type $logfile</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Task CreateLogFile {</span>
</span><span class='line'><span class="s2"> If (!(Test-Path $build_artifact_dir)) </span>
</span><span class='line'><span class="s2"> {</span>
</span><span class='line'><span class="s2">     New-Item -Path $build_artifact_dir -ItemType Directory</span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> If (!(Test-Path $build_log_dir)) </span>
</span><span class='line'><span class="s2"> {</span>
</span><span class='line'><span class="s2">     New-Item -Path $build_log_dir -ItemType Directory</span>
</span><span class='line'><span class="s2"> }</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> Write-host  (&quot;</span><span class="no">Build</span> <span class="n">dir</span> <span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="s2">&quot; -f $build_dir)</span>
</span><span class='line'><span class="s2"> Write-host  (&quot;</span><span class="no">Src</span> <span class="n">dir</span> <span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="s2">&quot; -f $src_dir)</span>
</span><span class='line'><span class="s2"> Write-host  (&quot;</span><span class="no">Artifact</span> <span class="n">dir</span> <span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="s2">&quot; -f $build_artifact_dir) </span>
</span><span class='line'><span class="s2"> Write-host  (&quot;</span><span class="no">Log</span> <span class="n">dir</span> <span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="s2">&quot; -f $logfile)</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">    if (Test-Path $logfile)</span>
</span><span class='line'><span class="s2">    {</span>
</span><span class='line'><span class="s2">        Remove-Item $logfile</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">    $path = [IO.Path]::GetFullPath($logfile)</span>
</span><span class='line'><span class="s2">    New-Item -ItemType file  $path</span>
</span><span class='line'><span class="s2">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kemudian skrip di atas disimpan di lokasi yang sama dengan folder <code>src</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-01.png"></p>

<p>Untuk contoh project Visual Basic 6-nya bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6">sini</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-02.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-03.png"></p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya sudah tidak lagi menjelaskan lagi secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan
<a href="http://coding4ever.net/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya :</p>

<p><strong>Langkah 1</strong>: Buat job/project baru, misal dengan nama <code>northwind-vb6-build</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-04.png"></p>

<p><strong>Langkah 2</strong>: Setting repository git</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-05.png"></p>

<p><strong>Langkah 3</strong>: Setting Execute Windows batch command untuk menjalankan skrip <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-06.png"></p>

<p>Skrip di atas akan menjalankan file <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a> yang akan menghasilkan file exe dari project <a href="https://github.com/k4m4r82/NorthwindVB6">Visual Basic 6</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-09.png"></p>

<p>Hasil <code>compile</code> Visual Basic 6 biasanya ukuran filenya belum dioptimasi, sehingga kita bisa menambahkan skrip untuk melakukan compress menggunakan tool <a href="https://upx.github.io/">UPX</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-07.png"></p>

<p>Lumayan hasil compressnya bisa mencapai 30%-an sendiri.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-111.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-101.png"></p>

<p>Kita juga bisa menambahkan skrip <a href="http://www.jrsoftware.org/">Inno Setup</a> untuk membuat paket installer secara otomatis setelah proses <code>build</code> selesai, caranya gimana bisa Anda cek di <a href="http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/">sini</a>.</p>

<p><strong>Langkah 4</strong>: Terakhir tes build</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-08.png"></p>

<p>Jika proses build selesai, kita tinggal cek hasilnya compilenya di folder job</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261226-09.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindVB6">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #4]]></title>
    <link href="http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4/"/>
    <updated>2016-12-14T06:44:25+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Masih membahas tentang  manfaat dari <a href="http://coding4ever.net/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a> untuk kemudahan dalam melakukan proses <code>build</code> dan <code>deploy</code> secara terpusat. Jika dipostingan <a href="http://coding4ever.net/blog/categories/jenkins/">sebelumnya</a> saya menggunakan contoh <a href="https://github.com/k4m4r82/Northwind">aplikasi desktop</a> maka kali ini kita akan membahas proses build dan deploy untuk aplikasi berbasis web seperti ASP.NET, ASP.NET MVC dan <a href="https://github.com/k4m4r82/NorthwindWebApi">ASP.NET  WEB API</a>.</p>

<!-- more -->


<p>Untuk kemudahan proses deploy ke web server IIS, Microsoft sudah menyediakan tool khusus untuk melakukan ini yaitu <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Tool ini akan kita kombinasikan dengan tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build</a>.</p>

<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li>Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li><a href="https://www.nuget.org/">NuGet</a></li>
</ul>


<h5>Server Development/Production</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Web Server IIS 7</li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
</ul>


<h5>PC/Laptop Development</h5>

<ul>
<li>Visual Studio .NET 2013 <a href="https://www.visualstudio.com/vs/community/">Community Edition</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a></li>
</ul>


<h3>Konfigurasi Server Development/Production</h3>

<p>Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1</strong>: Aktifkan role Management Service (Server Manager -> Role -> Web Server (IIS))</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-01.png"></p>

<p>Setelah selesai dilanjutkan dengan pembuatan user windows/local user.</p>

<p><strong>Langkah 2</strong>: Menambahkan user windows/local non-admin untuk keperluan deploy (Server Manager -> Configuration -> Local Users and Groups -> Users</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-02.png"></p>

<p><strong>Langkah 3</strong>: <a href="https://www.iis.net/downloads/microsoft/web-deploy">Download</a> dan Install <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Pada saat instalasi pilih custome kemudian aktifkan semua pilihan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-03.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-04.png"></p>

<p><strong>Langkah 4</strong>: Konfigurasi Web Deploy Publishing (IIS Manager -> Site -> Deploy -> Configure Web Deploy Publishing …)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-06.png"></p>

<p><code>tukang_deploy</code> di atas adalah user windows/local <code>non-admin</code> yang sudah kita buat pada langkah sebelumnya.</p>

<p><strong>Langkah 5</strong>: Selesai</p>

<h3>Konfigurasi PC/Laptop Development</h3>

<p>Untuk konfigurasi pc/laptop development dilakukan dengan cara membuat <code>publish profile</code>.  Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Aktifkan project Visual Studio.net, sebagai contoh bisa didownload di <a href="https://github.com/k4m4r82/NorthwindWebApi">sini</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-07.png"></p>

<p><strong>Langkah 2:</strong> Klik kanan project Web API -> Publish&hellip;, setelah itu akan tampil dialog publish web</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-08.png"></p>

<p><strong>Langkah 3:</strong> Kemudian pada tab Profile pilih Custome</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-09.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-101.png"></p>

<p>Isikan nama profile</p>

<p><strong>Langkah 4:</strong> Pada tab Connection isikan konfigurasinya seperti berikut</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-112.png"></p>

<p>Contoh konfigurasi di atas menggunakan ip <code>192.168.56.2</code> untuk server development, jadi nilainya tinggal disesuaikan. Untuk user dan password dikosongkan dulu aja, nanti kita set pada saat proses <code>build</code> dan <code>deploy</code> di job/project jenkins.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-122.png"></p>

<p><strong>Langkah 5:</strong> Selanjutnya tinggal di Next aja</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-13.png"></p>

<p><strong>Langkah 6:</strong> Terakhir klik tombol Close</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-14.png"></p>

<p>Setelah proses ini selesai akan dibuatkan file <code>PublishProfiles</code> yang tersimpan di node <code>Properties</code> -> <code>PublishProfiles</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-221.png"></p>

<p>File <code>PublishProfiles</code> ini nantinya akan kita gunakan pada saat proses <code>build</code> dan <code>deploy</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-23.png"></p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya tidak lagi menjelaskan secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan <a href="http://coding4ever.net/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Buat job/project baru, misal dengan nama <code>northwind-web-api-deploy</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-15.png"></p>

<p><strong>Langkah 2:</strong> Setting repository git</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-16.png"></p>

<p><strong>Langkah 3:</strong> Setting restore nuget package</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-17.png"></p>

<p><strong>Langkah 4:</strong> Setting MSBuild</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-181.png"></p>

<p><strong>Langkah 5:</strong> Terakhir tes build dan deploy</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-19.png"></p>

<p>Jika proses <code>build</code> dan <code>deploy</code> selesai, kita tinggal cek hasilnya di IIS Manager</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-201.png"></p>

<p>Setelah itu kita juga bisa langsung mencoba web servicenya menggunakan web browser.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/12/261213-21.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindWebApi">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #3]]></title>
    <link href="http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3/"/>
    <updated>2016-11-07T09:44:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Melanjutkan pembahasan tentang <a href="http://coding4ever.net/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a>. Kita sudah berhasil membuat project/job untuk melakukan proses <code>build</code> dan <code>deploy</code> secara otomatis dan terpusat di satu server. Hanya saja, ada sedikit yang kurang yaitu project/job ini harus kita jalankan/eksekusi secara manual setelah proses <code>push</code> source code ke server repository kita lakukan, dan tentunya akan sangat merepotkan jika harus bolak-balik mengeksekusi project/job setiap selesai melakukan proses <code>push</code>.</p>

<!-- more -->


<p>Nah untuk solusi masalah ini, kita akan menambahkan sedikit skrip agar proses eksekusi project/job ini bisa berjalan secara otomatis setelah selesai melakukan proses <code>push</code>. Skrip ini dikenal dengan nama <code>hook script</code>. Jadi source control seperti Git, mempunyai sekumpulan skrip (hook script ) dengan nama tertentu yang akan di eksekusi oleh git sebelum atau sesudah event-event tertentu, seperti: commit, push, receive dan event-event lainnya. <code>Hook script</code> ini disimpan di folder <code>hooks</code> masing-masing folder repository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-01.png"></p>

<p>Pada gambar di atas, saya menambahkan file <a href="https://git-scm.com/docs/githooks">hook script</a> dengan nama <code>post-receive</code>, file ini akan dieksekusi secara otomatis seteleh proses <code>push</code> selesai. Berikut contoh isi dari file <code>post-receive</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-021.png"></p>

<p>Skrip <code>post-receive</code> di atas akan mengakses URL/alamat yang di gunakan untuk proses <code>build</code> dan <code>deploy</code> yaitu :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>JENKINS_URL</code> diisi dengan alamat dari server jenkins misal <code>http://localhost:8080</code></li>
<li><code>JOB_NAME</code> diisi dengan nama project/job jenkins misal  <code>northwind-build</code></li>
<li><code>TOKEN_NAME</code> diisi dengan sembarang nilai token, misal <code>cnwlhaUq6g5Uwzvg6ePI</code></li>
</ul>


<p>Selain itu untuk mengakses URL ini juga dibutuhkan informasi user dan APInya, misal menggunakan user <code>admin</code> dengan apinya <code>94a0428ca9d8d1d6c2e229fe1183f98</code>. Selain menggunakan user API kita juga bisa menggunakan langsung password dari user tapi tentunya cara yang kedua ini tidak disarankan.</p>

<h3>Mendapatkan Informasi User API</h3>

<p>Informasi user API bisa diakses melalui menu <code>Manage Jenkins</code> -> <code>Manage Users</code> -> <code>Configure</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-03.png"></p>

<p>Kemudian klik tombol <code>Show API Token…</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-04.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-05.png"></p>

<h3>Mengaktifkan Project/Job Authentication Token</h3>

<p>Untuk bisa mengakses URL  <strong>JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</strong> selain membutuhkan <code>User</code> dan <code>User API</code>, kita juga perlu mengaktifkan project/job Authentication Token melalui link <code>Project</code> -> <code>Configure</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-06.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-07.png"></p>

<p>Kemudian aktifkan pilihan <code>Trigger builds remotely</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-08.png"></p>

<p>Untuk nilai <code>Authentication Token</code> diisi sesuai keinginan, kalo saya biasanya menggunakan tool <a href="http://coding4ever.net/blog/2014/05/21/manajemen-password-menggunakan-keepass/">KeePass</a> untuk mengenerate nilai tokennya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-091.png"></p>

<h3>Testing Build Otomatis</h3>

<p>Setelah menyelesaikan konfigurasi di atas, saatnya melakukan pengetesan apakah konfigurasinya sudah benar atau belum. Berikut langkah-langkahnya :</p>

<ul>
<li>Aktifkan project <a href="https://github.com/k4m4r82/Northwind">Northwind</a></li>
<li><p>Tambahkan method abstract baru di interface <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Api/IProductRepository.cs">IProductRepository</a>, misal dengan nama <code>GetByCategoryName</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-10.png"></p></li>
<li><p>Kemudian lengkapi implementasinya method abstractnya di class <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Service/ProductRepositoryDapper.cs">ProductRepositoryDapper</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-11.png"></p></li>
<li><p>Terakhir lakukan <code>commit</code> dan <code>push</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-12.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-14.png"></p></li>
<li><p>Dan secara otomatis proses <code>build</code> dan <code>deploy</code> di server CI akan dijalankan</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/11/261107-15.png"></p></li>
</ul>


<h3>Kesimpulan</h3>

<p>Dengan memanfaatkan <code>hook script</code> proses <code>build</code> dan <code>deploy</code> bisa dibuat otomatis pada event- event-event tertentu, seperti: commit, push, receive dan event-event lainnya.</p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/"/>
    <updated>2016-10-01T22:35:57+07:00</updated>
    <id>http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Pada <a href="http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/">postingan</a> sebelumnya kita sudah membuat project/job sederhana menggunakan <a href="https://jenkins.io/">Jenkins</a> untuk melakukan proses build, dan untuk postingan kali ini kita akan menambahkan proses deploy. Kalo masih bingung dengan istilah <code>deploy</code> di sini, anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai histori hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-01.png"></p>

<h3>Inno Setup</h3>

<p><a href="http://jrsoftware.org/">Inno Setup</a> adalah tool untuk membuat <a href="http://coding4ever.net/blog/categories/tools-installer/">paket installer</a> yang gratis dan open source. Selain itu kita juga bisa menggunakan <a href="http://coding4ever.net/blog/categories/tools-installer/">tool installer</a> lainnya seperti <a href="http://nsis.sourceforge.net/">NSIS</a>. Untuk informasi lebih lanjut tentang <a href="http://jrsoftware.org/">Inno Setup</a> dan <a href="http://nsis.sourceforge.net/">NSIS</a> bisa langsung ke <a href="http://coding4ever.net/blog/categories/inno-setup/">sini</a> dan <a href="http://coding4ever.net/blog/categories/nsis/">sini</a>.</p>

<p>Jadi di postingan kali ini kita akan menggunakan <a href="http://jrsoftware.org/">Inno Setup</a> untuk keperluan proses <code>deploy</code>. Sebagai contoh berikut adalah skrip <a href="http://jrsoftware.org/">Inno Setup</a> untuk project <a href="https://github.com/k4m4r82/Northwind">Northwind</a> yang kita gunakan sebagai contoh project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define AppName 'Northwind App'
</span><span class='line'>#define AppDir 'Northwind'
</span><span class='line'>#define AppExeName 'Northwind.WinFormApp.exe'
</span><span class='line'>#define AppVendorName 'KR Software'
</span><span class='line'>#define AppCopyright 'Copyright © 2016. ' + AppVendorName
</span><span class='line'>#define AppURL 'http://coding4ever.net/'
</span><span class='line'>#define AppVersion GetFileVersion('bin\' + AppExeName)
</span><span class='line'>#define AppMainIcon 'mainIcon.ico'
</span><span class='line'>
</span><span class='line'>[Setup]
</span><span class='line'>AppName={#AppName}
</span><span class='line'>AppVerName={#AppName} Versi {#AppVersion}
</span><span class='line'>AppPublisher={#AppVendorName}
</span><span class='line'>AppVersion={#AppVersion}
</span><span class='line'>AllowCancelDuringInstall = yes
</span><span class='line'>DefaultDirName={pf}\{#AppVendorName}\{#AppDir}
</span><span class='line'>DefaultGroupName={#AppVendorName}
</span><span class='line'>Compression = lzma
</span><span class='line'>SolidCompression = yes
</span><span class='line'>OutputDir=new-release
</span><span class='line'>OutputBaseFilename=Setup-v{#AppVersion}
</span><span class='line'>AllowNoIcons = yes
</span><span class='line'>AlwaysRestart = no
</span><span class='line'>AlwaysShowComponentsList = no
</span><span class='line'>DisableProgramGroupPage = yes
</span><span class='line'>AppendDefaultDirName = yes
</span><span class='line'>CreateUninstallRegKey = yes
</span><span class='line'>DisableStartupPrompt = yes
</span><span class='line'>LanguageDetectionMethod=none
</span><span class='line'>ShowLanguageDialog=no
</span><span class='line'>UsePreviousLanguage=no
</span><span class='line'>Uninstallable = yes
</span><span class='line'>UninstallFilesDir={app}\uninst
</span><span class='line'>UninstallDisplayIcon={app}\{#AppExeName},0
</span><span class='line'>UninstallDisplayName={#AppName}
</span><span class='line'>WindowVisible = no
</span><span class='line'>AppCopyright={#AppCopyright}
</span><span class='line'>FlatComponentsList = yes
</span><span class='line'>PrivilegesRequired = admin
</span><span class='line'>VersionInfoVersion={#AppVersion}
</span><span class='line'>
</span><span class='line'>[Tasks]
</span><span class='line'>Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce
</span><span class='line'>Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked
</span><span class='line'>
</span><span class='line'>[Files]
</span><span class='line'>;My Application Runtime
</span><span class='line'>Source: bin\*.exe; DestDir: {app}; Flags: ignoreversion
</span><span class='line'>Source: bin\*.dll; DestDir: {app}; Flags: ignoreversion
</span><span class='line'>
</span><span class='line'>[Icons]
</span><span class='line'>Name: {group}\{#AppName}; Filename: {app}\{#AppExeName}; WorkingDir: {app}; IconFilename: {app}\{#AppMainIcon}
</span><span class='line'>Name: {userdesktop}\{#AppName}; Filename: {app}\{#AppExeName}; WorkingDir: {app}; IconFilename: {app}\{#AppMainIcon}; Tasks: desktopicon
</span><span class='line'>
</span><span class='line'>[Code]
</span><span class='line'>procedure AboutButtonOnClick(Sender: TObject);
</span><span class='line'>begin
</span><span class='line'>  MsgBox('{#AppName}' #13#13 '{#AppCopyright}' #13 '{#AppURL}', mbInformation, mb_Ok);
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton);
</span><span class='line'>var
</span><span class='line'>  AboutButton: TNewButton;
</span><span class='line'>begin
</span><span class='line'>  AboutButton := TNewButton.Create(ParentForm);
</span><span class='line'>  AboutButton.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;
</span><span class='line'>  AboutButton.Top := CancelButton.Top;
</span><span class='line'>  AboutButton.Width := CancelButton.Width;
</span><span class='line'>  AboutButton.Height := CancelButton.Height;
</span><span class='line'>  AboutButton.Caption := '&About...';
</span><span class='line'>  AboutButton.OnClick := @AboutButtonOnClick;
</span><span class='line'>  AboutButton.Parent := ParentForm;  
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>procedure InitializeWizard();
</span><span class='line'>begin
</span><span class='line'>  CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);  
</span><span class='line'>end;</span></code></pre></td></tr></table></div></figure>


<p>Kemudian simpan skrip di atas di folder <code>workspace\deploy</code>. Workspace adalah folder di mana project atau job disimpan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-02.png"></p>

<h3>Menambahkan Proses Deploy</h3>

<ul>
<li>Akses link : <a href="http://localhost:8080/,">http://localhost:8080/,</a> kemudian login</li>
<li><p>Klik link project <code>northwind-build</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-03.png"></p></li>
<li><p>Di halaman project <code>northwind-build</code>, klik link <code>Configure</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-04.png"></p></li>
<li><p>Berikutnya aktifkan tab <code>Build</code>, klik <code>Add build step</code> kemudian pilih <code>Execute Windows batch command</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-051.png"></p>

<p>Kemudian isikan skripnya seperti berikut</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-06.png"></p>

<p>Tidak ada yang aneh dengan skrip di atas, hanya sekumpulan <a href="http://www.robvanderwoude.com/batchcommands.php">batch commands</a> yang tentunya Anda dan Saya sudah familiar dengannya. Coba perhatikan lagi skrip di atas, di sana ada variabel <code>%WORKSPACE%</code> yang merupakan variabel built-innya Jenkins, dan jika mengacu pada project <code>northwind-build</code>  di atas maka isinya adalah “C:\Program Files (x86)\Jenkins\workspace\northwind-build”.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-07.png"></p></li>
</ul>


<h3>Menambahkan Artifact</h3>

<p>Artifact adalah output dari proses build, bisa berupa file exe, dll atau file dengan ekstensi lainnya. File-file artifact ini nantinya akan tersedia untuk di download di halaman project. Berikut langkah-langkah untuk menambahkan artifact :</p>

<ul>
<li><p>Masih di halaman <code>Configure</code>, aktifkan tab <code>Post-build Actions</code> klik <code>Add post-build action</code> kemudian pilih <code>Archive the artifacts</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-08.png"></p></li>
<li><p>Isikan nama-nama file artifact yang perlu di arsipkan, misal kita hanya mengarsipkan file Setup.exe</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-09.png"></p>

<p>Jika file artifactnya lebih dari satu pisahkan dengan tanda koma, contoh : <code>deploy\new-release\Setup*.exe</code>, <code>deploy\help\file_bantuan.chm</code>, <code>deploy\help\video_tutorial.avi</code>.</p></li>
<li><p>Terakhir klik Save</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-10.png"></p></li>
</ul>


<h3>Testing Build dan Deploy</h3>

<p>Setelah menyelesaikan tambahan konfigurasi <code>deploy</code>, saatnya melakukan pengetesan apakah konfigurasinya sudah benar. Berikut langkah-langkahnya :</p>

<ul>
<li><p>Kembali ke halaman project <code>northwind-build</code>, kemudian klik link <code>Build Now</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-11.png"></p></li>
<li><p>Di informasi <code>Build History</code> akan terlihat progress build dengan nama #1, #2, &hellip; dst</p>

<p> <img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-12.png"></p></li>
<li><p>Jika proses build-nya sukses penanda bulat-nya berwarna biru, jika warna merah berarti gagal</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-13.png"></p></li>
<li><p>Setelah build selesai, di halaman project <code>northwind-build</code> akan tersedia link download file artifact</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/10/261001-14.png"></p></li>
</ul>


<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/"/>
    <updated>2016-09-29T14:46:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Melanjutkan pembahasan tentang <a href="http://coding4ever.net/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a>, di mana persiapan awal sudah saya bahas di postingan saya yang berjudul &ldquo;Persiapan Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET&rdquo; bagian <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">satu</a> dan <a href="http://coding4ever.net/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/">dua</a>.</p>

<p><a href="http://coding4ever.net/blog/categories/continuous-integration/">Continuous Integration</a>, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.</p>

<!-- more -->


<p>Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses <code>build</code> untuk memastikan tidak ada kode yang merusak/membuat proses <code>build</code> gagal. Jadi semakin cepat kegagalan <code>build</code> ini diketahui semakin cepat pula kita meresponnya.  Dan jika proses <code>build</code>-nya berhasil akan dilanjutkan dengan proses <code>deploy</code>. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>, <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> dan <a href="http://coding4ever.net/blog/categories/software-testing/">testing otomatis</a> lainnya.</p>

<p>Sebagai .NET developer kita sudah biasa melakukan proses <code>build</code> dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh <code>deploy</code> anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil <code>build</code> dan <code>deploy</code> dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<p>Proses <code>build</code> ini selain bisa dibuat otomatis setiap kita mem-<code>push</code> source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak <code>build</code> pas jam makan siang enggak boleh makan siang sampai proses <code>build</code>-nya berhasil atau yang merusak <code>build</code> pas jam pulang kantor enggak boleh pulang sampai proses <code>build</code>-nya  berhasil :-D</p>

<p>Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :</p>

<ul>
<li>Menulis kode, build dan tes di komputer masing-masing (seperti biasa).</li>
<li>Commit dan push kode ke server repository/source control seperti GIT atau SVN.
Di masing-masing repository kita pasang <code>hook script</code> untuk memanggil job/project yang sudah kita buat dan konfigurasi di server CI.</li>
<li>Server CI akan meng-clone repository kemudian melakukan build, menjalankan <a href="http://coding4ever.net/blog/categories/software-testing/">tes otomatis</a> (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama</li>
</ul>


<p>Cukup ya intronya, berikutnya akan kita bahas tool/software yang bisa kita gunakan untuk mengimplementasikan CI, salah satunya adalah <a href="https://jenkins.io">Jenkins</a>.</p>

<p><a href="https://jenkins.io">Jenkins</a> adalah salah satu software continuous integration (CI) open source yang dibuat menggunakan Java. Untuk sejarah <a href="https://jenkins.io">Jenkins</a> silahkan digoogle sendiri ya :-)</p>

<p>Selain <a href="https://jenkins.io">Jenkins</a>, ada tool-tool lain yang harus kita siapkan agar implementasi CI menggunakan <a href="https://jenkins.io">Jenkins</a> ini bisa berhasil. Berikut daftar lengkapnya :</p>

<ul>
<li><a href="https://jenkins.io">Jenkins</a></li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a> – untuk keperluan proses build</li>
<li><a href="https://dist.nuget.org/index.html">NuGet</a> – untuk merestore package nuget sebelum proses build dijalankan</li>
<li>Source Control menggunakan <a href="https://git-scm.com/downloads">Git</a>, Anda bisa juga menggunakan <a href="https://subversion.apache.org/download.cgi">SVN</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a> – aplikasi git client</li>
<li><a href="https://bonobogitserver.com/">Bonobo Git Server</a> (server Git gratis berbasis Windows/IIS)</li>
<li><a href="http://www.jrsoftware.org/">Inno Setup</a> atau <a href="http://nsis.sourceforge.net/">NSIS</a> – untuk keperluan proses deploy/pembuatan paket installer</li>
</ul>


<p>Tool-tool di atas selain perlu disiapkan juga harus tau cara penggunaannya, klo belum ya silahkan mampir dulu ke <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">sini</a> dan <a href="http://coding4ever.net/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/">sini</a>.</p>

<p>Sebelum kita lanjut ke pembahasan, kita lihat tool/software untuk <code>Environment Test</code> yang saya gunakan baik di sisi server (Server CI) dan client (developer).</p>

<h3>Environment Test Server</h3>

<ul>
<li>Windows Server 2008 R2</li>
<li>Automation server <a href="https://jenkins.io/">Jenkins</a></li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://bonobogitserver.com/">Server Repository Git</a></li>
<li>Package Installer <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a></li>
<li><a href="https://dist.nuget.org/index.html">NuGet</a></li>
</ul>


<h3>Environment Test Client</h3>

<ul>
<li>Visual Studio .NET 2013 Community Edition</li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a></li>
</ul>


<h3>Fokus Pembahasan</h3>

<p>Untuk postingan pertama ini, kita akan membahas:</p>

<ul>
<li>Konfigurasi <a href="https://jenkins.io">Jenkins</a></li>
<li>Plugin tambahan yang perlu diinstall</li>
<li>Pembuatan Project (Job)</li>
<li>Tes clone repository, restore library nuget dan  build dalam satu langkah/klik</li>
</ul>


<h3>Instalasi Jenkins</h3>

<p>Download dan install Jenkins di <a href="https://jenkins-ci.org/">sini</a>, setelah instalasi <a href="https://jenkins-ci.org/">Jenkins</a> bisa diakses di link <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-01.png"></p>

<h3>Konfigurasi Jenkins</h3>

<p><a href="https://jenkins.io">Jenkins</a> mempunyai banyak plugin yang mudah dikonfigurasi seperti plugin Git, MSBuild dan lainnya. Berikut adalah daftar plugin yang akan kita install.</p>

<ul>
<li>Git plugin</li>
<li>MSBuild plugin</li>
<li>NUnit plugin</li>
<li>Cobertura plugin</li>
<li>PowerShell plugin</li>
</ul>


<p>Sebagai contoh kita akan menginstall plugin Git dan MSBuild, berikut langkah-langkahnya :</p>

<h5>Menginstall plugin Git</h5>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link Manage Jenkins, pilih Manage Plugins</li>
<li>Aktifkan tab <code>Available</code>, ketik <code>Git plugin</code> di filter box, dari daftar pilihan plugin yang tersedia pilih <code>Git plugin</code></li>
<li>Klik tombol <code>Install without restart</code></li>
</ul>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-02.png"></p>

<h5>Menginstall plugin MSBuild</h5>

<p>Masih sama dengan langkah-langkah sebelumnya, hanya saja kali ini plugin yang perlu difilter adalah <code>MSBuild</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-03.png"></p>

<p>Ulangi langkah-langkah di atas untuk menginstall plugin lainnya seperti NUnit, Cobertura dan PowerShell.</p>

<h5>Konfigurasi Git dan MSBuild</h5>

<p>Setelah instalasi plugin Git dan MSBuild, kita perlu menambahkan konfigurasinya di halaman <code>Global Tool Configuration</code>, berikut langkah-langkahnya :</p>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link Manage Jenkins, pilih Global Tool Configuration</li>
<li><p>Scroll ke bawah sampai menemukan tulisan <code>Git/Git installations</code>, untuk isian <code>Path to Git executable</code> isikan lokasi instalasi git secara absolute</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-04.png"></p>

<p>Untuk lokasi Git disesuaikan dengan lokasi instalasi Git di mesin Anda.</p></li>
<li>Kemudian scroll kebawah lagi sampai menemukan tulisan <code>MSBuild</code>, kemudian klik tombol <code>Add MSBuild</code></li>
<li><p>Isikan konfigurasinya seperti gambar berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-05.png"></p>

<p>Untuk lokasi MSBuild juga disesuaikan dengan lokasi instalasi MSBuild di mesin Anda. Terakhir klik tombol Save.</p></li>
</ul>


<h3>Pembuatan Project (Job)</h3>

<p>Berikutnya kita akan membuat project sederhana untuk mencoba proses build, berikut langkah-langkahnya:</p>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link New Item</li>
<li>Isikan nama project, misal northwind-build</li>
<li>Pilih Freestyle project</li>
<li><p>Pilih Ok</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-06.png"></p></li>
<li><p>Aktifkan tab <code>Source Code Management</code>, kemudian pilih <code>Git</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-07.png"></p></li>
<li><p>Kemudian lengkapi isian <code>Repository URL</code> dan <code>Credentials</code> seperti contoh berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-08.png"></p>

<p>Untuk contoh di atas dengan asumsi instalasi <a href="https://jenkins.io">Jenkins</a> dan <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">server repository Git</a> di mesin yang sama.</p>

<p><a href="https://jenkins.io">Jenkins</a> selalu bekerja dengan <code>branch</code> dan secara default menggunakan branch <code>master</code>.</p></li>
<li><p>Berikutnya aktifkan tab <code>Build</code>, klik <code>Add build step</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-09.png"></p></li>
<li><p>Pilih <code>Build a Visual Studio project or solution using MSBuild</code></p>

<p>Disini kita perlu mengisikan beberapa nilai:</p>

<ul>
<li>MSBuild Version diisi dengan <code>MSBuild</code> (yang sudah kita konfigurasi pada langkah sebelumnya)</li>
<li>MSBuild Build File diisi dengan nama solution atau project</li>
<li>Command Line Arguments (optional) diisi dengan parameter MSBuild
<img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-10.png"></li>
</ul>
</li>
<li><p>Karena project kita menggunakan library NuGet, kita juga perlu menambahkan konfigurasi untuk me-restore library NuGet. Masih di tab Build, klik <code>Add build step</code> kemudian pilih <code>Execute Windows batch command</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-11.png"></p>

<p>Untuk isian <code>Command</code> isikan perintah/skrip seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-12.png"></p>

<p>Perintah/skrip di atas dengan asumsi Anda sudah mendownload tool <a href="https://dist.nuget.org/index.html">NuGet</a> dan menyimpannya di folder <code>D:\Development Tools</code>.</p>

<p>Seperti yang sudah pernah saya bahas di postingan <a href="xx">Persiapan Membangun Server CI Bagian #2</a>, proses <code>build</code> dilakukan setelah me-restore library nuget. Jadi kita harus merubah urutan prioritas agar konfigurasi &ldquo;Execute Windows batch command&rdquo; dijalankan terlebih dulu sebelum konfigurasi &ldquo;Build a Visual Studio project or solution using MSBuild&rdquo; dengan cara men-drag-nya ke atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-14.png"></p>

<p>Pada gambar di atas terlihat konfigurasi &ldquo;Execute Windows batch command&rdquo; dan &ldquo;Build a Visual Studio project or solution using MSBuild&rdquo; sudah berganti posisi. Terakhir klik tombol Save</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-15.png"></p></li>
</ul>


<h3>Testing Build</h3>

<p>Setelah menyelesaikan beberapa konfigurasi, saatnya melakukan pengetesan apakah konfigurasi sebelumnya sudah benar. Berikut langkah-langkahnya :</p>

<ul>
<li><p>Klik link project <code>northwind-build</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-16.png"></p></li>
<li><p>Di halaman project <code>northwind-build</code>, klik link <code>Build Now</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-17.png"></p></li>
<li><p>Di informasi <code>Build History</code> akan terlihat progress build dengan nama <code>#1</code>, <code>#2</code>,&hellip; dst</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-18.png"></p></li>
<li><p>Jika proses build-nya sukses penanda <code>bulat</code>-nya berwarna biru, jika warna merah berarti gagal</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-19.png"></p></li>
<li><p>Untuk melihat detil <code>build</code>, klik link build number, misal <code>#1</code>, <code>#2</code>,&hellip; dst</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-20.png"></p></li>
<li><p>Kemudian klik link <code>Console Output</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-211.png"></p>

<p>Catatan penting dari <code>output</code> di atas adalah lokasi dari <code>workspace</code> di mana source code/hasil clone dari repository dan proses build dilakukan. Informasi ini tentu akan sangat membantu kita dalam melakukan <code>debuging</code> konfigurasi/setup CI.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260929-22.png"></p></li>
</ul>


<p>Kesimpulan dari proses build di atas dan tentunya berdasarkan konfigurasi yang kita lakukan, jenkins melakukan hal-hal berikut :</p>

<ol>
<li>Meng-clone repository git</li>
<li>Me-restore library nuget</li>
<li>Melakukan proses build</li>
</ol>


<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persiapan Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/"/>
    <updated>2016-09-26T11:01:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106">Persiapan <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">awal</a> untuk membangun Server CI (Continuous Integration) sudah kita selesaikan yaitu <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">membuat sendiri server repository Git</a> untuk keperluan internal kantor yang berfungsi sebagai wadah untuk menampung source code dari masing-masing developer.</p>

<p>Masih tersisa beberapa tool yang harus kita pelajari penggunaannya agar proses membangun server CInya berjalan mulus yaitu :</p>

<!-- more -->


<ul>
<li><a href="http://coding4ever.net/blog/categories/tools-installer/">Package Installer</a></li>
<li><a href="http://nunit.org/">NUnit</a></li>
<li><a href="https://www.nuget.org/">NuGet</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/dd393574.aspx">MSBuild</a></li>
</ul>


<h3>Package Installer</h3>

<p>Tool ini digunakan untuk membuat <a href="http://coding4ever.net/blog/categories/tools-installer/">paket instalasi</a> biasanya digunakan untuk aplikasi desktop seperti winform, console atau windows service. Tujuannya jelas untuk mempermudah distribusi/instalasi aplikasi ke klien. <a href="http://coding4ever.net/blog/categories/tools-installer/">Package Installer</a> ini nantinya digunakan untuk proses <code>deploy</code> yang dilakukan secara otomatis oleh server CI.</p>

<p>Jadi alurnya adalah ketika kita mem-push source code ke server repository git, ini akan men-trigger server CI untuk melakukan build, menjalankan tes otomatis (jika ada) kemudian membuat paket instalasi  untuk aplikasi desktop atau rilis/upload kode ke server produksi untuk aplikasi web.</p>

<p>Untuk membuat <a href="http://coding4ever.net/blog/categories/tools-installer/">paket instalasi</a>, kita bisa menggunakan yang gratis seperti <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> atau <a href="http://coding4ever.net/blog/categories/nsis/">NSIS</a>.</p>

<h3>NUnit</h3>

<p>Tool ini digunakan untuk keperluan <a href="http://coding4ever.net/blog/categories/software-testing/">testing otomatis</a>, saya sudah membahas penggunaan tool ini di kategori <a href="http://coding4ever.net/blog/categories/software-testing/">Software Testing</a>.</p>

<h3>MSBuild</h3>

<p>Dari nama toolnya aja udah jelas, klo tool ini digunakan untuk proses <a href="https://www.techopedia.com/definition/3759/build">build</a> solution/project yang sedang kita kembangkan. Sadar atau tidak sebenarnya kita <code>sudah sering</code> menggunakan MSBuild ketika menggunakan IDE Visual Studio .NET untuk menulis kode. Setelah selesai menulis kode, biasanya kitakan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) untuk menjalankan/mengetes kode yang baru selesai kita tulis. Nah pada saat kita menekan tombol F5/Ctrl+F5, IDE Visual Studio .NET akan menjalankan/mengeksekusi MSBuild sesuai dengan pengaturan yang sudah kita set di bagian <code>Configuration Manager</code> atau <code>Project -&gt; Properties -&gt; Build</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-01.png"></p>

<p style="text-align:center;"> Configuration Manager</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-02.png"></p>

<p style="text-align:center;"> Setting Build di Project Properties</p>

<p>Menekan tombol F5/Ctrl+F5 inikan dari sisi developer ketika akan mem-<a href="https://www.techopedia.com/definition/3759/build">build</a> solution/project sedangkan dari sisi server (server CI) karena kita tidak menginstall Visual Studio.NET, kita cukup menginstall tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a> secara terpisah. Sehingga untuk menjalankan tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a> kita lakukan via command prompt. Tapi untuk contoh di sini kita akan menggunakan Visual Studio .NET Command Prompt untuk menjalankan tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a>, caranya adalah dengan mengaktifkan Visual Studio .NET Command Prompt sesuai dengan versi Visual Studio .NET Anda.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-03.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-04.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-05.png"></p>

<p>Kemudian ketik perintah MSBuild dengan format seperti berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MSBuild.exe [Switches] [ProjectFile]</span></code></pre></td></tr></table></div></figure>


<p>Contoh :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MSBuild.exe /t:Clean,Build /p:Configuration=Release /p:Platform="Any CPU" "D:\DemoContinuousIntegration\src\Northwind.sln"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-06.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-07.png"></p>

<p>Untuk referensi lengkap MSBuild Command, bisa Anda cek di <a href="https://msdn.microsoft.com/en-us/library/ms164311.aspx">sini</a>.</p>

<p>Di server CI kita akan menuliskan perintah MSBuild seperti di atas untuk keperluan <code>build</code> otomatis.</p>

<h3>NuGet</h3>

<p><a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a> adalah tool package manager yang berfungsi untuk mempermudah kita menginstall library pihak ketiga (3rd party libraries), seperti <a href="https://www.nuget.org/packages/Dapper/">Dapper .NET</a>, <a href="https://www.nuget.org/packages/EntityFramework/">Entity Framework</a>, <a href="https://www.nuget.org/packages/Newtonsoft.Json/">Json .NET</a> dan masih banyak lagi library pihak ketiga yang memang sudah terbukti ampuh dan bermanfaat untuk project yang kita kembangkan.</p>

<p>Penggunaan tool ini juga sudah saya bahas di kategori <a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a> tetapi pembahasannya dari sisi developer sedangkan untuk sisi server (server CI), <a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a> digunakan untuk me-restore library nuget yang digunakan oleh project/aplikasi yang kita kembangkan, karena jika tidak di-restore, server CI akan <code>gagal</code> melakukan proses build.</p>

<p>Sebagai contoh kita akan mem-build ulang project <a href="https://github.com/k4m4r82/Northwind">Northwind</a> di atas, tetapi dengan menghapus library nugetnya terlebih dulu yang ada di dalam folder lib.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-08.png"></p>

<p>Kemudian kita build ulang</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-09.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-10.png"></p>

<p>Nah dari gambar di atas kan terlihat hasil buildnya gagal karena project Northwindnya membutuhkan library <code>Dapper</code> dan <code>System.Data.SQLite.Core</code>.</p>

<p>Sekarang kita coba menambahkan perintah untuk me-restore library nugetnya terlebih dulu sebelum melakukan proses build, tapi sebelumnya download terlebih dulu tool nugetnya di <a href="https://dist.nuget.org/index.html">sini</a> kemudian simpan di folder misal dengan nama <code>D:\Development Tools</code>, kemudian ketik perintah berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"D:\Development Tools\nuget.exe" restore "D:\DemoContinuousIntegration\src"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-111.png"></p>

<p>Setelah me-restore library nugetnya berhasil, baru kita build ulang</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-12.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/260916-13.png"></p>

<p>Sampai di sini persiapan untuk membangun Server CI (Continuous Integration) sudah selesai, insya Allah di postingan berikutnya kita akan membahas <a href="http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/">Bagaimana Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins</a>.</p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persiapan Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/"/>
    <updated>2016-09-24T16:18:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png" width="109" height="106"><a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration</a>, biar gampang nyebutnya kita sebut <code>CI</code> aja ya, yang merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.</p>

<!-- more -->


<p>Sebenarnya membangun server CI itu gambang, hanya melakukan instalasi dilanjutkan dengan konfigurasi plus menuliskan beberapa skrip sederhana (batch commands) kita sudah bisa membangun server CI. Hanya saja ada beberapa tool/software yang perlu kita ketahui cara penggunaannya  agar proses membangun server CInya jadi lebih gampang.</p>

<p>Berikut adalah daftarnya :</p>

<ul>
<li><a href="https://git-scm.com/">Git</a> – ini merupakan tool untuk source/version control, kita bisa saja menggunakan version control lainnya seperti <a href="https://subversion.apache.org/">svn</a>.</li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a> – aplikasi git client berbasis windows, kita bisa saja menggunakan aplikasi git client lainnya.</li>
<li><a href="https://bonobogitserver.com/">Bonobo Git Server</a> – aplikasi web gratis untuk membangun server repository Git berbasis Windows/IIS</li>
<li><a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a> - package manager untuk mempermudah kita menginstall library pihak ketiga</li>
<li><a href="http://nunit.org/">NUnit</a> – untuk keperluan <a href="http://coding4ever.net/blog/categories/software-testing/">testing otomatis</a></li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a> – untuk keperluan proses build</li>
<li><a href="http://coding4ever.net/blog/categories/tools-installer/">Package Installer</a> – untuk keperluan proses deploy/pembuatan paket installer, kita bisa menggunakan yang gratis seperti <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> atau <a href="http://coding4ever.net/blog/categories/nsis/">NSIS</a></li>
</ul>


<p>Untuk <a href="http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">bagian #1</a> ini kita bahas terlebih dulu tentang <a href="https://bonobogitserver.com/">Bonobo Git Server</a>.</p>

<p>Kita sebagai software developer tentu sudah tidak asing lagi dengan namanya <a href="https://about.gitlab.com/">GitLab</a>, <a href="https://github.com/">GitHub</a> dan <a href="https://bitbucket.org/">Bitbucket</a>. Ketiga website ini memberikan layanan untuk menghosting-kan repository git secara online/cloud. <a href="https://git-scm.com/">Git</a> sendiri merupakan salah satu version control seperti halnya <a href="https://subversion.apache.org/download.cgi">svn</a>.</p>

<p>Dipostingan kali saya tidak akan membahas secara detil apa itu <a href="https://git-scm.com/">Git</a>, apa bedanya dengan version control lainnya seperti <a href="https://subversion.apache.org/download.cgi">svn</a>, bagaimana cara menginstallnya dan bagaimana cara menggunakannya, sekali lagi tidak. Karena sudah banyak referensi di internet yang membahas masalah ini.</p>

<p>Tapi dipostingan kali ini kita akan membahas solusi jika ingin punya hosting/server sendiri untuk repository Git. Setelah mencoba beberapa  software gratis untuk membuat server repository Git di lingkungan Windows, akhirnya pilihan saya jatuh ke <a href="https://bonobogitserver.com/">Bonobo Git Server</a>. <a href="https://bonobogitserver.com/">Bonobo Git Server</a> adalah layanan repository Git berbasis web, selain gratis <a href="https://bonobogitserver.com/">Bonobo Git Server</a> juga bersifat open source dibuat menggunakan ASP.NET MVC. Jadi untuk menjalankan <a href="https://bonobogitserver.com/">Bonobo Git Server</a> dibutuhkan web server IIS. <a href="https://bonobogitserver.com/">Bonobo Git Server</a> sampai saat ini baru mendukung dua jenis database yaitu SQLite dan SQL Server. Untuk petunjuk instalasinya bisa Anda cek di <a href="https://bonobogitserver.com/install/">sini</a>.</p>

<h3>Tool yang digunakan</h3>

<p>Berikut adalah tool yang digunakan untuk uji coba <a href="https://bonobogitserver.com/">Bonobo Git Server</a></p>

<ul>
<li><a href="https://bonobogitserver.com/">Bonobo Git Server</a> - aplikasi web gratis untuk membangun server repository Git berbasis Windows/IIS</li>
<li><a href="https://git-scm.com/">Git</a> – tool untuk source/version control</li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a> – aplikasi git klien berbasis windows</li>
</ul>


<h3>Membuat Repository</h3>

<p>Setelah instalasi <a href="https://bonobogitserver.com/">Bonobo Git Server</a>, kita bisa langsung mengakses alamat <a href="https://bonobogitserver.com/">Bonobo Git Server</a>, sebagai contoh alamat/url yang saya gunakan adalah <a href="http://192.168.56.2/git-server">http://192.168.56.2/git-server</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-01.png"></p>

<p>Untuk Username dan Password defaultnya adalah <code>admin</code>. Setelah login berhasil kita bisa melakukan beberapa konfigurasi seperti mengganti password default, membuat team, user dan repository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-02.png"></p>

<p>Untuk membuat repository klik link <code>Create new repository</code>, setelah itu lengkapi input halaman <code>New Repository</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-03.png"></p>

<p>Pada saat membuat repository selain menentukan nama, group dan deskripsi repository, kita juga perlu mengatur role, user dan team (optional) yang berhak mengakses repository. Ada tiga jenis role yang disediakan oleh <a href="https://bonobogitserver.com/">Bonobo Git Server</a>  yaitu :</p>

<ul>
<li>Anonymous - setiap user bisa melihat, melakukan pull atau clone</li>
<li>Contributors - setiap user bisa melihat, melakukan push, pull atau clone</li>
<li>Administrators – akses penuh, termasuk menghapus repository</li>
</ul>


<p>Terakhir klik tombol <code>Create</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-04.png"></p>

<p>Kemudian klik link <code>Go to repository : Northwind</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-05.png"></p>

<p>Perhatikan keterangan <code>General Url</code>, link tersebut akan kita gunakan pada saat melakukan proses <code>push</code>.</p>

<h3>Push Source Code ke Server Repository Git</h3>

<p>Sebelum menyimpan source code ke repository Git, ada beberapa hal atau langkah-langkah yang perlu kita lakukan yaitu :</p>

<p><strong>Langkah 1</strong>: Membuat repository lokal – Git termasuk dalam kategori Distributed Version Control System, jadi selain mempunyai repository pusat/server juga mempunyai repository lokal. Bisa jadi hal ini yang menjadi salah satu daya tarik git, yang memungkinkan kita untuk melakukan <code>commit</code> tanpa harus terkoneksi ke Server Repository Git. Untuk membuat repository lokal, tinggal klik kanan folder project (folder kerja) -> Git Create repository here&hellip;</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-06.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-07.png"></p>

<p>Non aktifkan pilihan <code>Make it Bare …</code> kemudian pilih Ok</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-08.png"></p>

<p><strong>Langkah 2</strong>: Menambahkan file <code>.gitignore</code> - Dalam mengerjakan project, ada file-file yang ada di folder kerja, tapi tidak kita masukkan ke repository. Misalnya file hasil kompilasi, setting IDE, dan sebagainya. File dan folder hasil generate ini biasanya kita daftarkan di ignore list, supaya tidak ikut dicommit ke repository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-09.png"></p>

<p>Untuk contoh file <code>.gitignore</code>, bisa Anda cek di<a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/.gitignore">sini</a></p>

<p><strong>Langkah 3</strong>: Add – Menambahkan perubahan dalam folder kerja ke staging area (index) repository lokal, sebelum melakukan proses commit. Caranya klik kanan folder kerja -> Git Add..</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-10.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-11.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-12.png"></p>

<p><strong>Langkah 4</strong>: Commit – Untuk menyimpan perubahan (staging area) ke repository lokal. Caranya klik kanan folder kerja -> Git Commit -> ..</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-14.png"></p>

<p><strong>Langkah 4</strong>: Push – Untuk mengirim/menguplod perubahan repository lokal ke server/remote repository. Caranya klik kanan folder kerja -> Git Push..</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-15.png"></p>

<p>Sebelum melakukan proses <code>push</code>, kita harus mendaftarkan terlebih dulu alamat dari repository server dengan mengklik tombol <code>Manage</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-17.png"></p>

<p>Link URL : <a href="http://192.168.56.2/git-server/Northwind.git">http://192.168.56.2/git-server/Northwind.git</a> di atas kita dapatkan pada saat <a href="https://coding4ever.files.wordpress.com/2016/09/240916-05.png">membuat repository</a>. Setelah klik tombol Ok, kita akan kembali ke dialog push …</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-18.png"></p>

<p>Langsung saja klik tombol Ok, jika kita belum pernah melakukan push/clone biasanya akan diminta untuk menginputkan user dan password login <a href="https://bonobogitserver.com/">Bonobo Git Server</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-19.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-20.png"></p>

<p>Yuph, push source code berhasil :-)</p>

<h3>Mengecek Hasil Push Source Code</h3>

<p>Akses link server <a href="https://bonobogitserver.com/">Bonobo Git Server</a>, kemudian login.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-21.png"></p>

<p>Kemudian klik link repository</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-22.png"></p>

<p>Lanjutkan dengan mengklik link Commits</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-23.png"></p>

<p>Setelah itu akan tampil histori commit</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/09/240916-24.png"></p>

<p>Untuk melihat detil masing-masing commit, kita tinggal klik link komentar seperti gambar di atas.</p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit Dan NDbUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit/"/>
    <updated>2016-08-12T10:13:09+07:00</updated>
    <id>http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Melanjutkan pembahasan tentang <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing Menggunakan NUnit</a>, di mana pada <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya  kita menggunakan contoh kasus <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>  pada pengembangan aplikasi database, sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak.</p>

<!-- more -->


<p>Untuk method <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> dan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> masih menggunakan contoh yang sama dengan <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya.</p>

<p style="text-align:center;"> Contoh method CRUD</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-01.png"></p>

<p style="text-align:center;"> Contoh Unit Testing</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-02.png"></p>

<p>Sebagai pengingat untuk melakukan <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> pada aplikasi database, kita harus menyiapkan data untuk tesnya terlebih dulu yaitu dengan meng-INSERT-kan beberapa data yang sesuai dengan kondisi yang kita set pada <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testing</a>. Cara <code>manual</code> sudah kita lakukan pada <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya, dan untuk <a href="">postingan</a> kali ini kita akan menggunakan library tambahan yang disebut dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>. Dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> kita dapat me-reset kondisi database sesuai keinginan setiap kali tes akan dijalankan. Me-reset di sini maksudnya <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> akan mengosongkan isi database terlebih dulu kemudian mengisikan data tesnya berdasarkan data yang sudah kita siapkan dalam format XML. Jadi pastikan kita tidak menggunakan database <code>production</code> pada saat menjalankan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<h3>Menggunakan NDbUnit</h3>

<p><a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> bisa dengan mudah kita tambahkan melalui <a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a>. Ada banyak pilihan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, disesuaikan dengan database yang kita gunakan. Untuk contoh di sini saya menggunakan <a href="https://www.nuget.org/packages/NDbUnit.SqlClient/">NDbUnit.SqlClient</a> untuk database SQL Server.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-03.png"></p>

<p>Setelah menambahkan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, langkah berikutnya adalah menambahkan file  .NET dataset schema definition (xsd) untuk setiap tabel yang akan di tes. Contoh kita punya tabel <code>Pegawai</code> dengan struktur seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-04.png"></p>

<p>Kemudian kita tinggal buatkan file.NET dataset schema definition (xsd) sesuai dengan struktur tabel di atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-05.png"></p>

<p>Berikutnya kita tambahkan file XML yang berisi data <code>Pegawai</code> yang akan di-INSERT-kan secara otomatis ke dalam database oleh <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-06.png"></p>

<p>Terakhir kita tambahkan method <code>ResetDatabase</code> pada class <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">PegawaiRepositoryTest</a>, kemudian kita panggil di method <code>Init</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-07.png"></p>

<p>Nah sekarang kita coba jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>, tapi sebelumnya kita cek dulu isi dari tabel <code>Pegawai</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-08.png"></p>

<p>Masih kosong kan? Coba kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-09.png"></p>

<p>Yup <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> langsung berhasil, sekarang kita cek lagi isi dari tabel Pegawai</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-10.png"></p>

<p>Nah sudah ada isinya kan? Ini berarti <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> sukses menjalankan misinya untuk mengisikan data Pegawai berdasarkan file <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/Pegawai.xml">Pegawai.xml</a> yang sudah kita buat pada langkah-langkah sebelumnya, sebelum <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> dijalankan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-06.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/"/>
    <updated>2016-07-28T11:19:59+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Dasar-dasar <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> sudah kita pelajari, dilanjutkan dengan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> untuk mengecek tingkat keseriusan programmer dalam membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>. Semakin sedikit <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat atau asal-asalan pada saat membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> bakalan dijamin <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p>Pada postingan kali ini kita akan membahas tentang <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> yaitu tes yang dilakukan secara berkelompok. Sebagai contoh, dalam pengembangan aplikasi bisnis hampir bisa dipastikan 100% akan menggunakan database.  Sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak. Jadi kita tidak perlu lagi melakukan pengetesan secara <code>serius</code> di level UI (console, winform atau halaman web) karena sudah di lakukan pengetesan  melalui <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>.</p>

<p>Contoh kita punya dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-01.png"></p>

<p>Kemudian kita buatkan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-02.png"></p>

<p>Unit testing pertama yang akan kita tes adalah method <code>GetByID</code>, method ini mempunyai satu parameter yaitu <code>nik</code> yang nilainya kita isi dengan <code>12345</code>. Setelah pemanggilan method <code>GetByID</code> (baris 30) <code>seharusnya</code> objek <code>pegawai</code> akan terisi dengan data pegawai dengan nik <code>12345</code>. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Objek pegawai tidak boleh null (baris 32)</li>
<li>Nik pegawai harus sama dengan <code>12345</code> (baris 33)</li>
<li>Nama pegawai harus sama dengan <code>Janoe Hendarto, S.Kom</code> (baris 34)</li>
<li>Untuk alamat dan kota nilainya juga harus sama dengan gambar di atas (baris 35 – 36)</li>
</ol>


<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> menggunakan <code>NUnit GUI Runner</code>, dan hasilnya adalah …</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-03.png"></p>

<p><a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">Unit testingnya</a> ternyata gagal karena kondisi yang sudah kita tentukan di baris 32 bahwa objek pegawainya tidak boleh null tidak terpenuhi. Ada dua kemungkinan penyebab kegagalan ini yaitu :</p>

<ol>
<li>Kita salah mengeset nilai niknya, jadi kemungkinan niknya bukan <code>12345</code> atau ..</li>
<li>Datanya memang belum ada</li>
</ol>


<p>Jadi kita akan cek dulu kemungkinan yang nomor 2 yaitu dengan melihat isi tabel Pegawai</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-04.png"></p>

<p>Ternyata memang benar datanya yang belum ada he he :-D, berarti harus kita tambahkan dulu data pegawai dengan nik <code>12345</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-05.png"></p>

<p>Setelah itu kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-06.png"></p>

<p>Ternyata masih gagal tapi dengan kondisi yang berbeda, dari gambar di atas terlihat nilai yang kita harapkan adalah <code>Janoe Hendarto, S.Kom</code> sedangkan yang ada di database adalah <code>Janoe Hendarto, M.Kom</code> beda di gelarnya yaitu <code>S.Kom</code> dan <code>M.Kom</code>, berarti kegagalan kedua ini kita yang salah mengeset kondisi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>. Solusinya kita tinggal ganti <code>S.Kom</code> menjadi <code>M.Kom</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-08.png"></p>

<p>Kemudian kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-09.png"></p>

<p>Akhirnya tes pertama berhasil :-)</p>

<p>Gimana ? Lebih <code>cepat</code> dan <code>gampang</code> bukan dari pada melakukan pengetesan dengan cara <code>jadul</code> via console, winform, atau halaman web he he just kidding :-D</p>

<p>Berikutnya kita akan tes method yang kedua yaitu <code>GetAll</code>, kode pengetesannya seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-10.png"></p>

<p>Method <code>GetAll</code> di atas akan mengembalikan kumpulan/collection dari objek pegawai. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Jumlah pegawainya ada 3 orang/record (baris 43)</li>
<li>Di baris 46 kita membuat objek <code>pegawai</code> kemudian mengeset datanya dengan data pegawai terakhir (index = 2)</li>
<li>Mulai baris 48 – 52, kita melakukan pengetesan seperti pengetesan method <code>GetByID</code></li>
</ol>


<p>Untuk keperluan tes ini kita tambahkan lagi dua record data pegawai, sehingga totalnya adalah 3 record sesuai dengan skenario nomor 1 di atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-11.png"></p>

<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-12.png"></p>

<p>Karena kondisi pengetesan (unit testing) sudah sesuai dengan data riil database, pengetesanpun langsung berhasil.</p>

<p>Nah sampai di sini sudah dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> yang selesai kita tes, dan untuk contoh pengetesan method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> lainnya seperti Save, Update dan Delete kodenya lebih kurang seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-14.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-15.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-161.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coverage Testing Menggunakan NUnit, OpenCover Dan ReportGenerator]]></title>
    <link href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/"/>
    <updated>2016-07-22T20:23:16+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Sudah menggunakan <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ? Klo belum mampir ke <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">sini</a> dulu ya :-)</p>

<p>Kali ini kita akan membahas tentang <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> yaitu pengetesan yang dilakukan untuk mengecek apakah <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat telah meng-cover semua kode yang perlu dites. Jika <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> terlalu sedikit atau waktu membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> asal-asalan biasanya <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-15.jpg"></p>

<p>Mengecek satu-persatu unit testing yang dibuat oleh programmer apakah sudah sesuai dengan kode yang perlu dites jelas tidak mungkin, untungnya sudah tersedia banyak tool yang bisa melakukkannya secara otomatis.</p>

<p>Berikut beberapa tool yang bisa digunakan untuk melakukan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di dunia .NET yaitu :</p>

<ol>
<li><a href="http://nunit.org/">NUnit</a></li>
<li><a href="https://github.com/OpenCover/opencover/releases">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator/releases">Report Generator</a></li>
</ol>


<p>Duet maut ketiga tool di atas bisa kita gunakan untuk melakukan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a>. Untuk mendownloadnya Anda tinggal klik link di atas, khusus untuk <a href="https://www.nuget.org/packages/OpenCover/">OpenCover</a> dan <a href="https://www.nuget.org/packages/ReportGenerator/">Report Generator</a> sebaiknya disimpan di folder yang sama.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-01.png"></p>

<h3>Proses Coverage Testing</h3>

<p>Secara umum proses <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> menggunakan ke tiga tool di atas bisa di gambarkan seperti berikut</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-02.png"></p>

<p>Keterangan gambar :</p>

<ol>
<li>NUnit tool menjalankan prosedur unit testing terhadap file library yang sudah ditentukan</li>
<li>Dari proses poin 1 akan digunakan OpenCover untuk mengenerate file hasil coverage test dalam format xml. Karena file hasil generatenya dalam format xml, tentu akan menyulitkan kita untuk membacanya, makanya kita butuh tool terakhir yaitu Report Generator</li>
<li>Report Generator digunakan untuk membuat laporan format HTML yang lebih <code>manusiawi</code> sehingga mudah dibaca berdasarkan file coverage.xml</li>
</ol>


<p>Berdasarkan keterangan di atas kita bisa menuliskan batch command untuk prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> seperti berikut :</p>

<h4>Tahapan poin 1 dan 2</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>OpenCover.Console.exe -target:nunit-console.exe -targetargs:"/nologo /noshadow ""Library.NUnitTest.dll""" -filter:+[*]* -register:user -output: CodeCoverageResult.xml</span></code></pre></td></tr></table></div></figure>


<h4>Tahapan poin 3</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'2. menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>ReportGenerator.exe -reports CodeCoverageResult.xml -targetdir: _CodeCoverageReport</span></code></pre></td></tr></table></div></figure>


<h3>Persiapan Coverage Testing</h3>

<p>Sama seperti pembahasan <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> kita juga membutuhkan dua project yaitu project target dan project unit testing. Untuk contoh disini kita sudah punya dua project yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> dan <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLibUnitTest">KRSoftwareLibUnitTest</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-03.png"></p>

<p>Project <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> mempunyai sebuah class yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLib/DayHelper.cs">DayHelper</a> dan mempunyai dua method <code>GetIndonesianDay</code> dan <code>Weekday</code> yang akan kita buatkan <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-04.png"></p>

<p>Nah ini <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testing</a> dari method <code>GetIndonesianDay</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-05.png"></p>

<p>Setelah project <code>KRSoftwareLibUnitTest</code>-nya selesai, kemudian dilanjutkan dengan proses build project, baru kita jalankan prosedur coverage testing :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>"C:\CoverageTesting\opencover.4.6.519"\OpenCover.Console.exe -target:"C:\Program Files (x86)\NUnit 2.6.4\bin"\nunit-console.exe -targetargs:"/nologo /noshadow ""C:\CoverageTesting\KRSoftwareLibUnitTest\bin\Debug\KRSoftwareLibUnitTest.dll""" -filter:"+["KRSoftwareLib"]*" -register:user -output:"CodeCoverageResult.xml"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-06.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'2. echo menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>"C:\CoverageTesting\ReportGenerator_2.4.5.0\bin"\ReportGenerator.exe -reports:"CodeCoverageResult.xml" -targetdir:"_CodeCoverageReport"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-07.png"></p>

<p>Dari proses coverage test di atas akan menghasilkan coverage test yang bagus, karena semua kondisi sudah dites. Berikut adalah hasil coverage testnya:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-08.png"></p>

<p>Coba perhatikan kolom <code>Line coverage</code> dan <code>Branch coverage</code> nilainya 100% (warna hijaunya penuh).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-16.jpg"></p>

<p>Kita juga bisa melihat detail coverage test dari class DayHelper.cs :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-09.png"></p>

<p>Nah sekarang kita coba menonaktifkan beberapa baris kode tesnya untuk melihat perbedaan nilai kolom <code>Line coverage</code> dan <code>Branch coverage</code> seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-10.png"></p>

<p>Hasil coverage testingnya jadi jelek alias gagal karena hanya dua kondisi yang di tes yaitu hari <code>Senin</code> dan <code>Selasa</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-11.png"></p>

<p>Dari detail coverage testnya class DayHelper.cs juga kelihatan baris/kondisi yang belum di tes:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-12.png"></p>

<p>Gampang bukan ? Dengan coverage testing ini, kita jadi mudah untuk mendeteksi tingkat keseriusan programmer dalam membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>.</p>

<h3>Build Events</h3>

<p>Sebenarnya pembahasan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> sudah selesai, tapi berhubungan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas masih dijalankan secara manual via command prompt tentu akan menyulitkan kita untuk mengecek <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> setiap ada perubahan.
Salah satu solusinya adalah dengan memanfaatkan fasilitas <a href="http://coding4ever.net/blog/categories/build-events/">Build Events</a> yang sudah disediakan oleh Visual Studio .NET.</p>

<p>Nah berikut skrip <a href="http://coding4ever.net/blog/categories/build-events/">Build Events</a> yang harus kita buat untuk menjalankan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas secara otomatis, setiap kali project unit testingnya di build.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "set lokasi tool coverage testing"
</span><span class='line'>set OpenCoverDir="C:\CoverageTesting\opencover.4.6.519"
</span><span class='line'>set NUnitRunnerDir="C:\Program Files (x86)\NUnit 2.6.4\bin"
</span><span class='line'>set ReportGeneratorDir="C:\CoverageTesting\ReportGenerator_2.4.5.0\bin"
</span><span class='line'>
</span><span class='line'>echo "set coverage xml"
</span><span class='line'>set CodeCoverageResult="CodeCoverageResult.xml"
</span><span class='line'>
</span><span class='line'>echo "set target library yang mau dites, misal KRSoftwareLib"
</span><span class='line'>set TargetLib="KRSoftwareLib"
</span><span class='line'>
</span><span class='line'>echo "generate coverage result xml format"
</span><span class='line'>call %OpenCoverDir%\OpenCover.Console.exe -target:%NUnitRunnerDir%\nunit-console.exe -targetargs:"/nologo /noshadow $(TargetFileName)" -filter:"+[%TargetLib%]*" -register:user -output:%CodeCoverageResult%
</span><span class='line'>
</span><span class='line'>echo "generate coverage result html format"
</span><span class='line'>call %ReportGeneratorDir%\ReportGenerator.exe -reports:%CodeCoverageResult% -targetdir:_CodeCoverageReport</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-13.png"></p>

<p>Jadi setiap kita melakukan build project, prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> otomatis akan dijalankan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-14.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoCoverageTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">Nunit</a></li>
<li><a href="https://github.com/opencover/opencover">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator">Report Generator</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/"/>
    <updated>2016-07-20T14:42:50+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Testing merupakan salah satu fase penting yang harus dilakukan ketika membuat sebuah aplikasi. Testing biasanya dilakukan secara berbarengan pada saat menulis kode. Ada banyak <code>gaya</code> dalam melakukan testing dan yang paling favorit biasanya adalah gaya konvensional. Dengan menggunakan gaya ini programmer desktop akan menggunakan console/winform untuk melihat hasil tes dari sebuah unit (fungsi/method) sedangankan programmer web langsung menggunakan halaman web.</p>

<!-- more -->


<p>Ini adalah gaya lama yang kita pelajari dari jaman Majapahit <strong>#eh</strong>, maksudnya masa-masa kuliah dulu :-D, kan enggak keren banget udah jadi programmer pro (programmer yang udah kerja) tapi testingnya masih bergaya <code>mahasiswa</code> :-D</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-01.png"></p>

<p>Dengan testing gaya <code>jadul</code> ini, <code>kita</code> yang harus melakukan evaluasi terhadap hasil tesnya. Contoh tes di atas <code>5 + 2</code> kok hasilnya <code>10</code>. Bayangkan klo kita kurang teliti bakalan jadi bug di kemudian hari.</p>

<p>Jika Anda bosan dengan gaya ini (konvensional/jadul/mahasiswa) dan ingin naik level, kita bisa menggunakan tool yang memang dibuat khusus untuk melakukan unit testing seperti  <a href="http://www.nunit.org/">NUnit</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-02.png"></p>

<p>Dengan menggunakan tool unit testing, <code>komputer</code>-lah yang melakukan evaluasi terhadap hasil tesnya. Kita tinggal duduk manis he he :-)</p>

<h3>Jenis-jenis Testing</h3>

<p>Sebenarnya ada banyak jenis-jenis testing, tetapi karena keterbatasan waktu dan ilmu, saya hanya membahas jenis-jenis testing berikut :</p>

<ul>
<li><a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a></li>
<li><a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">Coverage Testing</a></li>
<li><a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing</a></li>
<li><a href="http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/">Performance Testing</a></li>
</ul>


<p>Jadi kita akan membahas <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a> terlebih dulu.</p>

<h3>Unit testing</h3>

<p>Unit testing adalah testing di level paling detail dari aplikasi. Artinya, testing di level method/function. Tes ini biasanya dilakukan oleh programmer dan bukan oleh tester, karena membutuhkan pengetahuan yang rinci tentang desain aplikasi dan kode yang ditulis.
Ada beberapa tool yg bisa digunakan untuk keperluan ini tergantung dari bahasa pemrograman yang kita gunakan. Misal di .NET (NUnit), Java (JUnit) dan PHP (PHPUnit).</p>

<p>Di postingan ini kita akan menggunakan <a href="http://nunit.org/">NUnit</a> sebagai tool untuk melakukan unit testing. <a href="http://www.nunit.org/">NUnit</a> adalah framework unit testing yang digunakan untuk bahasa pemrograman .NET. <a href="http://www.nunit.org/">NUnit</a> sendiri merupakan hasil portingan dari <a href="http://junit.org/">JUnit</a>.
Sebelum menggunakan NUnit tentunya harus kita <a href="http://www.nunit.org/index.php?p=download">download</a> dan kemudian menginstallnya.</p>

<h3>Membuat Project</h3>

<p>Untuk uji coba <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ada dua project yang akan kita buat yaitu :</p>

<ol>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> – Ini adalah project target yang akan kita tes untuk setiap unitnya (fungsi/method).</p></li>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> – Ini adalah project <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>.</p></li>
</ol>


<h3>Membuat Project CalculatorLib</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> adalah project yang akan kita buatkan unit testingnya, project ini bertipe <code>Class Library</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-03.png"></p>

<p>Nah di project ini, kita akan membuat class baru dengan nama <code>Calculator</code> kemudian menambahkan empat method yaitu <code>Tambah</code>, <code>Kurang</code>, <code>Kali</code> dan <code>Bagi</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-04.png"></p>

<p>Coba perhatikan gambar di atas, method <code>Tambah</code> sengaja dibuat salah dengan menggunakan operator kali (*), biar nanti keliatan efeknya ketika dites menggunakan <a href="http://www.nunit.org/">NUnit</a>.</p>

<p>Setelah project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> selesai kita lanjut dengan membuat project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a>.</p>

<h3>Membuat Project CalculatorUnitTest</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> adalah project unit testing yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, project ini juga bertipe <code>Class Library</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-05.png"></p>

<p>Di project ini, kita akan menambahkan class baru dengan nama <code>CalculatorTest</code> yang mempunyai empat method yaitu <code>TambahTest</code>, <code>KurangTest</code>, <code>KaliTest</code> dan <code>BagiTest</code>. Jadi konvensi penamaannya adalah untuk nama class di tambah akhiran <code>Test</code>. Contoh class <code>Calculator</code> menjadi <code>CalculatorTest</code>. Untuk method juga sama, misal method <code>Tambah</code> menjadi <code>TambahTest</code>, method <code>Kurang</code> menjadi <code>KurangTest</code> begitu seterusnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-06.png"></p>

<p>Method-method yang ada di class unit testingnya, biasanya bersifat <code>independent</code> artinya masing-masing method ini bisa dijalankan/eksekusi secara mandiri (tidak tergantung dengan method yang lain) sehingga kita bisa menjalankan unit testing secara berulang.</p>

<h3>Menambahkan Referensi Project CalculatorLib</h3>

<p>Agar project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> bisa mengakses semua class dan method yang ada di project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, kita terlebih dulu harus menambahkan referensi CalculatorLib. Caranya seperti berikut :</p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-07.png"></p></li>
<li><p>Aktifkan panel Solution kemudian pilih project CalculatorLib</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-08.png"></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library CalculatorLib</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-09.png"></p></li>
</ol>


<p>Kemudian lengkapi kode class <a href="https://github.com/k4m4r82/DemoUnitTesting/blob/master/src/CalculatorUnitTest/CalculatorTest.cs">CalculatorTest</a>, seperti gambar di bawah ini.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-10.png"></p>

<h3>Menambahkan Library Unit Testing</h3>

<p>Seperti penjelasan saya di awal postingan, untuk contoh unit testing ini kita akan menggunakan <a href="http://www.nunit.org/">NUnit</a>. Berikut langkah-langkah menambahkan library <a href="http://www.nunit.org/">NUnit</a></p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-11.png"></p></li>
<li><p>Setelah tampil dialog Reference Manager, aktifkan panel Assemblies -> Extensions kemudian aktifkan pilihan nunit.framework</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-12.png"></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library nunit.framework</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-13.png"></p></li>
</ol>


<h3>Menulis Unit Testing</h3>

<p>Setelah menambahkan library unit testing, project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> tidak otomatis langsung dikenali oleh  tool unit testing, ada hal-hal lainnya yang perlu kita
ketahui dalam menulis unit testing menggunakan <a href="http://www.nunit.org/">Nunit</a> yaitu :</p>

<ul>
<li><a href="http://www.nunit.org/index.php?p=attributes&amp;r=2.4">Attributes</a></li>
<li><a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">Assertions</a></li>
</ul>


<h4>Attributes</h4>

<p>Digunakan untuk memberi tag/penanda  class dan method yang akan dites. Ada dua attribut yang sering digunakan yaitu attribut <code>[TestFixture]</code> untuk menandai <code>class</code> dan attribut <code>[Test]</code> untuk menandai method. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-14.png"></p>

<p>Selain itu ada attribut lain yang digunakan untuk menandai method yang berfungsi sebagai method inisialisasi yaitu attribut <code>[SetUp]</code>. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-15.png"></p>

<p>Jadi method <code>Init</code> di atas akan dijalankan terlebih dulu sebelum tool <a href="http://www.nunit.org/">Nunit</a> menjalankan method-method lain yang ditandai dengan attribut <code>[Test]</code>.</p>

<h4>Assertions</h4>

<p>Merupakan sekumpulan method static yang digunakan untuk mengevaluasi method yang akan dites.  Jadi method-method assertions akan mengembalikan nilai boolean (true/false). Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-16.png"></p>

<p>Pada gambar di atas kita menggunakan salah satu method <code>Assertions</code> yaitu method <code>AreEqual</code> untuk membandingkan dua buah nilai, yaitu nilai yang di harapkan (expected) dan nilai aktual. Nilai expected  kita inputkan secara manual sedangkan nilai aktual dihasilkan dari pemanggilan method. Coba perhatikan potongan kode berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-17.png"></p>

<p>Dari hasil pemanggilan method Tambah(5, 2), jika menghasilkan nilai 7 maka method <code>AreEqual</code> akan mengembalikan nilai true yang artinya tes berhasil karena sesuai dengan nilai yang diharapkan yaitu <code>7</code> selain itu akan mengembalikan nilai false/gagal.</p>

<p>Untuk referensi method-method <code>Assertions</code> lainnya bisa dicek di<a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.5.10">sini</a>.</p>

<h3>NUnit GUI Runner</h3>

<p>Merupakan tool GUI bawaan NUnit yang digunakan untuk menjalankan project unit testing. Tool ini membutuhkan file assembly (dll) dari project unit testing. Jadi project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> harus kita <code>build</code> terlebih dulu untuk menghasilkan file assembly(CalculatorUnitTest.dll), kemudian kita buka menggunakan tool <code>NUnit GUI Runner</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-18.png"></p>

<p>Caranya dari menu File -> Open Project kemudian cari hasil build project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> (CalculatorUnitTest.dll).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-25.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-19.png"></p>

<p>Untuk memulai tes, klik tombol <code>Run</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-20.png"></p>

<p>Dari gambar di atas hanya method <code>Tambah</code> yang gagal melewati unit testing, coba kita cek kode unit testnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-21.png"></p>

<p>Dari kode di atas <code>5 + 2</code> seharusnya menghasilkan nilai <code>7</code> (nilai expected/diharapkan), tetapi dari hasil unit testingnya malah menghasilkan nilai <code>10</code>, dari mana datangnya nilai <code>10</code> ini ?</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-22.png"></p>

<p>Dari sini kita sudah bisa menebak ada yang salah dengan method Tambahnya, coba kita cek lagi method Tambah dari class Calculator.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-23.png"></p>

<p>Ops!!! ternyata benar ada <code>kesalahan logic</code> yaitu salah operator di method Tambah yang seharusnya menggunakan operator tambah (+) malah menggunakan operator kali (*), sehingga wajar <code>5 * 2</code> menghasilkan nilai <code>10</code> bukannya <code>7</code>. Jadi harus kita benarin dulu operatornya kemudian build ulang.</p>

<p>Setelah itu kita cek lagi hasil unit testingnya</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-24.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUnitTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">NUnit</a></li>
<li><a href="http://nunit.org/index.php?p=quickStart&amp;r=2.6.4">NUnit Quick Start</a></li>
<li><a href="http://nunit.org/index.php?p=writingTests&amp;r=2.6.4">Writing Tests</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/"/>
    <updated>2016-06-28T12:54:38+07:00</updated>
    <id>http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Melanjutkan pembahasan <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a>, kali ini kita akan membahas salah satu manfaat menggunakan <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a>. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<!-- more -->


<p>Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository<T> generic/umum sebagai berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-01.png"></p>

<p>Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository<T>. Contoh interface ICategoryRepository dan IProductRepository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-02.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-03.png"></p>

<p>Sebagai contoh kita akan membuat aplikasi menggunakan database <a href="https://northwinddatabase.codeplex.com/">Northwind</a>, dengan menggunakan <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.</p>

<div><script src='https://gist.github.com/3ce54c2191c532665f2e19c09abd901b.js'></script>
<noscript><pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using System.Data.Entity;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public CategoryRepository()
        {
        }

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    category = context.Categories.Where(f =&gt; f.CategoryID == categoryId)
                                      .SingleOrDefault();
                }                
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .Where(f =&gt; f.CategoryName.ToLower().Contains(categoryName.ToLower()))
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Added;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Modified;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Deleted;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>


<p>Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-04.png"></p>

<p>Pada gambar di atas deklarsi objek <code>categoryRepository</code> tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep <a href="http://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to interfaces</a>), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.</p>

<p>Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepository.cs">CategoryRepository</a> di atas menggunakan <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> dengan <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> lain yang lebih ringan misal <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper .NET</a>. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepositoryDapper.cs">CategoryRepositoryDapper</a> kemudian mengganti implementasi classnya di sisi client. Mudah bukan :-)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-061.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-08.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-09.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat User Function Library Pada Crystal Report .NET]]></title>
    <link href="http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net/"/>
    <updated>2016-03-26T12:45:06+07:00</updated>
    <id>http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg" width="120" height="100">Crystal Report .NET selain memudahkan kita dalam mendesain report/laporan juga menyediakan puluhan fungsi yang siap pakai (built-in function) yang bisa mempercepat dalam pembuatan report/laporan. Tetapi ada waktunya ketika kita membutuhkan fungsi khusus yang tidak disediakan oleh Crystal Report .NET, dan kabar baiknya Crystal Report .NET juga menyediakan fasilitas untuk membuat fungsi tambahan yang dikenal dengan istilah <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a>.</p>

<!-- more -->


<p><a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> adalah class library .NET yang dibuat dengan beberapa aturan sebagai berikut :</p>

<ol>
<li>Nama project harus di beri prefix <code>CRUFL</code>. Misal kita ingin membuat project dengan nama CrystalReportHelper, nama project ini harus kita tambahkan prefix <code>CRUFL</code>, sehingga nama projectnya menjadi <strong>CRUFL</strong>CrystalReportHelper.</li>
<li>Project harus terdiri dari interface dan class konkret</li>
<li>Setiap interface harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code></li>
<li>Begitu juga class konkret harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code></li>
<li>Mengaktifkan pilihan <code>Register for COM interop</code> (Project -> Properties -> Build)</li>
<li>Menginstall hasil build ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a></li>
</ol>


<p>Oke kita langsung saja, kita awali dengan membuat User Function Library Class Library.</p>

<h5>Membuat UFL Class Library</h5>

<ol>
<li><p>Klik menu File ->New -> Project …</p></li>
<li><p>Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-01.png"></p>

<p>Nama project harus diberi prefix <code>CRUFL</code></p></li>
<li><p>Setelah project berhasil dibuat, klik kanan nama project -> properties</p></li>
<li><p>Klik tab Build, kemudian aktifkan pilihan <code>Register for COM interop</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-02.png"></p>

<p>Mengaktifkan pilihan <code>Register for COM interop</code> akan menyebabkan assembly secara otomatis diregister oleh utility regasm.exe, ketika project dibuild/compile. Jadi, kita tidak perlu menjalankan regasm.exe secara manual via command prompt.</p></li>
</ol>


<p>Setelah project berhasil dibuat, kita akan menambahkan interface dan class konkretnya. Untuk contoh kali ini kita akan membuat fungsi terbilang yang biasanya digunakan dalam pembuatan aplikasi ritel.</p>

<p>Kita akan mulai dengan interface terlebih dulu.</p>

<h5>Membuat Interface dengan Attribut COM</h5>

<ol>
<li><p>Hapus class default (Class1)</p></li>
<li><p>Tambahkan sebuah interface dengan nama ITerbilang, kemudian tambahkan juga method abstractnya dengan nama TerbilangIndonesia</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-03.png"></p></li>
<li><p>Kemudian tambahkan attribut COM</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-04.png"></p>

<p>Attribut COM untuk interface terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code>. Attribut ini perlu kita tambahkan agar class library yang kita buat bisa dikenali oleh Crystal Report.</p>

<p>Untuk mendapatkan nilai GUID, bisa menggunakan tool GUID yang sudah disediakan oleh Visual Studio .NET. Tool ini bisa diaktifkan melalui menu <code>Tools -&gt; Create GUID</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-05.png"></p></li>
</ol>


<p>Setelah menyelesaikan pembuatan interface ITerbilang, kita lanjutkan dengan pembuatan class konkretnya.</p>

<h5>Membuat Class dengan Attribut COM</h5>

<ol>
<li><p>Tambahkan sebuah class dengan nama Terbilang. Class harus mengimplementasikan interface ITerbilang.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-06.png"></p>

<p>Karena class Terbilang mengimplementasikan interface ITerbilang, maka class Terbilang wajib mendefinisikan ulang (override) method TerbilangIndonesia.</p></li>
<li><p>Kemudian tambahkan Attribut COM</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-07.png"></p>

<p>Attribut COM untuk class  terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code>. Setelah itu lengkapi kode method TerbilangIndonesia seperti berikut :</p>

<p><div><script src='https://gist.github.com/34337e1baec374270fb4.js'></script>
<noscript><pre><code>[ComVisible(true), ClassInterface(ClassInterfaceType.None), Guid(&quot;BA626A6E-0AA9-45C9-AA47-2E9674406A75&quot;)]
public class Terbilang : ITerbilang
{
 public string TerbilangIndonesia(int nominal)
 {
     string strTot = string.Empty;
     string urai = string.Empty;
     string strJmlHuruf = string.Empty;
     string bil1 = string.Empty;
     string bil2 = string.Empty;</p>

<pre><code> int y = 0;
 int x = 0;
 int z = 0;

 strJmlHuruf = Convert.ToString(nominal);

 urai = string.Empty;
 while (x &amp;lt; strJmlHuruf.Length)
 {
     x++;
     strTot = strJmlHuruf.Substring(x - 1, 1);
     y = y + Convert.ToInt32(strTot);
     z = strJmlHuruf.Length - x + 1;
     switch (Convert.ToInt32(strTot))
     {
         case 1:
             if ((z == 1 | z == 7 | z == 10 | z == 13))
             {
                 bil1 = &amp;quot;SATU &amp;quot;;
             }
             else if ((z == 4))
             {
                 if ((x == 1))
                 {
                     bil1 = &amp;quot;SE&amp;quot;;
                 }
                 else
                 {
                     bil1 = &amp;quot;SATU &amp;quot;;
                 }
             }
             else if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
             {
                 x = x + 1;
                 strTot = strJmlHuruf.Substring(x - 1, 1);
                 z = strJmlHuruf.Length - x + 1;
                 bil2 = string.Empty;
                 switch (Convert.ToInt32(strTot))
                 {
                     case 0:
                         bil1 = &amp;quot;SEPULUH &amp;quot;;
                         break;
                     case 1:
                         bil1 = &amp;quot;SEBELAS &amp;quot;;
                         break;
                     case 2:
                         bil1 = &amp;quot;DUA BELAS &amp;quot;;
                         break;
                     case 3:
                         bil1 = &amp;quot;TIGA BELAS &amp;quot;;
                         break;
                     case 4:
                         bil1 = &amp;quot;EMPAT BELAS &amp;quot;;
                         break;
                     case 5:
                         bil1 = &amp;quot;LIMA BELAS &amp;quot;;
                         break;
                     case 6:
                         bil1 = &amp;quot;ENAM BELAS &amp;quot;;
                         break;
                     case 7:
                         bil1 = &amp;quot;TUJUH BELAS &amp;quot;;
                         break;
                     case 8:
                         bil1 = &amp;quot;DELAPAN BELAS &amp;quot;;
                         break;
                     case 9:
                         bil1 = &amp;quot;SEMBILAN BELAS &amp;quot;;
                         break;
                 }
             }
             else
             {
                 bil1 = &amp;quot;SE&amp;quot;;
             }
             break;
         case 2:
             bil1 = &amp;quot;DUA &amp;quot;;
             break;
         case 3:
             bil1 = &amp;quot;TIGA &amp;quot;;
             break;
         case 4:
             bil1 = &amp;quot;EMPAT &amp;quot;;
             break;
         case 5:
             bil1 = &amp;quot;LIMA &amp;quot;;
             break;
         case 6:
             bil1 = &amp;quot;ENAM &amp;quot;;
             break;
         case 7:
             bil1 = &amp;quot;TUJUH &amp;quot;;
             break;
         case 8:
             bil1 = &amp;quot;DELAPAN &amp;quot;;
             break;
         case 9:
             bil1 = &amp;quot;SEMBILAN &amp;quot;;
             break;
         default:
             bil1 = string.Empty;
             break;
     }

     if ((Convert.ToInt32(strTot) &amp;gt; 0))
     {
         if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
         {
             bil2 = &amp;quot;PULUH &amp;quot;;
         }
         else if ((z == 3 | z == 6 | z == 9 | z == 12 | z == 15))
         {
             bil2 = &amp;quot;RATUS &amp;quot;;
         }
         else
         {
             bil2 = string.Empty;
         }
     }
     else
     {
         bil2 = string.Empty;
     }

     if ((y &amp;gt; 0))
     {
         switch (z)
         {
             case 4:
                 bil2 = bil2 + &amp;quot;RIBU &amp;quot;;
                 y = 0;
                 break;
             case 7:
                 bil2 = bil2 + &amp;quot;JUTA &amp;quot;;
                 y = 0;
                 break;
             case 10:
                 bil2 = bil2 + &amp;quot;MILYAR &amp;quot;;
                 y = 0;
                 break;
             case 13:
                 bil2 = bil2 + &amp;quot;TRILYUN &amp;quot;;
                 y = 0;
                 break;
         }
     }
     urai = urai + bil1 + bil2;
 }

 return urai.ToLower() + &amp;quot;rupiah&amp;quot;;
</code></pre>

<p> }
}</code></pre></noscript></div></p></li>
</ol>


<p>Langkah berikutnya adalah mengeset Strong-Name key, ini adalah peraturan berikutnya yang harus kita ikuti agar class <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> yang sudah kita buat bisa di daftarkan ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>.</p>

<h5>Mengeset Strong-Name key</h5>

<ol>
<li><p>Klik kanan project -> Properties</p></li>
<li><p>Aktifkan tab signing, kemudian aktifkan pilihan <code>Sign the assembly</code></p></li>
<li><p>Pada pilihan combo <code>Choose a string name key file</code>, pilih &lt;New…> setelah itu akan tampil dialog <code>Create Strong Name Key</code> kemudian isikan nilai input key file name, misal dengan nama <code>CRUFLCrystalReportHelperKey</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-08.png"></p></li>
<li><p>Terakhir lakukan proses Build/Compile, melalui menu Build -> Build Solution</p></li>
</ol>


<h5>Mendaftarkan Assembly ke GAC(Global Assembly Cache)</h5>

<p>Hasil build/compile dari project <code>CRUFLCrystalReportHelper</code>, akan menghasilkan file dengan ekstensi .dll atau yang dikenal dengan istilah file Assembly. File ini harus kita daftarkan terlebih dulu ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> agar bisa dikenali oleh Crystal Report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-22.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-23.png"></p>

<p>Berikut langkah-langkah untuk mendaftarkan file Assembly ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> :</p>

<ol>
<li><p>Aktifkan Visual Studio Command Prompt sesuai dengan versi Visual Studio .NET Anda</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-09.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-10.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-11.png"></p></li>
<li><p>Gunakan tool <code>gacutil</code>, dengan format perintah seperti berikut</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if &lt;Assembly Name></span></code></pre></td></tr></table></div></figure></p>

<p> contoh :</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if CRUFLCrystalReportHelper.dll</span></code></pre></td></tr></table></div></figure></p>

<p> <img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-12.png"></p>

<p> Jika berhasil akan tampil pesan <code>Assembly successfully added to the cache</code>.</p></li>
</ol>


<h5>Testing User Function Library</h5>

<p>Setelah menyelesaikan project CRUFLCrystalReportHelper dan mendaftarkannya ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>, kita akan menambahkan project baru dengan tipe WinForm Application.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-13.png"></p>

<p>Setelah itu tambahkan juga item Crystal Report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-14.png"></p>

<p>Kemudian desain reportnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-15.png"></p>

<p>Selanjutnya kita akan menambahkan formula baru dengan nama <code>terbilang</code>, caranya dengan mengklik kanan <code>Formula Fields</code> -> New …</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-17.png"></p>

<p>Setelah itu akan tampil dialog Formula Workshop</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-18.png"></p>

<p>Fungsi terbilang <code>TerbilangIndonesia</code> yang sudah kita buat masuk ke dalam kelompok <code>Additional Functions</code> -> <code>COM and .NET UFLs (u212com.dll)</code>. Fungsi ini membutuhkan parameter nominal yang nilainya kita isi dengan field total dari tabel Jual.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-19.png"></p>

<p>Kemudian tambahkan formula <code>terbilang</code> ke dalam report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-20.png"></p>

<p>Terakhir kita running project, dan lihat hasil dari formula terbilangnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-21.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUFLforCR">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit of Work Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/"/>
    <updated>2016-02-24T10:24:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Kalau sudah membahas <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a> rasanya kurang <code>manteb</code> jika tidak membahas <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work Pattern</a>, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak <em>&ldquo;ibarat sop ayam tanpa garam,  rasanya hambar&rdquo;</em> he he :D</p>

<p><a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan.
Jadi cara kerja <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> ini mirip dengan salah satu fitur andalan <a href="https://en.wikipedia.org/wiki/Category:Database_management_systems">DBMS</a> yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</p>

<!-- more -->


<p><a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> sendiri merupakan salah satu pattern <code>kesukaan</code> Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a>. Bagi Anda yang sudah pernah mencoba <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a>.</p>

<h5>Membuat Interface dan Class Konkret Unit of Work</h5>

<p>Sama seperti pembahasan <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, impelmentasi <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> juga disarankan menggunakan <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>.</p>

<p>Berdasarkan contoh project <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita akan menambahkan interface baru dengan nama <code>IUnitOfWork</code>. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/240216-01.png"></p>

<p>Setelah itu kita buatkan class konkretnya dengan nama <code>UnitOfWork</code>, dan ingat class ini harus mengimplementasikan interface <code>IUnitOfWork</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/240216-02.png"></p>

<p>Terakhir kita lengkapi kode class UnitOfWork seperti berikut :</p>

<div><script src='https://gist.github.com/c21f5beec8837a044f37.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Repository.Api;
using System.Data;

namespace Northwind.Repository.Service
{
    public class UnitOfWork : IUnitOfWork
    {
        private IDapperContext _context;
        private IDbTransaction _transaction;
        private ICategoryRepository _categoryRepository;
        private IProductRepository _productRepository;

        public UnitOfWork(IDapperContext context)
        {
            this._context = context;            
        }

        public ICategoryRepository CategoryRepository
        {
            get { return _categoryRepository ?? (_categoryRepository = new CategoryRepository(_transaction, _context)); }
        }

        public IProductRepository ProductRepository
        {
            get { return _productRepository ?? (_productRepository = new ProductRepository(_transaction, _context)); }
        }

        public void BeginTransaction()
        {
            if (_transaction != null)
                throw new NullReferenceException(&quot;Not finished previous transaction&quot;);

            _transaction = _context.db.BeginTransaction();
        }

        public void Commit()
        {
            if (_transaction == null)
                throw new NullReferenceException(&quot;Tryed commit not opened transaction&quot;);

            _transaction.Commit();
        }
    }
}</code></pre></noscript></div>


<h5>Testing Class Unit of Work</h5>

<p>Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> menggunakan <a href="http://coding4ever.net">Unit of Work Pattern</a>.</p>

<div><script src='https://gist.github.com/af692dd1962816fab878.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class UnitOfWorkTest
    {
        static void Main(string[] args)
        {
            using (IDapperContext context = new DapperContext())
            {
                // buat objek unit of work
                IUnitOfWork uow = new UnitOfWork(context);

                var result = 0;

                uow.BeginTransaction(); // mulai transaction

                // buat objek category
                var category = new Category
                {
                    CategoryName = &quot;Condiments&quot;,
                    Description = &quot;Sweet and savory sauces, relishes, and seasonings&quot;
                };
                result = uow.CategoryRepository.Save(category); // simpan data category
                Console.WriteLine(&quot;Tambah data category {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                // buat objek product
                var product = new Product
                {
                    CategoryID = category.CategoryID,
                    ProductName = &quot;Genen Shouyu&quot;,
                    QuantityPerUnit = &quot;24 - 250 ml bottles&quot;,
                    UnitPrice = 15.5,
                    UnitsInStock = 50
                };
                result = uow.ProductRepository.Save(product); // simpan data product
                Console.WriteLine(&quot;Tambah data product {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                uow.Commit(); // commit, simpan data secara permanen ke database
            }

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }        
    }
}</code></pre></noscript></div>


<p>Selamat <a href="https://github.com/k4m4r82/UnitOfWorkPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="http://coding4ever.net">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper.NET</a>, <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-01.png"></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-021.png"></p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-101.png"></p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-03.png"></p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<div><script src='https://gist.github.com/bd6bbf861f46082851c7.js'></script>
<noscript><pre><code>namespace Northwind.Model
{
    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }
        public string Description { get; set; }
    }
}</code></pre></noscript></div>


<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-04.png"></p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-061.png"></p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<div><script src='https://gist.github.com/05123acda602dd1bdc47.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public Category GetByID(int categoryId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            throw new NotImplementedException();
        }

        public int Save(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Category obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/d876476ffa10fa9855d2.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        public Product GetByID(int productId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetByName(string productName)
        {
            throw new NotImplementedException();
        }

        public int Save(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Product obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>


<p>Kemudian lengkapi kodenya seperti berikut :</p>

<div><script src='https://gist.github.com/4513c85d1541f0321204.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        private IDapperContext _context;
        private string _sql;

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description
                         FROM Categories
                         WHERE CategoryID = @categoryId&quot;;
                
                category = _context.db.Query&lt;Category&gt;(_sql, new { categoryId })
                                   .SingleOrDefault();
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         WHERE CategoryName LIKE @categoryName
                         ORDER BY CategoryName&quot;;
                
                categoryName = string.Format(&quot;%{0}%&quot;, categoryName);
                listOfCategory = _context.db.Query&lt;Category&gt;(_sql, new { categoryName })
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         ORDER BY CategoryName&quot;;

                listOfCategory = _context.db.Query&lt;Category&gt;(_sql)
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Categories (CategoryID, CategoryName, Description)
                         VALUES (@CategoryID, @CategoryName, @Description)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Categories SET CategoryName = @CategoryName, Description = @Description)
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Categories
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/87ba9b6fe43275c1f59c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        private IDapperContext _context;
        private string _sql;

        private Product MappingRecordToObj(string sql, object param = null)
        {
            var product = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).SingleOrDefault();

            return product;
        }

        private IList&lt;Product&gt; MappingRecordToList(string sql, object param = null)
        {
            var listOfProduct = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).ToList();

            return listOfProduct;
        }

        public Product GetByID(int productId)
        {
            Product product = null;

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductID = @productId&quot;;

                product = MappingRecordToObj(_sql, new { productId });
            }
            catch
            {
            }

            return product;
        }        

        public IList&lt;Product&gt; GetByName(string productName)
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductName LIKE @productName
                         ORDER BY Products.ProductName&quot;;

                productName = string.Format(&quot;%{0}%&quot;, productName);
                listOfProduct = MappingRecordToList(_sql, new { productName });
            }
            catch
            {
            }

            return listOfProduct;
        }

        public IList&lt;Product&gt; GetAll()
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         ORDER BY Products.ProductName&quot;;

                listOfProduct = MappingRecordToList(_sql);
            }
            catch
            {
            }

            return listOfProduct;
        }

        public int Save(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Products (ProductID, ProductName, QuantityPerUnit, UnitPrice, UnitsInStock)
                         VALUES (@ProductID, @ProductName, @QuantityPerUnit, @UnitPrice, @UnitsInStock)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Products SET ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, 
                         UnitPrice = @UnitPrice, UnitsInStock = @UnitsInStock
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Products
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>


<h5>Membuat Class Context</h5>

<p>Di dalam <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="http://coding4ever.net/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-07.png"></p>

<div><script src='https://gist.github.com/207b5c995e267c01d5c4.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Data;
using System.Data.Common;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class DapperContext : IDapperContext
    {
        private readonly string _providerName;
        private readonly string _connectionString;
        private IDbConnection _db;

        public DapperContext()
        {
            var dbName = System.IO.Directory.GetCurrentDirectory() + &quot;\\Northwind.db&quot;;

            _providerName = &quot;System.Data.SQLite&quot;;
            _connectionString = &quot;Data Source=&quot; + dbName;
        }

        private IDbConnection GetOpenConnection(string providerName, string connectionString)
        {
            DbConnection conn = null;

            try
            {
                DbProviderFactory provider = DbProviderFactories.GetFactory(providerName);
                conn = provider.CreateConnection();
                conn.ConnectionString = connectionString;
                conn.Open();
            }
            catch
            {
            }

            return conn;
        }

        public IDbConnection db
        {
            get { return _db ?? (_db = GetOpenConnection(_providerName, _connectionString)); }
        }

        public void Dispose()
        {
            if (_db != null)
            {
                try
                {
                    if (_db.State != ConnectionState.Closed)
                        _db.Close();
                }
                finally
                {
                    _db.Dispose();
                }
            }

            GC.SuppressFinalize(this);
        }
    }
}</code></pre></noscript></div>


<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-08.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-09.png"></p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<div><script src='https://gist.github.com/ac5519310e9154830f1c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class CategoryRepositoryTest
    {
        // deklarsi objek repository
        static ICategoryRepository _repository;

        static void Main(string[] args)
        {
            // buat objek context
            IDapperContext context = new DapperContext();

            // buat objek repository
            _repository = new CategoryRepository(context);

            GetAllTest();
            SaveTest();
            UpdateTest();
            DeleteTest();

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }

        static void GetAllTest()
        {
            var listOfCategory = _repository.GetAll();
            foreach (var category in listOfCategory)
            {
                Console.WriteLine(&quot;{0}, {1}, {2}&quot;, category.CategoryID, category.CategoryName, category.Description);
            }
        }

        static void SaveTest()
        {
            var category = new Category
            {
                CategoryName = &quot;Seafood&quot;,
                Description = &quot;Seaweed and fish&quot;
            };

            var result = _repository.Save(category);
            Console.WriteLine(&quot;Tambah data baru {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void UpdateTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            category.CategoryName = &quot;Seaweed and fish&quot;;
            category.Description = &quot;Seafood&quot;;

            var result = _repository.Update(category);
            Console.WriteLine(&quot;Update data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void DeleteTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            var result = _repository.Delete(category);
            Console.WriteLine(&quot;Menghapus data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }        
    }
}</code></pre></noscript></div>


<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
