<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-08-12T11:00:21+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit Dan NDbUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit/"/>
    <updated>2016-08-12T10:13:09+07:00</updated>
    <id>http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Melanjutkan pembahasan tentang <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing Menggunakan NUnit</a>, di mana pada <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya  kita menggunakan contoh kasus <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>  pada pengembangan aplikasi database, sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak.</p>

<!-- more -->


<p>Untuk method <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> dan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> masih menggunakan contoh yang sama dengan <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya.</p>

<p style="text-align:center;"> Contoh method CRUD</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-01.png"></p>

<p style="text-align:center;"> Contoh Unit Testing</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-02.png"></p>

<p>Sebagai pengingat untuk melakukan <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> pada aplikasi database, kita harus menyiapkan data untuk tesnya terlebih dulu yaitu dengan meng-INSERT-kan beberapa data yang sesuai dengan kondisi yang kita set pada <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testing</a>. Cara <code>manual</code> sudah kita lakukan pada <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya, dan untuk <a href="">postingan</a> kali ini kita akan menggunakan library tambahan yang disebut dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>. Dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> kita dapat me-reset kondisi database sesuai keinginan setiap kali tes akan dijalankan. Me-reset di sini maksudnya <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> akan mengosongkan isi database terlebih dulu kemudian mengisikan data tesnya berdasarkan data yang sudah kita siapkan dalam format XML. Jadi pastikan kita tidak menggunakan database <code>production</code> pada saat menjalankan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<h3>Menggunakan NDbUnit</h3>

<p><a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> bisa dengan mudah kita tambahkan melalui <a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a>. Ada banyak pilihan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, disesuaikan dengan database yang kita gunakan. Untuk contoh di sini saya menggunakan <a href="https://www.nuget.org/packages/NDbUnit.SqlClient/">NDbUnit.SqlClient</a> untuk database SQL Server.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-03.png"></p>

<p>Setelah menambahkan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, langkah berikutnya adalah menambahkan file  .NET dataset schema definition (xsd) untuk setiap tabel yang akan di tes. Contoh kita punya tabel <code>Pegawai</code> dengan struktur seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-04.png"></p>

<p>Kemudian kita tinggal buatkan file.NET dataset schema definition (xsd) sesuai dengan struktur tabel di atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-05.png"></p>

<p>Berikutnya kita tambahkan file XML yang berisi data <code>Pegawai</code> yang akan di-INSERT-kan secara otomatis ke dalam database oleh <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-06.png"></p>

<p>Terakhir kita tambahkan method <code>ResetDatabase</code> pada class <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">PegawaiRepositoryTest</a>, kemudian kita panggil di method <code>Init</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-07.png"></p>

<p>Nah sekarang kita coba jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>, tapi sebelumnya kita cek dulu isi dari tabel <code>Pegawai</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-08.png"></p>

<p>Masih kosong kan? Coba kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-09.png"></p>

<p>Yup <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> langsung berhasil, sekarang kita cek lagi isi dari tabel Pegawai</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-10.png"></p>

<p>Nah sudah ada isinya kan? Ini berarti <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> sukses menjalankan misinya untuk mengisikan data Pegawai berdasarkan file <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/Pegawai.xml">Pegawai.xml</a> yang sudah kita buat pada langkah-langkah sebelumnya, sebelum <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> dijalankan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/08/120816-06.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/"/>
    <updated>2016-07-28T11:19:59+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Dasar-dasar <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> sudah kita pelajari, dilanjutkan dengan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> untuk mengecek tingkat keseriusan programmer dalam membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>. Semakin sedikit <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat atau asal-asalan pada saat membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> bakalan dijamin <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p>Pada postingan kali ini kita akan membahas tentang <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> yaitu tes yang dilakukan secara berkelompok. Sebagai contoh, dalam pengembangan aplikasi bisnis hampir bisa dipastikan 100% akan menggunakan database.  Sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak. Jadi kita tidak perlu lagi melakukan pengetesan secara <code>serius</code> di level UI (console, winform atau halaman web) karena sudah di lakukan pengetesan  melalui <a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>.</p>

<p>Contoh kita punya dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-01.png"></p>

<p>Kemudian kita buatkan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-02.png"></p>

<p>Unit testing pertama yang akan kita tes adalah method <code>GetByID</code>, method ini mempunyai satu parameter yaitu <code>nik</code> yang nilainya kita isi dengan <code>12345</code>. Setelah pemanggilan method <code>GetByID</code> (baris 30) <code>seharusnya</code> objek <code>pegawai</code> akan terisi dengan data pegawai dengan nik <code>12345</code>. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Objek pegawai tidak boleh null (baris 32)</li>
<li>Nik pegawai harus sama dengan <code>12345</code> (baris 33)</li>
<li>Nama pegawai harus sama dengan <code>Janoe Hendarto, S.Kom</code> (baris 34)</li>
<li>Untuk alamat dan kota nilainya juga harus sama dengan gambar di atas (baris 35 – 36)</li>
</ol>


<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> menggunakan <code>NUnit GUI Runner</code>, dan hasilnya adalah …</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-03.png"></p>

<p><a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">Unit testingnya</a> ternyata gagal karena kondisi yang sudah kita tentukan di baris 32 bahwa objek pegawainya tidak boleh null tidak terpenuhi. Ada dua kemungkinan penyebab kegagalan ini yaitu :</p>

<ol>
<li>Kita salah mengeset nilai niknya, jadi kemungkinan niknya bukan <code>12345</code> atau ..</li>
<li>Datanya memang belum ada</li>
</ol>


<p>Jadi kita akan cek dulu kemungkinan yang nomor 2 yaitu dengan melihat isi tabel Pegawai</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-04.png"></p>

<p>Ternyata memang benar datanya yang belum ada he he :-D, berarti harus kita tambahkan dulu data pegawai dengan nik <code>12345</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-05.png"></p>

<p>Setelah itu kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-06.png"></p>

<p>Ternyata masih gagal tapi dengan kondisi yang berbeda, dari gambar di atas terlihat nilai yang kita harapkan adalah <code>Janoe Hendarto, S.Kom</code> sedangkan yang ada di database adalah <code>Janoe Hendarto, M.Kom</code> beda di gelarnya yaitu <code>S.Kom</code> dan <code>M.Kom</code>, berarti kegagalan kedua ini kita yang salah mengeset kondisi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>. Solusinya kita tinggal ganti <code>S.Kom</code> menjadi <code>M.Kom</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-08.png"></p>

<p>Kemudian kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-09.png"></p>

<p>Akhirnya tes pertama berhasil :-)</p>

<p>Gimana ? Lebih <code>cepat</code> dan <code>gampang</code> bukan dari pada melakukan pengetesan dengan cara <code>jadul</code> via console, winform, atau halaman web he he just kidding :-D</p>

<p>Berikutnya kita akan tes method yang kedua yaitu <code>GetAll</code>, kode pengetesannya seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-10.png"></p>

<p>Method <code>GetAll</code> di atas akan mengembalikan kumpulan/collection dari objek pegawai. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Jumlah pegawainya ada 3 orang/record (baris 43)</li>
<li>Di baris 46 kita membuat objek <code>pegawai</code> kemudian mengeset datanya dengan data pegawai terakhir (index = 2)</li>
<li>Mulai baris 48 – 52, kita melakukan pengetesan seperti pengetesan method <code>GetByID</code></li>
</ol>


<p>Untuk keperluan tes ini kita tambahkan lagi dua record data pegawai, sehingga totalnya adalah 3 record sesuai dengan skenario nomor 1 di atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-11.png"></p>

<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-12.png"></p>

<p>Karena kondisi pengetesan (unit testing) sudah sesuai dengan data riil database, pengetesanpun langsung berhasil.</p>

<p>Nah sampai di sini sudah dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> yang selesai kita tes, dan untuk contoh pengetesan method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> lainnya seperti Save, Update dan Delete kodenya lebih kurang seperti berikut:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-14.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-15.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/280716-161.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coverage Testing Menggunakan NUnit, OpenCover Dan ReportGenerator]]></title>
    <link href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/"/>
    <updated>2016-07-22T20:23:16+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Sudah menggunakan <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ? Klo belum mampir ke <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">sini</a> dulu ya :-)</p>

<p>Kali ini kita akan membahas tentang <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> yaitu pengetesan yang dilakukan untuk mengecek apakah <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat telah meng-cover semua kode yang perlu dites. Jika <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> terlalu sedikit atau waktu membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> asal-asalan biasanya <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-15.jpg"></p>

<p>Mengecek satu-persatu unit testing yang dibuat oleh programmer apakah sudah sesuai dengan kode yang perlu dites jelas tidak mungkin, untungnya sudah tersedia banyak tool yang bisa melakukkannya secara otomatis.</p>

<p>Berikut beberapa tool yang bisa digunakan untuk melakukan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di dunia .NET yaitu :</p>

<ol>
<li><a href="http://nunit.org/">NUnit</a></li>
<li><a href="https://github.com/OpenCover/opencover/releases">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator/releases">Report Generator</a></li>
</ol>


<p>Duet maut ketiga tool di atas bisa kita gunakan untuk melakukan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a>. Untuk mendownloadnya Anda tinggal klik link di atas, khusus untuk <a href="https://www.nuget.org/packages/OpenCover/">OpenCover</a> dan <a href="https://www.nuget.org/packages/ReportGenerator/">Report Generator</a> sebaiknya disimpan di folder yang sama.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-01.png"></p>

<h3>Proses Coverage Testing</h3>

<p>Secara umum proses <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> menggunakan ke tiga tool di atas bisa di gambarkan seperti berikut</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-02.png"></p>

<p>Keterangan gambar :</p>

<ol>
<li>NUnit tool menjalankan prosedur unit testing terhadap file library yang sudah ditentukan</li>
<li>Dari proses poin 1 akan digunakan OpenCover untuk mengenerate file hasil coverage test dalam format xml. Karena file hasil generatenya dalam format xml, tentu akan menyulitkan kita untuk membacanya, makanya kita butuh tool terakhir yaitu Report Generator</li>
<li>Report Generator digunakan untuk membuat laporan format HTML yang lebih <code>manusiawi</code> sehingga mudah dibaca berdasarkan file coverage.xml</li>
</ol>


<p>Berdasarkan keterangan di atas kita bisa menuliskan batch command untuk prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> seperti berikut :</p>

<h4>Tahapan poin 1 dan 2</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>OpenCover.Console.exe -target:nunit-console.exe -targetargs:"/nologo /noshadow ""Library.NUnitTest.dll""" -filter:+[*]* -register:user -output: CodeCoverageResult.xml</span></code></pre></td></tr></table></div></figure>


<h4>Tahapan poin 3</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'2. menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>ReportGenerator.exe -reports CodeCoverageResult.xml -targetdir: _CodeCoverageReport</span></code></pre></td></tr></table></div></figure>


<h3>Persiapan Coverage Testing</h3>

<p>Sama seperti pembahasan <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> kita juga membutuhkan dua project yaitu project target dan project unit testing. Untuk contoh disini kita sudah punya dua project yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> dan <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLibUnitTest">KRSoftwareLibUnitTest</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-03.png"></p>

<p>Project <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> mempunyai sebuah class yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLib/DayHelper.cs">DayHelper</a> dan mempunyai dua method <code>GetIndonesianDay</code> dan <code>Weekday</code> yang akan kita buatkan <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testingnya</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-04.png"></p>

<p>Nah ini <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testing</a> dari method <code>GetIndonesianDay</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-05.png"></p>

<p>Setelah project <code>KRSoftwareLibUnitTest</code>-nya selesai, kemudian dilanjutkan dengan proses build project, baru kita jalankan prosedur coverage testing :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>"C:\CoverageTesting\opencover.4.6.519"\OpenCover.Console.exe -target:"C:\Program Files (x86)\NUnit 2.6.4\bin"\nunit-console.exe -targetargs:"/nologo /noshadow ""C:\CoverageTesting\KRSoftwareLibUnitTest\bin\Debug\KRSoftwareLibUnitTest.dll""" -filter:"+["KRSoftwareLib"]*" -register:user -output:"CodeCoverageResult.xml"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-06.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'2. echo menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml
</span><span class='line'>
</span><span class='line'>"C:\CoverageTesting\ReportGenerator_2.4.5.0\bin"\ReportGenerator.exe -reports:"CodeCoverageResult.xml" -targetdir:"_CodeCoverageReport"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-07.png"></p>

<p>Dari proses coverage test di atas akan menghasilkan coverage test yang bagus, karena semua kondisi sudah dites. Berikut adalah hasil coverage testnya:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-08.png"></p>

<p>Coba perhatikan kolom <code>Line coverage</code> dan <code>Branch coverage</code> nilainya 100% (warna hijaunya penuh).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-16.jpg"></p>

<p>Kita juga bisa melihat detail coverage test dari class DayHelper.cs :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-09.png"></p>

<p>Nah sekarang kita coba menonaktifkan beberapa baris kode tesnya untuk melihat perbedaan nilai kolom <code>Line coverage</code> dan <code>Branch coverage</code> seperti ini :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-10.png"></p>

<p>Hasil coverage testingnya jadi jelek alias gagal karena hanya dua kondisi yang di tes yaitu hari <code>Senin</code> dan <code>Selasa</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-11.png"></p>

<p>Dari detail coverage testnya class DayHelper.cs juga kelihatan baris/kondisi yang belum di tes:</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-12.png"></p>

<p>Gampang bukan ? Dengan coverage testing ini, kita jadi mudah untuk mendeteksi tingkat keseriusan programmer dalam membuat <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>.</p>

<h3>Build Events</h3>

<p>Sebenarnya pembahasan <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> sudah selesai, tapi berhubungan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas masih dijalankan secara manual via command prompt tentu akan menyulitkan kita untuk mengecek <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> setiap ada perubahan.
Salah satu solusinya adalah dengan memanfaatkan fasilitas <a href="http://coding4ever.net/blog/categories/build-events/">Build Events</a> yang sudah disediakan oleh Visual Studio .NET.</p>

<p>Nah berikut skrip <a href="http://coding4ever.net/blog/categories/build-events/">Build Events</a> yang harus kita buat untuk menjalankan prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas secara otomatis, setiap kali project unit testingnya di build.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "set lokasi tool coverage testing"
</span><span class='line'>set OpenCoverDir="C:\CoverageTesting\opencover.4.6.519"
</span><span class='line'>set NUnitRunnerDir="C:\Program Files (x86)\NUnit 2.6.4\bin"
</span><span class='line'>set ReportGeneratorDir="C:\CoverageTesting\ReportGenerator_2.4.5.0\bin"
</span><span class='line'>
</span><span class='line'>echo "set coverage xml"
</span><span class='line'>set CodeCoverageResult="CodeCoverageResult.xml"
</span><span class='line'>
</span><span class='line'>echo "set target library yang mau dites, misal KRSoftwareLib"
</span><span class='line'>set TargetLib="KRSoftwareLib"
</span><span class='line'>
</span><span class='line'>echo "generate coverage result xml format"
</span><span class='line'>call %OpenCoverDir%\OpenCover.Console.exe -target:%NUnitRunnerDir%\nunit-console.exe -targetargs:"/nologo /noshadow $(TargetFileName)" -filter:"+[%TargetLib%]*" -register:user -output:%CodeCoverageResult%
</span><span class='line'>
</span><span class='line'>echo "generate coverage result html format"
</span><span class='line'>call %ReportGeneratorDir%\ReportGenerator.exe -reports:%CodeCoverageResult% -targetdir:_CodeCoverageReport</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-13.png"></p>

<p>Jadi setiap kita melakukan build project, prosedur <a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> otomatis akan dijalankan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/220716-14.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoCoverageTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">Nunit</a></li>
<li><a href="https://github.com/opencover/opencover">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator">Report Generator</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/"/>
    <updated>2016-07-20T14:42:50+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/07/nunit.png" width="120" height="57">Testing merupakan salah satu fase penting yang harus dilakukan ketika membuat sebuah aplikasi. Testing biasanya dilakukan secara berbarengan pada saat menulis kode. Ada banyak <code>gaya</code> dalam melakukan testing dan yang paling favorit biasanya adalah gaya konvensional. Dengan menggunakan gaya ini programmer desktop akan menggunakan console/winform untuk melihat hasil tes dari sebuah unit (fungsi/method) sedangankan programmer web langsung menggunakan halaman web.</p>

<!-- more -->


<p>Ini adalah gaya lama yang kita pelajari dari jaman Majapahit <strong>#eh</strong>, maksudnya masa-masa kuliah dulu :-D, kan enggak keren banget udah jadi programmer pro (programmer yang udah kerja) tapi testingnya masih bergaya <code>mahasiswa</code> :-D</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-01.png"></p>

<p>Dengan testing gaya <code>jadul</code> ini, <code>kita</code> yang harus melakukan evaluasi terhadap hasil tesnya. Contoh tes di atas <code>5 + 2</code> kok hasilnya <code>10</code>. Bayangkan klo kita kurang teliti bakalan jadi bug di kemudian hari.</p>

<p>Jika Anda bosan dengan gaya ini (konvensional/jadul/mahasiswa) dan ingin naik level, kita bisa menggunakan tool yang memang dibuat khusus untuk melakukan unit testing seperti  <a href="http://www.nunit.org/">NUnit</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-02.png"></p>

<p>Dengan menggunakan tool unit testing, <code>komputer</code>-lah yang melakukan evaluasi terhadap hasil tesnya. Kita tinggal duduk manis he he :-)</p>

<h3>Jenis-jenis Testing</h3>

<p>Sebenarnya ada banyak jenis-jenis testing, tetapi karena keterbatasan waktu dan ilmu, saya hanya membahas jenis-jenis testing berikut :</p>

<ul>
<li><a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a></li>
<li><a href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">Coverage Testing</a></li>
<li><a href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing</a></li>
<li><a href="http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/">Performance Testing</a></li>
</ul>


<p>Jadi kita akan membahas <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a> terlebih dulu.</p>

<h3>Unit testing</h3>

<p>Unit testing adalah testing di level paling detail dari aplikasi. Artinya, testing di level method/function. Tes ini biasanya dilakukan oleh programmer dan bukan oleh tester, karena membutuhkan pengetahuan yang rinci tentang desain aplikasi dan kode yang ditulis.
Ada beberapa tool yg bisa digunakan untuk keperluan ini tergantung dari bahasa pemrograman yang kita gunakan. Misal di .NET (NUnit), Java (JUnit) dan PHP (PHPUnit).</p>

<p>Di postingan ini kita akan menggunakan <a href="http://nunit.org/">NUnit</a> sebagai tool untuk melakukan unit testing. <a href="http://www.nunit.org/">NUnit</a> adalah framework unit testing yang digunakan untuk bahasa pemrograman .NET. <a href="http://www.nunit.org/">NUnit</a> sendiri merupakan hasil portingan dari <a href="http://junit.org/">JUnit</a>.
Sebelum menggunakan NUnit tentunya harus kita <a href="http://www.nunit.org/index.php?p=download">download</a> dan kemudian menginstallnya.</p>

<h3>Membuat Project</h3>

<p>Untuk uji coba <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ada dua project yang akan kita buat yaitu :</p>

<ol>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> – Ini adalah project target yang akan kita tes untuk setiap unitnya (fungsi/method).</p></li>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> – Ini adalah project <a href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>.</p></li>
</ol>


<h3>Membuat Project CalculatorLib</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> adalah project yang akan kita buatkan unit testingnya, project ini bertipe <code>Class Library</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-03.png"></p>

<p>Nah di project ini, kita akan membuat class baru dengan nama <code>Calculator</code> kemudian menambahkan empat method yaitu <code>Tambah</code>, <code>Kurang</code>, <code>Kali</code> dan <code>Bagi</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-04.png"></p>

<p>Coba perhatikan gambar di atas, method <code>Tambah</code> sengaja dibuat salah dengan menggunakan operator kali (*), biar nanti keliatan efeknya ketika dites menggunakan <a href="http://www.nunit.org/">NUnit</a>.</p>

<p>Setelah project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> selesai kita lanjut dengan membuat project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a>.</p>

<h3>Membuat Project CalculatorUnitTest</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> adalah project unit testing yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, project ini juga bertipe <code>Class Library</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-05.png"></p>

<p>Di project ini, kita akan menambahkan class baru dengan nama <code>CalculatorTest</code> yang mempunyai empat method yaitu <code>TambahTest</code>, <code>KurangTest</code>, <code>KaliTest</code> dan <code>BagiTest</code>. Jadi konvensi penamaannya adalah untuk nama class di tambah akhiran <code>Test</code>. Contoh class <code>Calculator</code> menjadi <code>CalculatorTest</code>. Untuk method juga sama, misal method <code>Tambah</code> menjadi <code>TambahTest</code>, method <code>Kurang</code> menjadi <code>KurangTest</code> begitu seterusnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-06.png"></p>

<p>Method-method yang ada di class unit testingnya, biasanya bersifat <code>independent</code> artinya masing-masing method ini bisa dijalankan/eksekusi secara mandiri (tidak tergantung dengan method yang lain) sehingga kita bisa menjalankan unit testing secara berulang.</p>

<h3>Menambahkan Referensi Project CalculatorLib</h3>

<p>Agar project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> bisa mengakses semua class dan method yang ada di project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, kita terlebih dulu harus menambahkan referensi CalculatorLib. Caranya seperti berikut :</p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-07.png"></p></li>
<li><p>Aktifkan panel Solution kemudian pilih project CalculatorLib</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-08.png"></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library CalculatorLib</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-09.png"></p></li>
</ol>


<p>Kemudian lengkapi kode class <a href="https://github.com/k4m4r82/DemoUnitTesting/blob/master/src/CalculatorUnitTest/CalculatorTest.cs">CalculatorTest</a>, seperti gambar di bawah ini.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-10.png"></p>

<h3>Menambahkan Library Unit Testing</h3>

<p>Seperti penjelasan saya di awal postingan, untuk contoh unit testing ini kita akan menggunakan <a href="http://www.nunit.org/">NUnit</a>. Berikut langkah-langkah menambahkan library <a href="http://www.nunit.org/">NUnit</a></p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-11.png"></p></li>
<li><p>Setelah tampil dialog Reference Manager, aktifkan panel Assemblies -> Extensions kemudian aktifkan pilihan nunit.framework</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-12.png"></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library nunit.framework</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-13.png"></p></li>
</ol>


<h3>Menulis Unit Testing</h3>

<p>Setelah menambahkan library unit testing, project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> tidak otomatis langsung dikenali oleh  tool unit testing, ada hal-hal lainnya yang perlu kita
ketahui dalam menulis unit testing menggunakan <a href="http://www.nunit.org/">Nunit</a> yaitu :</p>

<ul>
<li><a href="http://www.nunit.org/index.php?p=attributes&amp;r=2.4">Attributes</a></li>
<li><a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">Assertions</a></li>
</ul>


<h4>Attributes</h4>

<p>Digunakan untuk memberi tag/penanda  class dan method yang akan dites. Ada dua attribut yang sering digunakan yaitu attribut <code>[TestFixture]</code> untuk menandai <code>class</code> dan attribut <code>[Test]</code> untuk menandai method. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-14.png"></p>

<p>Selain itu ada attribut lain yang digunakan untuk menandai method yang berfungsi sebagai method inisialisasi yaitu attribut <code>[SetUp]</code>. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-15.png"></p>

<p>Jadi method <code>Init</code> di atas akan dijalankan terlebih dulu sebelum tool <a href="http://www.nunit.org/">Nunit</a> menjalankan method-method lain yang ditandai dengan attribut <code>[Test]</code>.</p>

<h4>Assertions</h4>

<p>Merupakan sekumpulan method static yang digunakan untuk mengevaluasi method yang akan dites.  Jadi method-method assertions akan mengembalikan nilai boolean (true/false). Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-16.png"></p>

<p>Pada gambar di atas kita menggunakan salah satu method <code>Assertions</code> yaitu method <code>AreEqual</code> untuk membandingkan dua buah nilai, yaitu nilai yang di harapkan (expected) dan nilai aktual. Nilai expected  kita inputkan secara manual sedangkan nilai aktual dihasilkan dari pemanggilan method. Coba perhatikan potongan kode berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-17.png"></p>

<p>Dari hasil pemanggilan method Tambah(5, 2), jika menghasilkan nilai 7 maka method <code>AreEqual</code> akan mengembalikan nilai true yang artinya tes berhasil karena sesuai dengan nilai yang diharapkan yaitu <code>7</code> selain itu akan mengembalikan nilai false/gagal.</p>

<p>Untuk referensi method-method <code>Assertions</code> lainnya bisa dicek di<a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.5.10">sini</a>.</p>

<h3>NUnit GUI Runner</h3>

<p>Merupakan tool GUI bawaan NUnit yang digunakan untuk menjalankan project unit testing. Tool ini membutuhkan file assembly (dll) dari project unit testing. Jadi project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> harus kita <code>build</code> terlebih dulu untuk menghasilkan file assembly(CalculatorUnitTest.dll), kemudian kita buka menggunakan tool <code>NUnit GUI Runner</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-18.png"></p>

<p>Caranya dari menu File -> Open Project kemudian cari hasil build project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> (CalculatorUnitTest.dll).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-25.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-19.png"></p>

<p>Untuk memulai tes, klik tombol <code>Run</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-20.png"></p>

<p>Dari gambar di atas hanya method <code>Tambah</code> yang gagal melewati unit testing, coba kita cek kode unit testnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-21.png"></p>

<p>Dari kode di atas <code>5 + 2</code> seharusnya menghasilkan nilai <code>7</code> (nilai expected/diharapkan), tetapi dari hasil unit testingnya malah menghasilkan nilai <code>10</code>, dari mana datangnya nilai <code>10</code> ini ?</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-22.png"></p>

<p>Dari sini kita sudah bisa menebak ada yang salah dengan method Tambahnya, coba kita cek lagi method Tambah dari class Calculator.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-23.png"></p>

<p>Ops!!! ternyata benar ada <code>kesalahan logic</code> yaitu salah operator di method Tambah yang seharusnya menggunakan operator tambah (+) malah menggunakan operator kali (*), sehingga wajar <code>5 * 2</code> menghasilkan nilai <code>10</code> bukannya <code>7</code>. Jadi harus kita benarin dulu operatornya kemudian build ulang.</p>

<p>Setelah itu kita cek lagi hasil unit testingnya</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/07/200716-24.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUnitTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">NUnit</a></li>
<li><a href="http://nunit.org/index.php?p=quickStart&amp;r=2.6.4">NUnit Quick Start</a></li>
<li><a href="http://nunit.org/index.php?p=writingTests&amp;r=2.6.4">Writing Tests</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/"/>
    <updated>2016-06-28T12:54:38+07:00</updated>
    <id>http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Melanjutkan pembahasan <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a>, kali ini kita akan membahas salah satu manfaat menggunakan <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a>. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<!-- more -->


<p>Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository<T> generic/umum sebagai berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-01.png"></p>

<p>Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository<T>. Contoh interface ICategoryRepository dan IProductRepository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-02.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-03.png"></p>

<p>Sebagai contoh kita akan membuat aplikasi menggunakan database <a href="https://northwinddatabase.codeplex.com/">Northwind</a>, dengan menggunakan <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.</p>

<div><script src='https://gist.github.com/3ce54c2191c532665f2e19c09abd901b.js'></script>
<noscript><pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using System.Data.Entity;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public CategoryRepository()
        {
        }

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    category = context.Categories.Where(f =&gt; f.CategoryID == categoryId)
                                      .SingleOrDefault();
                }                
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .Where(f =&gt; f.CategoryName.ToLower().Contains(categoryName.ToLower()))
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Added;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Modified;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Deleted;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>


<p>Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-04.png"></p>

<p>Pada gambar di atas deklarsi objek <code>categoryRepository</code> tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep <a href="http://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to interfaces</a>), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.</p>

<p>Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepository.cs">CategoryRepository</a> di atas menggunakan <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> dengan <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> lain yang lebih ringan misal <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper .NET</a>. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepositoryDapper.cs">CategoryRepositoryDapper</a> kemudian mengganti implementasi classnya di sisi client. Mudah bukan :-)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-061.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-08.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/06/280616-09.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat User Function Library Pada Crystal Report .NET]]></title>
    <link href="http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net/"/>
    <updated>2016-03-26T12:45:06+07:00</updated>
    <id>http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg" width="120" height="100">Crystal Report .NET selain memudahkan kita dalam mendesain report/laporan juga menyediakan puluhan fungsi yang siap pakai (built-in function) yang bisa mempercepat dalam pembuatan report/laporan. Tetapi ada waktunya ketika kita membutuhkan fungsi khusus yang tidak disediakan oleh Crystal Report .NET, dan kabar baiknya Crystal Report .NET juga menyediakan fasilitas untuk membuat fungsi tambahan yang dikenal dengan istilah <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a>.</p>

<!-- more -->


<p><a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> adalah class library .NET yang dibuat dengan beberapa aturan sebagai berikut :</p>

<ol>
<li>Nama project harus di beri prefix <code>CRUFL</code>. Misal kita ingin membuat project dengan nama CrystalReportHelper, nama project ini harus kita tambahkan prefix <code>CRUFL</code>, sehingga nama projectnya menjadi <strong>CRUFL</strong>CrystalReportHelper.</li>
<li>Project harus terdiri dari interface dan class konkret</li>
<li>Setiap interface harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code></li>
<li>Begitu juga class konkret harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code></li>
<li>Mengaktifkan pilihan <code>Register for COM interop</code> (Project -> Properties -> Build)</li>
<li>Menginstall hasil build ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a></li>
</ol>


<p>Oke kita langsung saja, kita awali dengan membuat User Function Library Class Library.</p>

<h5>Membuat UFL Class Library</h5>

<ol>
<li><p>Klik menu File ->New -> Project …</p></li>
<li><p>Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-01.png"></p>

<p>Nama project harus diberi prefix <code>CRUFL</code></p></li>
<li><p>Setelah project berhasil dibuat, klik kanan nama project -> properties</p></li>
<li><p>Klik tab Build, kemudian aktifkan pilihan <code>Register for COM interop</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-02.png"></p>

<p>Mengaktifkan pilihan <code>Register for COM interop</code> akan menyebabkan assembly secara otomatis diregister oleh utility regasm.exe, ketika project dibuild/compile. Jadi, kita tidak perlu menjalankan regasm.exe secara manual via command prompt.</p></li>
</ol>


<p>Setelah project berhasil dibuat, kita akan menambahkan interface dan class konkretnya. Untuk contoh kali ini kita akan membuat fungsi terbilang yang biasanya digunakan dalam pembuatan aplikasi ritel.</p>

<p>Kita akan mulai dengan interface terlebih dulu.</p>

<h5>Membuat Interface dengan Attribut COM</h5>

<ol>
<li><p>Hapus class default (Class1)</p></li>
<li><p>Tambahkan sebuah interface dengan nama ITerbilang, kemudian tambahkan juga method abstractnya dengan nama TerbilangIndonesia</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-03.png"></p></li>
<li><p>Kemudian tambahkan attribut COM</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-04.png"></p>

<p>Attribut COM untuk interface terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code>. Attribut ini perlu kita tambahkan agar class library yang kita buat bisa dikenali oleh Crystal Report.</p>

<p>Untuk mendapatkan nilai GUID, bisa menggunakan tool GUID yang sudah disediakan oleh Visual Studio .NET. Tool ini bisa diaktifkan melalui menu <code>Tools -&gt; Create GUID</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-05.png"></p></li>
</ol>


<p>Setelah menyelesaikan pembuatan interface ITerbilang, kita lanjutkan dengan pembuatan class konkretnya.</p>

<h5>Membuat Class dengan Attribut COM</h5>

<ol>
<li><p>Tambahkan sebuah class dengan nama Terbilang. Class harus mengimplementasikan interface ITerbilang.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-06.png"></p>

<p>Karena class Terbilang mengimplementasikan interface ITerbilang, maka class Terbilang wajib mendefinisikan ulang (override) method TerbilangIndonesia.</p></li>
<li><p>Kemudian tambahkan Attribut COM</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-07.png"></p>

<p>Attribut COM untuk class  terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code>. Setelah itu lengkapi kode method TerbilangIndonesia seperti berikut :</p>

<p><div><script src='https://gist.github.com/34337e1baec374270fb4.js'></script>
<noscript><pre><code>[ComVisible(true), ClassInterface(ClassInterfaceType.None), Guid(&quot;BA626A6E-0AA9-45C9-AA47-2E9674406A75&quot;)]
public class Terbilang : ITerbilang
{
 public string TerbilangIndonesia(int nominal)
 {
     string strTot = string.Empty;
     string urai = string.Empty;
     string strJmlHuruf = string.Empty;
     string bil1 = string.Empty;
     string bil2 = string.Empty;</p>

<pre><code> int y = 0;
 int x = 0;
 int z = 0;

 strJmlHuruf = Convert.ToString(nominal);

 urai = string.Empty;
 while (x &amp;lt; strJmlHuruf.Length)
 {
     x++;
     strTot = strJmlHuruf.Substring(x - 1, 1);
     y = y + Convert.ToInt32(strTot);
     z = strJmlHuruf.Length - x + 1;
     switch (Convert.ToInt32(strTot))
     {
         case 1:
             if ((z == 1 | z == 7 | z == 10 | z == 13))
             {
                 bil1 = &amp;quot;SATU &amp;quot;;
             }
             else if ((z == 4))
             {
                 if ((x == 1))
                 {
                     bil1 = &amp;quot;SE&amp;quot;;
                 }
                 else
                 {
                     bil1 = &amp;quot;SATU &amp;quot;;
                 }
             }
             else if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
             {
                 x = x + 1;
                 strTot = strJmlHuruf.Substring(x - 1, 1);
                 z = strJmlHuruf.Length - x + 1;
                 bil2 = string.Empty;
                 switch (Convert.ToInt32(strTot))
                 {
                     case 0:
                         bil1 = &amp;quot;SEPULUH &amp;quot;;
                         break;
                     case 1:
                         bil1 = &amp;quot;SEBELAS &amp;quot;;
                         break;
                     case 2:
                         bil1 = &amp;quot;DUA BELAS &amp;quot;;
                         break;
                     case 3:
                         bil1 = &amp;quot;TIGA BELAS &amp;quot;;
                         break;
                     case 4:
                         bil1 = &amp;quot;EMPAT BELAS &amp;quot;;
                         break;
                     case 5:
                         bil1 = &amp;quot;LIMA BELAS &amp;quot;;
                         break;
                     case 6:
                         bil1 = &amp;quot;ENAM BELAS &amp;quot;;
                         break;
                     case 7:
                         bil1 = &amp;quot;TUJUH BELAS &amp;quot;;
                         break;
                     case 8:
                         bil1 = &amp;quot;DELAPAN BELAS &amp;quot;;
                         break;
                     case 9:
                         bil1 = &amp;quot;SEMBILAN BELAS &amp;quot;;
                         break;
                 }
             }
             else
             {
                 bil1 = &amp;quot;SE&amp;quot;;
             }
             break;
         case 2:
             bil1 = &amp;quot;DUA &amp;quot;;
             break;
         case 3:
             bil1 = &amp;quot;TIGA &amp;quot;;
             break;
         case 4:
             bil1 = &amp;quot;EMPAT &amp;quot;;
             break;
         case 5:
             bil1 = &amp;quot;LIMA &amp;quot;;
             break;
         case 6:
             bil1 = &amp;quot;ENAM &amp;quot;;
             break;
         case 7:
             bil1 = &amp;quot;TUJUH &amp;quot;;
             break;
         case 8:
             bil1 = &amp;quot;DELAPAN &amp;quot;;
             break;
         case 9:
             bil1 = &amp;quot;SEMBILAN &amp;quot;;
             break;
         default:
             bil1 = string.Empty;
             break;
     }

     if ((Convert.ToInt32(strTot) &amp;gt; 0))
     {
         if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
         {
             bil2 = &amp;quot;PULUH &amp;quot;;
         }
         else if ((z == 3 | z == 6 | z == 9 | z == 12 | z == 15))
         {
             bil2 = &amp;quot;RATUS &amp;quot;;
         }
         else
         {
             bil2 = string.Empty;
         }
     }
     else
     {
         bil2 = string.Empty;
     }

     if ((y &amp;gt; 0))
     {
         switch (z)
         {
             case 4:
                 bil2 = bil2 + &amp;quot;RIBU &amp;quot;;
                 y = 0;
                 break;
             case 7:
                 bil2 = bil2 + &amp;quot;JUTA &amp;quot;;
                 y = 0;
                 break;
             case 10:
                 bil2 = bil2 + &amp;quot;MILYAR &amp;quot;;
                 y = 0;
                 break;
             case 13:
                 bil2 = bil2 + &amp;quot;TRILYUN &amp;quot;;
                 y = 0;
                 break;
         }
     }
     urai = urai + bil1 + bil2;
 }

 return urai.ToLower() + &amp;quot;rupiah&amp;quot;;
</code></pre>

<p> }
}</code></pre></noscript></div></p></li>
</ol>


<p>Langkah berikutnya adalah mengeset Strong-Name key, ini adalah peraturan berikutnya yang harus kita ikuti agar class <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> yang sudah kita buat bisa di daftarkan ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>.</p>

<h5>Mengeset Strong-Name key</h5>

<ol>
<li><p>Klik kanan project -> Properties</p></li>
<li><p>Aktifkan tab signing, kemudian aktifkan pilihan <code>Sign the assembly</code></p></li>
<li><p>Pada pilihan combo <code>Choose a string name key file</code>, pilih &lt;New…> setelah itu akan tampil dialog <code>Create Strong Name Key</code> kemudian isikan nilai input key file name, misal dengan nama <code>CRUFLCrystalReportHelperKey</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-08.png"></p></li>
<li><p>Terakhir lakukan proses Build/Compile, melalui menu Build -> Build Solution</p></li>
</ol>


<h5>Mendaftarkan Assembly ke GAC(Global Assembly Cache)</h5>

<p>Hasil build/compile dari project <code>CRUFLCrystalReportHelper</code>, akan menghasilkan file dengan ekstensi .dll atau yang dikenal dengan istilah file Assembly. File ini harus kita daftarkan terlebih dulu ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> agar bisa dikenali oleh Crystal Report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-22.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-23.png"></p>

<p>Berikut langkah-langkah untuk mendaftarkan file Assembly ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> :</p>

<ol>
<li><p>Aktifkan Visual Studio Command Prompt sesuai dengan versi Visual Studio .NET Anda</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-09.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-10.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-11.png"></p></li>
<li><p>Gunakan tool <code>gacutil</code>, dengan format perintah seperti berikut</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if &lt;Assembly Name></span></code></pre></td></tr></table></div></figure></p>

<p> contoh :</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if CRUFLCrystalReportHelper.dll</span></code></pre></td></tr></table></div></figure></p>

<p> <img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-12.png"></p>

<p> Jika berhasil akan tampil pesan <code>Assembly successfully added to the cache</code>.</p></li>
</ol>


<h5>Testing User Function Library</h5>

<p>Setelah menyelesaikan project CRUFLCrystalReportHelper dan mendaftarkannya ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>, kita akan menambahkan project baru dengan tipe WinForm Application.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-13.png"></p>

<p>Setelah itu tambahkan juga item Crystal Report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-14.png"></p>

<p>Kemudian desain reportnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-15.png"></p>

<p>Selanjutnya kita akan menambahkan formula baru dengan nama <code>terbilang</code>, caranya dengan mengklik kanan <code>Formula Fields</code> -> New …</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-17.png"></p>

<p>Setelah itu akan tampil dialog Formula Workshop</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-18.png"></p>

<p>Fungsi terbilang <code>TerbilangIndonesia</code> yang sudah kita buat masuk ke dalam kelompok <code>Additional Functions</code> -> <code>COM and .NET UFLs (u212com.dll)</code>. Fungsi ini membutuhkan parameter nominal yang nilainya kita isi dengan field total dari tabel Jual.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-19.png"></p>

<p>Kemudian tambahkan formula <code>terbilang</code> ke dalam report.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-20.png"></p>

<p>Terakhir kita running project, dan lihat hasil dari formula terbilangnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/03/260316-21.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUFLforCR">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit of Work Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/"/>
    <updated>2016-02-24T10:24:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Kalau sudah membahas <a href="http://coding4ever.net/blog/categories/repository-pattern/">Repository Pattern</a> rasanya kurang <code>manteb</code> jika tidak membahas <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work Pattern</a>, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak <em>&ldquo;ibarat sop ayam tanpa garam,  rasanya hambar&rdquo;</em> he he :D</p>

<p><a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan.
Jadi cara kerja <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> ini mirip dengan salah satu fitur andalan <a href="https://en.wikipedia.org/wiki/Category:Database_management_systems">DBMS</a> yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</p>

<!-- more -->


<p><a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> sendiri merupakan salah satu pattern <code>kesukaan</code> Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a>. Bagi Anda yang sudah pernah mencoba <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a>.</p>

<h5>Membuat Interface dan Class Konkret Unit of Work</h5>

<p>Sama seperti pembahasan <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, impelmentasi <a href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> juga disarankan menggunakan <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>.</p>

<p>Berdasarkan contoh project <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita akan menambahkan interface baru dengan nama <code>IUnitOfWork</code>. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/240216-01.png"></p>

<p>Setelah itu kita buatkan class konkretnya dengan nama <code>UnitOfWork</code>, dan ingat class ini harus mengimplementasikan interface <code>IUnitOfWork</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/240216-02.png"></p>

<p>Terakhir kita lengkapi kode class UnitOfWork seperti berikut :</p>

<div><script src='https://gist.github.com/c21f5beec8837a044f37.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Repository.Api;
using System.Data;

namespace Northwind.Repository.Service
{
    public class UnitOfWork : IUnitOfWork
    {
        private IDapperContext _context;
        private IDbTransaction _transaction;
        private ICategoryRepository _categoryRepository;
        private IProductRepository _productRepository;

        public UnitOfWork(IDapperContext context)
        {
            this._context = context;            
        }

        public ICategoryRepository CategoryRepository
        {
            get { return _categoryRepository ?? (_categoryRepository = new CategoryRepository(_transaction, _context)); }
        }

        public IProductRepository ProductRepository
        {
            get { return _productRepository ?? (_productRepository = new ProductRepository(_transaction, _context)); }
        }

        public void BeginTransaction()
        {
            if (_transaction != null)
                throw new NullReferenceException(&quot;Not finished previous transaction&quot;);

            _transaction = _context.db.BeginTransaction();
        }

        public void Commit()
        {
            if (_transaction == null)
                throw new NullReferenceException(&quot;Tryed commit not opened transaction&quot;);

            _transaction.Commit();
        }
    }
}</code></pre></noscript></div>


<h5>Testing Class Unit of Work</h5>

<p>Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> menggunakan <a href="http://coding4ever.net">Unit of Work Pattern</a>.</p>

<div><script src='https://gist.github.com/af692dd1962816fab878.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class UnitOfWorkTest
    {
        static void Main(string[] args)
        {
            using (IDapperContext context = new DapperContext())
            {
                // buat objek unit of work
                IUnitOfWork uow = new UnitOfWork(context);

                var result = 0;

                uow.BeginTransaction(); // mulai transaction

                // buat objek category
                var category = new Category
                {
                    CategoryName = &quot;Condiments&quot;,
                    Description = &quot;Sweet and savory sauces, relishes, and seasonings&quot;
                };
                result = uow.CategoryRepository.Save(category); // simpan data category
                Console.WriteLine(&quot;Tambah data category {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                // buat objek product
                var product = new Product
                {
                    CategoryID = category.CategoryID,
                    ProductName = &quot;Genen Shouyu&quot;,
                    QuantityPerUnit = &quot;24 - 250 ml bottles&quot;,
                    UnitPrice = 15.5,
                    UnitsInStock = 50
                };
                result = uow.ProductRepository.Save(product); // simpan data product
                Console.WriteLine(&quot;Tambah data product {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                uow.Commit(); // commit, simpan data secara permanen ke database
            }

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }        
    }
}</code></pre></noscript></div>


<p>Selamat <a href="https://github.com/k4m4r82/UnitOfWorkPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/logo-net.png" width="130" height="130">Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="http://coding4ever.net">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper.NET</a>, <a href="http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-01.png"></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-021.png"></p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-101.png"></p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-03.png"></p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<div><script src='https://gist.github.com/bd6bbf861f46082851c7.js'></script>
<noscript><pre><code>namespace Northwind.Model
{
    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }
        public string Description { get; set; }
    }
}</code></pre></noscript></div>


<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-04.png"></p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-061.png"></p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<div><script src='https://gist.github.com/05123acda602dd1bdc47.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public Category GetByID(int categoryId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            throw new NotImplementedException();
        }

        public int Save(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Category obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/d876476ffa10fa9855d2.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        public Product GetByID(int productId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetByName(string productName)
        {
            throw new NotImplementedException();
        }

        public int Save(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Product obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>


<p>Kemudian lengkapi kodenya seperti berikut :</p>

<div><script src='https://gist.github.com/4513c85d1541f0321204.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        private IDapperContext _context;
        private string _sql;

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description
                         FROM Categories
                         WHERE CategoryID = @categoryId&quot;;
                
                category = _context.db.Query&lt;Category&gt;(_sql, new { categoryId })
                                   .SingleOrDefault();
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         WHERE CategoryName LIKE @categoryName
                         ORDER BY CategoryName&quot;;
                
                categoryName = string.Format(&quot;%{0}%&quot;, categoryName);
                listOfCategory = _context.db.Query&lt;Category&gt;(_sql, new { categoryName })
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         ORDER BY CategoryName&quot;;

                listOfCategory = _context.db.Query&lt;Category&gt;(_sql)
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Categories (CategoryID, CategoryName, Description)
                         VALUES (@CategoryID, @CategoryName, @Description)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Categories SET CategoryName = @CategoryName, Description = @Description)
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Categories
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/87ba9b6fe43275c1f59c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        private IDapperContext _context;
        private string _sql;

        private Product MappingRecordToObj(string sql, object param = null)
        {
            var product = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).SingleOrDefault();

            return product;
        }

        private IList&lt;Product&gt; MappingRecordToList(string sql, object param = null)
        {
            var listOfProduct = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).ToList();

            return listOfProduct;
        }

        public Product GetByID(int productId)
        {
            Product product = null;

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductID = @productId&quot;;

                product = MappingRecordToObj(_sql, new { productId });
            }
            catch
            {
            }

            return product;
        }        

        public IList&lt;Product&gt; GetByName(string productName)
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductName LIKE @productName
                         ORDER BY Products.ProductName&quot;;

                productName = string.Format(&quot;%{0}%&quot;, productName);
                listOfProduct = MappingRecordToList(_sql, new { productName });
            }
            catch
            {
            }

            return listOfProduct;
        }

        public IList&lt;Product&gt; GetAll()
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         ORDER BY Products.ProductName&quot;;

                listOfProduct = MappingRecordToList(_sql);
            }
            catch
            {
            }

            return listOfProduct;
        }

        public int Save(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Products (ProductID, ProductName, QuantityPerUnit, UnitPrice, UnitsInStock)
                         VALUES (@ProductID, @ProductName, @QuantityPerUnit, @UnitPrice, @UnitsInStock)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Products SET ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, 
                         UnitPrice = @UnitPrice, UnitsInStock = @UnitsInStock
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Products
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>


<h5>Membuat Class Context</h5>

<p>Di dalam <a href="http://coding4ever.net/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="http://coding4ever.net/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-07.png"></p>

<div><script src='https://gist.github.com/207b5c995e267c01d5c4.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Data;
using System.Data.Common;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class DapperContext : IDapperContext
    {
        private readonly string _providerName;
        private readonly string _connectionString;
        private IDbConnection _db;

        public DapperContext()
        {
            var dbName = System.IO.Directory.GetCurrentDirectory() + &quot;\\Northwind.db&quot;;

            _providerName = &quot;System.Data.SQLite&quot;;
            _connectionString = &quot;Data Source=&quot; + dbName;
        }

        private IDbConnection GetOpenConnection(string providerName, string connectionString)
        {
            DbConnection conn = null;

            try
            {
                DbProviderFactory provider = DbProviderFactories.GetFactory(providerName);
                conn = provider.CreateConnection();
                conn.ConnectionString = connectionString;
                conn.Open();
            }
            catch
            {
            }

            return conn;
        }

        public IDbConnection db
        {
            get { return _db ?? (_db = GetOpenConnection(_providerName, _connectionString)); }
        }

        public void Dispose()
        {
            if (_db != null)
            {
                try
                {
                    if (_db.State != ConnectionState.Closed)
                        _db.Close();
                }
                finally
                {
                    _db.Dispose();
                }
            }

            GC.SuppressFinalize(this);
        }
    }
}</code></pre></noscript></div>


<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-08.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/210216-09.png"></p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<div><script src='https://gist.github.com/ac5519310e9154830f1c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class CategoryRepositoryTest
    {
        // deklarsi objek repository
        static ICategoryRepository _repository;

        static void Main(string[] args)
        {
            // buat objek context
            IDapperContext context = new DapperContext();

            // buat objek repository
            _repository = new CategoryRepository(context);

            GetAllTest();
            SaveTest();
            UpdateTest();
            DeleteTest();

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }

        static void GetAllTest()
        {
            var listOfCategory = _repository.GetAll();
            foreach (var category in listOfCategory)
            {
                Console.WriteLine(&quot;{0}, {1}, {2}&quot;, category.CategoryID, category.CategoryName, category.Description);
            }
        }

        static void SaveTest()
        {
            var category = new Category
            {
                CategoryName = &quot;Seafood&quot;,
                Description = &quot;Seaweed and fish&quot;
            };

            var result = _repository.Save(category);
            Console.WriteLine(&quot;Tambah data baru {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void UpdateTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            category.CategoryName = &quot;Seaweed and fish&quot;;
            category.Description = &quot;Seafood&quot;;

            var result = _repository.Update(category);
            Console.WriteLine(&quot;Update data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void DeleteTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            var result = _repository.Delete(category);
            Console.WriteLine(&quot;Menghapus data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }        
    }
}</code></pre></noscript></div>


<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengembangan Aplikasi Real-time Menggunakan SignalR Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/"/>
    <updated>2016-02-15T07:49:15+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/signalr.png" width="120" height="100">Dasar-dasar penggunaan <a href="http://signalr.net/">SignalR</a>, sudah saya bahas dipostingan <a href="http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/">pertama</a>. Jadi dipostingan <a href="http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">kedua</a> ini saya hanya ingin berbagai source code lain contoh penggunaan <a href="http://signalr.net/">SignalR</a> yaitu source code untuk aplikasi pemesanan <a href="http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">tiket real-time</a>.</p>

<p>Cara kerja aplikasi ini masih sederhana sekali yaitu hanya mengirimkan informasi nomor kursi yang dipilih oleh user ke server, kemudian server akan melakukan pengiriman (push) nomor kursi yang dipesan kepada semua client yang sudah terkoneksi ke server.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/150216-01.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoSignalR2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menggunakan Objek Collection Dan Transaction Pada Visual Basic 6]]></title>
    <link href="http://coding4ever.net/blog/2016/02/11/menggunakan-objek-collection-dan-transaction-pada-visual-basic-6/"/>
    <updated>2016-02-11T05:44:47+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/11/menggunakan-objek-collection-dan-transaction-pada-visual-basic-6</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/visualbasic6.jpg" width="120" height="100">Lagi kangen :-D, udah lama enggak posting tentang <a href="http://coding4ever.net/blog/categories/visual-basic/">Visual Basic 6</a>. Terakhir nulis sekitar <a href="http://coding4ever.net/blog/categories/visual-basic/">3-4 tahun</a> yang lalu he he :-D.</p>

<p>Kali ini saya ingin membahas salah satu poin <code>penting</code> tetapi sering kali disepelekan ketika akan membuat aplikasi bisnis yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>. Padahal fitur ini sangat penting untuk menjaga konsistensi data, karena hampir bisa dipastikan semua aplikasi bisnis menggunakan skema header-detail.</p>

<!-- more -->


<p>Salah satu poin penting dari <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> adalah <a href="http://en.wikipedia.org/wiki/Atomicity_%28database_systems%29">atomic</a>, yaitu beberapa perintah dianggap sebagai satu kesatuan. Kalau satu gagal, yang lain juga harus dibatalkan.</p>

<p>Contoh pada saat terjadi order penjualan proses yang terjadi adalah :</p>

<ol>
<li>Insert 1 kali ke tabel Order</li>
<li>Insert n kali ke tabel OrderDetail</li>
<li>Mengurangi stok barang (tidak di bahas di postingan ini), karena bisa juga diselesaikan dengan database trigger</li>
</ol>


<p>Ketika insert ke tabel OrderDetail gagal, maka tabel Ordernya juga harus di batalkan (undo), klo enggak ya datanya jadi enggak konsisten, karena ada nota Order yang enggak ada OrderDetailnya.</p>

<p>Nah utk mempermudah proses <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>  ini kita bisa menggunakan objek collection untuk menyimpan objek OrderDetail yang kemudian kita binding ke objek Ordernya. Berhubung <a href="http://coding4ever.net/blog/categories/visual-basic/">Visual Basic 6</a> tidak mempunyai class collection yang sepadan dengan class collection yang ada di Visual Basic .NET atau bahasa pemrograman .NET lainnya, sebagai gantinya kita bisa menggunakan class <code>Scripting.Dictionary</code>. Tetapi untuk menggunakan class <code>Scripting.Dictionary</code> ini kita harus menambahkan referensi <code>Microsoft Scripting Runtime</code> terlebih dulu.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/100216-05.png"></p>

<p>Dengan asumsi database berikut tabelnya sudah tersedia, langkah berikutnya adalah membuat class <code>Order</code> dan <code>OrderDetail</code>. Kedua class ini dikenal dengan istilah class model, yaitu class-class yang merupakan representasi dari tabel-tabel yang ada di database.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/100216-01.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/100216-02.png"></p>

<p>Nah class-class model ini biasanya mempunyai beberapa property yang juga merupakan representasi field-field yang ada di dalam tabel.</p>

<div><script src='https://gist.github.com/b374ccae1ccd75e58f17.js'></script>
<noscript><pre><code>&#39; tambahkan referensi Microsoft Scripting Runtime
Option Explicit

Private mOrderID            As Long
Private mCustomerID         As String
Private mOrderDate          As String
Private mShipName           As String
Private mShipAddress        As String
Private mListOfOrderDetail  As Scripting.Dictionary

Public Property Let orderID(ByVal vData As Long)
    mOrderID = vData
End Property
Public Property Get orderID() As Long
    orderID = mOrderID
End Property

Public Property Let customerID(ByVal vData As String)
    mCustomerID = vData
End Property
Public Property Get customerID() As String
    customerID = mCustomerID
End Property

Public Property Let orderDate(ByVal vData As String)
    mOrderDate = vData
End Property
Public Property Get orderDate() As String
    orderDate = mOrderDate
End Property

Public Property Let shipName(ByVal vData As String)
    mShipName = vData
End Property
Public Property Get shipName() As String
    shipName = mShipName
End Property

Public Property Let shipAddress(ByVal vData As String)
    mShipAddress = vData
End Property
Public Property Get shipAddress() As String
    shipAddress = mShipAddress
End Property

Public Property Let listOfOrderDetail(ByVal vData As Scripting.Dictionary)
    Set mListOfOrderDetail = vData
End Property

Public Property Get listOfOrderDetail() As Scripting.Dictionary
    Set listOfOrderDetail = mListOfOrderDetail
End Property</code></pre></noscript></div>




<div><script src='https://gist.github.com/52d180a02053e56fae2b.js'></script>
<noscript><pre><code>Option Explicit

Private mOrderID        As Long
Private mProductID      As Long
Private mUnitPrice      As Double
Private mQuantity       As Integer
Private mDiscount       As Single

Public Property Let orderID(ByVal vData As Long)
    mOrderID = vData
End Property
Public Property Get orderID() As Long
    orderID = mOrderID
End Property

Public Property Let productID(ByVal vData As Long)
    mProductID = vData
End Property
Public Property Get productID() As Long
    productID = mProductID
End Property

Public Property Let unitPrice(ByVal vData As Double)
    mUnitPrice = vData
End Property
Public Property Get unitPrice() As Double
    unitPrice = mUnitPrice
End Property

Public Property Let quantity(ByVal vData As Integer)
    mQuantity = vData
End Property
Public Property Get quantity() As Integer
    quantity = mQuantity
End Property

Public Property Let discount(ByVal vData As Single)
    mDiscount = vData
End Property
Public Property Get discount() As Single
    discount = mDiscount
End Property</code></pre></noscript></div>


<p>Setelah class-class model selesai dibuat, untuk urusan <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>-nya kita buat class tersendiri atau yang dikenal dengan istilah class-class <a href="http://coding4ever.net/blog/2011/09/08/implementasi-konsep-data-access-object-dao-di-vb-6/">DAO</a> atau <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/100216-03.png"></p>

<p>Class <a href="http://coding4ever.net/blog/2011/09/08/implementasi-konsep-data-access-object-dao-di-vb-6/">DAO</a> ini biasanya berisi method-method standar seperti Save, Update, Delete dan Get. Tapi untuk contoh kali ini saya hanya menambahkan method Save. Karena kita ingin insert ke tabel Order dan OrderDetail dianggap sebagai satu kesatuan, maka diterapkanlah konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> dengan menambahkan perintah-perintah <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> seperti <code>BeginTrans</code>, <code>CommitTrans</code> dan <code>RollbackTrans</code>.</p>

<div><script src='https://gist.github.com/41b8f6f9570100a2dc98.js'></script>
<noscript><pre><code>Option Explicit

Private dbConn  As DbConnection
Private conn    As ADODB.Connection
Private strSql  As String

Private Sub Class_Initialize()
    Set dbConn = New DbConnection
    Set conn = dbConn.GetOpenConnection
End Sub

Public Function Save(ByVal objOrder As Order) As Integer
    Dim cmd             As ADODB.Command
    Dim key             As Variant
    Dim objItemOrder    As OrderDetail
    
    On Error GoTo errHandle

    conn.BeginTrans &#39; begin transaction
    
    &#39; insert header
    strSql = &quot;INSERT INTO Orders (OrderID, CustomerID, OrderDate, ShipName, ShipAddress) &quot; &amp; _
             &quot;VALUES (?, ?, ?, ?, ?)&quot;
    Set cmd = New ADODB.Command
    With cmd
        .ActiveConnection = conn
        .CommandType = adCmdText
        .CommandText = strSql
        .Prepared = True
        
        .Parameters(0) = objOrder.orderID
        .Parameters(1) = objOrder.customerID
        .Parameters(2) = objOrder.orderDate
        .Parameters(3) = objOrder.shipName
        .Parameters(4) = objOrder.shipAddress

        .Execute
    End With
    Set cmd = Nothing

    &#39; insert detail
    strSql = &quot;INSERT INTO OrderDetails (OrderID, ProductID, UnitPrice, Quantity, Discount) &quot; &amp; _
             &quot;VALUES (?, ?, ?, ?, ?)&quot;

    For Each key In objOrder.listOfOrderDetail
        
        &#39; ekstrak objek item order
        Set objItemOrder = objOrder.listOfOrderDetail.Item(key)

        Set cmd = New ADODB.Command
        With cmd
            .ActiveConnection = conn
            .CommandType = adCmdText
            .CommandText = strSql
            .Prepared = True
            
            .Parameters(0) = objOrder.orderID
            .Parameters(1) = objItemOrder.productID
            .Parameters(2) = objItemOrder.unitPrice
            .Parameters(3) = objItemOrder.quantity
            .Parameters(4) = objItemOrder.discount
            
            .Execute
        End With
        Set cmd = Nothing
    Next

    conn.CommitTrans &#39; commit transaction
    
    Save = 1
    
    Exit Function

errHandle:
    conn.RollbackTrans &#39; error, rollback transaction
    Save = 0
End Function

Private Sub Class_Terminate()
    Call dbConn.CloseConnection(conn)
End Sub</code></pre></noscript></div>


<p>Nah klo kita perhatikan di bagian constructor (Class_Initialize), terdapat perintah untuk membuat objek Connection dengan memanggil method <code>GetOpenConnection</code> dari class <a href="https://gist.github.com/k4m4r82/de02c82aeceac1f83bd4">DbConnection</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/100216-04.png"></p>

<div><script src='https://gist.github.com/de02c82aeceac1f83bd4.js'></script>
<noscript><pre><code>Option Explicit

Public Function GetOpenConnection() As ADODB.Connection
    Dim conn    As ADODB.Connection
    Dim strCon  As String
            
    On Error GoTo errHandle
        
    strCon = &quot;DRIVER=SQLite3 ODBC Driver;Database=&quot; &amp; App.Path &amp; &quot;\db\Northwind.db;LongNames=0;Timeout=1000;NoTXN=0;SyncPragma=NORMAL;StepAPI=0&quot;
    
    Set conn = New ADODB.Connection
    conn.ConnectionString = strCon
    conn.Open
    
    Set GetOpenConnection = conn
    
    Exit Function
errHandle:
    &#39; do nothing
End Function

Public Sub CloseConnection(ByVal conn As ADODB.Connection)
    If Not conn Is Nothing Then
        If conn.State = adStateOpen Then conn.Close
        Set conn = Nothing
    End If
End Sub</code></pre></noscript></div>


<p>Setelah semua kodenya lengkap kita tinggal melakukan testing seperti berikut :</p>

<div><script src='https://gist.github.com/ff6696a7d94a1a3e6967.js'></script>
<noscript><pre><code>Option Explicit

Public Sub Main()
    &#39; buat objek Order
    Dim objOrder As New Order
    
    With objOrder
        .orderID = 123451
        .customerID = &quot;SUPRD&quot;
        .orderDate = &quot;2016-2-6&quot;
        .shipName = &quot;Que Delícia&quot;
        .shipAddress = &quot;Rua da Panificadora, 12&quot;
    End With
    
    &#39; buat objek OrderDetail
    &#39; objek #1
    Dim objItemOrder1 As New OrderDetail
    With objItemOrder1
        .productID = 11
        .unitPrice = 9.8
        .quantity = 10
        .discount = 0
    End With
    
    &#39; objek #2
    Dim objItemOrder2 As New OrderDetail
    With objItemOrder2
        .productID = 65
        .unitPrice = 16.8
        .quantity = 5
        .discount = 0.15
    End With
    
    &#39; objek #3
    Dim objItemOrder3 As New OrderDetail
    With objItemOrder3
        .productID = 212
        .unitPrice = 42.4
        .quantity = 15
        .discount = 0.25
    End With
    
    &#39; hubungkan objek item order ke objek order
    objOrder.listOfOrderDetail = New Scripting.Dictionary
    objOrder.listOfOrderDetail.Add 1, objItemOrder1
    objOrder.listOfOrderDetail.Add 2, objItemOrder2
    objOrder.listOfOrderDetail.Add 3, objItemOrder3
    
    Dim dao     As New OrderDao
    Dim result  As Integer
    
    result = dao.Save(objOrder)
    If result &gt; 0 Then
        Debug.Print &quot;Penyimpanan data order berhasil&quot;
    Else
        Debug.Print &quot;Penyimpanan data order gagal&quot;
    End If
End Sub</code></pre></noscript></div>


<p>Selamat <a href="https://github.com/k4m4r82/DemoTransactionVB6">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengembangan Aplikasi Real-time Menggunakan SignalR]]></title>
    <link href="http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/"/>
    <updated>2016-02-09T11:17:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/02/signalr.png" width="120" height="100"><a href="http://signalr.net/">ASP.NET  SignalR</a> atau  dapat  disingkat  menjadi  <a href="http://signalr.net/">SignalR</a>  adalah  library yang memudahkan kita untuk menambahkan fungsi komunikasi <code>real-time</code> pada aplikasi yang kita kembangkan. Fungsi <code>real-time</code> di sini adalah kemampuan server melakukan pengiriman (push) konten atau data kepada client yang  sudah  terkoneksi  ke  server, sehingga  server  tidak  perlu  menunggu  client  untuk melakukan permintaan (request) data terbaru.</p>

<p><a href="http://signalr.net/">SignalR</a> selain digunakan untuk pengembangan aplikasi web, juga bisa digunakan untuk platform lainnya seperti desktop (console dan windows form) ataupun mobile (windows phone, android dan iOS).</p>

<!-- more -->


<p><a href="http://signalr.net/">SignalR</a> menyediakan API yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau pun sebaliknya. Proses memanggil method secara remote ini dikenal dengan istilah <code>remote procedure call (RPC)</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-01.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-02.png"></p>

<p style="text-align:center">Sumber - <a href=" http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr" target="_blank">Introduction to SignalR</a></p>


<p>Pada gambar di atas Hub merupakan class turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code> yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Sedangkan Hub Proxy merupakan objek proxy dari class Hub yang ada di server, sehingga method yang dipanggil melalui objek proxy ini otomatis akan dieksekusi secara remote (dijalankan di sisi server).</p>

<p>Sebagai contoh penggunaan SignalR, kita akan membuat aplikasi sederhana tanpa database. Di contoh ini kita akan melihat bagaimana cara server dan client berbagi data secara <code>real-time</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-03.png"></p>

<p>Aplikasi di atas terdiri dari tiga project yaitu :</p>

<h5>1. DemoSignalR.WinFormServer</h5>

<p>Project ini bertipe Windows Application yang berfungsi sebagai Server dari SignalR</p>

<h5>2. DemoSignalR.WinFormClient</h5>

<p>Project ini juga bertipe Windows Application yang berfungsi sebagai aplikasi Client</p>

<h5>3. DemoSignalR.Model</h5>

<p>Terakhir adalah project DemoSignalR.Model, project ini bertipe Class Library yang isinya hanya berupa class model. Objek dari class model inilah nantinya akan dishare secara <code>real-time</code> dari server ke client atau sebaliknya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-04.png"></p>

<p>Berikutnya kita akan bahas satu persatu ketiga project di atas.</p>

<h5>1. DemoSignalR.WinFormServer</h5>

<p>Project ini berfungsi sebagai server dari SignalR. Untuk menggunakan SignalR kita perlu menambahkan beberapa library yang bisa kita install via <a href="http://coding4ever.net/blog/2014/03/11/nuget/">NuGet</a>.</p>

<p>Berikut adalah daftar paket <a href="http://coding4ever.net/blog/2014/03/11/nuget/">NuGet</a> yang perlu kita tambahkan untuk project server.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-05.png"></p>

<h6>SignalR Hubs API</h6>

<p>SignalR Hubs API memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Proses memanggil method secara remote ini dikenal dengan istilah <code>remote procedure call (RPC)</code>.</p>

<p>Di server kita mendefinisikan method yang bisa langsung dipanggil oleh client, kemudian di dalam method ini akan memanggil method yang dijalankan oleh client. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-06.png"></p>

<p>Coba perhatikan kode di atas, method <code>AddCustomer</code> adalah method server yang kita definisikan dan bisa langsung dipanggil oleh client. Nah di dalam method ini juga ada perintah <code>Clients.All.RefreshData(customer)</code>. Method <code>RefreshData</code> setelah property <code>All</code> adalah <code>dynamic method</code>, sehingga kita bebas menentukan sendiri nama methodnya. Dan jangan lupa method <code>RefreshData</code> ini juga harus kita definisikan ulang di bagian client.</p>

<p>Untuk menggunakan fitur SignalR Hubs API kita cukup membuat sebuah class yang merupakan turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code>. Misal kita membuat sebuah class dengan nama <code>ServerHub</code>, class ini harus turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code>. Untuk kode lengkapnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-08.png"></p>

<h6>Mendaftarkan SignalR</h6>

<p><a href="http://signalr.net/">SignalR</a> itu seperti parasit, tidak bisa hidup mandiri sehingga membutuhkan sebuah wadah (host) untuk kelangsungan hidupnya.
Ada beberapa cara yang bisa digunakan untuk menempatkan SignalR ke dalam wadahnya (host) yaitu :</p>

<ul>
<li>Hosting in Internet Information Services (IIS)</li>
<li>Hosting in a Console or Desktop application (Self hosting)</li>
<li>Hosting in a Windows Service (Self hosting)</li>
</ul>


<p>Karena contoh Server SignalR yang kita buat di atas bertipe Windows Application, berarti kita menggunakan cara <code>Self hosting</code> untuk meng-hostkan SignalR. Untuk mengaktifkan fitur <code>Self hosting</code> kita perlu menambahkan library <code>Microsoft.AspNet.SignalR.SelfHost</code> dan <code>Microsoft.AspNet.Cors</code>, kemudian kita buat class baru dengan nama <code>Startup</code>. Untuk kode lengkapnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-09.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-10.png"></p>

<p>Setelah membuat class <code>ServerHub</code> dan <code>Startup</code> kita lanjutkan dengan form utama (FrmServer). Untuk desain UInya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-11.png"></p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<div><script src='https://gist.github.com/63391d8f511049303b20.js'></script>
<noscript><pre><code>using Microsoft.Owin.Hosting;

namespace DemoSignalR.WinFormServer
{
    public partial class FrmServer : Form
    {
        private IDisposable signalR { get; set; }
        private const string SERVER_URL = &quot;http://192.168.56.1:8282&quot;;

        public FrmServer()
        {
            InitializeComponent();
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            WriteToConsole(&quot;Starting server...&quot;);

            btnStart.Enabled = false;
            Task.Run(() =&gt; StartServer());
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// &lt;summary&gt;
        /// Starts the server and checks for error thrown when another server is already 
        /// running. This method is called asynchronously from Button_Start.
        /// &lt;/summary&gt;
        private void StartServer()
        {
            try
            {
                signalR = WebApp.Start(SERVER_URL);
            }
            catch (TargetInvocationException)
            {
                WriteToConsole(&quot;Server failed to start. A server is already running on &quot; + SERVER_URL);

                //Re-enable button to let user try to start server again
                this.Invoke((Action)(() =&gt; btnStart.Enabled = true));
                return;
            }

            this.Invoke((Action)(() =&gt; btnStop.Enabled = true));
            WriteToConsole(&quot;Server started at &quot; + SERVER_URL);
        }

        /// &lt;summary&gt;
        /// This method adds a line to the RichTextBoxConsole control, using Invoke if used
        /// from a SignalR hub thread rather than the UI thread.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;message&quot;&gt;&lt;/param&gt;
        internal void WriteToConsole(String message)
        {
            if (lstConsole.InvokeRequired)
            {
                this.Invoke((Action)(() =&gt;
                    WriteToConsole(message)
                ));

                return;
            }

            lstConsole.Items.Add(message);
        }       

        private void FrmServer_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (signalR != null)
            {
                signalR.Dispose();
            }
        }
    }
}
</code></pre></noscript></div>


<p>Setelah menyelesaikan project Server (DemoSignalR.WinFormServer) kita lanjutkan dengan project DemoSignalR.Model.</p>

<h5>2. DemoSignalR.Model</h5>

<p>Project ini hanya berisi class-class model. Data atau objek dari class-class model inilah yang nantinya akan dishare oleh server dan client secara <code>real-time</code>. Sebagai contoh di project ini kita hanya menambahkan satu class model yaitu <code>Customer</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-12.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-13.png"></p>

<p>Class Customer di atas masuk dalam kategori  <code>complex types</code> sehingga objek dari class Customer tersebut tidak bisa langsung dikirim dari client ke server atau sebaliknya. Perlu diketahui untuk tipe-tipe data primitif seperti integer, long, boolean termasuk string (pengecualian untuk string bukan tipe data primitif) bisa langsung dikirim dari client ke server atau sebaliknya. Khusus untuk objek dari <code>complex types</code> perlu kita konversi terlebih dulu datanya dalam format json.</p>

<p>Ada dua cara yang bisa kita gunakan yaitu :</p>

<ul>
<li><p>Menambahkan atribut <code>JsonProperty</code> pada property class
<img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-14.png"></p></li>
<li><p>Atau mengkonversi secara langsung objek class ke dalam format json<br/>
<img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-15.png"></p></li>
</ul>


<p>Jadi terserah Anda mau menggunakan cara yang mana.</p>

<h5>3. DemoSignalR.WinFormClient</h5>

<p>Project terakhir yang akan kita bahas adalah <code>DemoSignalR.WinFormClient</code> ini adalah project untuk Client SignalR, tipenya juga sama seperti project Server SignalR yaitu Windows Application.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-16.png"></p>

<p>Untuk menggunakan SignalR di sisi client kita perlu menambahkan beberapa library yang bisa kita install via <a href="http://coding4ever.net/blog/2014/03/11/nuget/">NuGet</a>.</p>

<p>Berikut adalah daftar paket <a href="http://coding4ever.net/blog/2014/03/11/nuget/">NuGet</a> yang perlu kita tambahkan di project client.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-17.png"></p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<div><script src='https://gist.github.com/ded6ca2911696e0b752e.js'></script>
<noscript><pre><code>using Microsoft.AspNet.SignalR.Client;
using DemoSignalR.Model;

namespace DemoSignalR.WinFormClient
{
    public partial class FrmClient : Form
    {
        private const string SERVER_URL = &quot;http://192.168.56.1:8282&quot;;

        private HubConnection hubConnection;
        private IHubProxy hubProxy;

        public FrmClient()
        {
            InitializeComponent();

            InisialisasiListView();

            hubConnection = new HubConnection(SERVER_URL);
            
            // membuat objek proxy dari class hub yang ada di server
            hubProxy = hubConnection.CreateHubProxy(&quot;ServerHub&quot;);

            // set mode listen untuk method RefreshData
            // method RefreshData sebelumnya harus didefinisikan di server
            hubProxy.On&lt;Customer&gt;(&quot;RefreshData&quot;, (customer) =&gt; RefreshData(customer));
            ConnectAsync();
        }

        private void RefreshData(Customer customer)
        {
            lvwCustomer.Invoke(new MethodInvoker(() =&gt; FillToListView(customer)));
        }

        /// &lt;summary&gt;
        /// Creates and connects the hub connection and hub proxy.
        /// &lt;/summary&gt;
        private async void ConnectAsync()
        {
            try
            {
                await hubConnection.Start();
                btnSave.Enabled = true;
            }
            catch
            {
                MessageBox.Show(&quot;Unable to connect to server: Start server before connecting clients.&quot;);
                return;
            }

        }

        // pengaturan propery listview
        private void InisialisasiListView()
        {
            lvwCustomer.View = System.Windows.Forms.View.Details;
            lvwCustomer.FullRowSelect = true;
            lvwCustomer.GridLines = true;

            lvwCustomer.Columns.Add(&quot;No.&quot;, 30, HorizontalAlignment.Center);
            lvwCustomer.Columns.Add(&quot;Customer Id&quot;, 70, HorizontalAlignment.Left);
            lvwCustomer.Columns.Add(&quot;Company Name&quot;, 150, HorizontalAlignment.Left);
            lvwCustomer.Columns.Add(&quot;Contact Name&quot;, 155, HorizontalAlignment.Left);
        }

        // method untuk menampilkan data customer ke listview
        private void FillToListView(Customer customer)
        {
            int noUrut = lvwCustomer.Items.Count + 1;

            ListViewItem item = new ListViewItem(noUrut.ToString());
            item.SubItems.Add(customer.CustomerId);
            item.SubItems.Add(customer.CompanyName);
            item.SubItems.Add(customer.ContactName);

            lvwCustomer.Items.Add(item);
        }

        private void FrmClient_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (hubConnection != null)
            {
                hubConnection.Stop();
                hubConnection.Dispose();
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            var customer = new Customer
            {
                CustomerId = txtCustomerId.Text,
                CompanyName = txtCompanyName.Text,
                ContactName = txtContactName.Text
            };

            // invoking a server function: 
            hubProxy.Invoke(&quot;AddCustomer&quot;, customer);
        }
    }
}
</code></pre></noscript></div>


<p>Dan hasilnya adalah seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/02/090216-03.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoSignalR">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr">Introduction to SignalR</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/tutorial-getting-started-with-signalr">Getting Started with SignalR 2</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/tutorial-high-frequency-realtime-with-signalr">High-Frequency Realtime with SignalR 2</a></li>
<li><a href="http://www.asp.net/signalr">Learn About ASP.NET SignalR</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menghilangkan Tab Main Report Pada CrystalReportViewer]]></title>
    <link href="http://coding4ever.net/blog/2016/01/27/menghilangkan-tab-main-report-pada-crystalreportviewer/"/>
    <updated>2016-01-27T15:00:58+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/27/menghilangkan-tab-main-report-pada-crystalreportviewer</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg" width="120" height="100">Bagi Anda penggemar Crystal Reports .NET tentu sudah tidak asing lagi dengan tab <code>Main Report</code> yang tampil pada saat menampilkan laporan. Bagi sebagian orang seperti saya <em>tab</em> ini lumayan mengganggu karena biasanya report yang kita buat adalah report tunggal (report yang tidak me-link kehalaman yang lain).</p>

<p>Masih bingung ? Coba lihat gambar berikut.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-01.png"></p>

<p>Ada beberapa cara untuk menghilangkan tab tersebut, bisa dengan membuat sebuah <em>method biasa</em> atau dengan membuat <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx"><em>extension method</em></a>.</p>

<h5>Method biasa</h5>

<p>Nah cara pertama adalah dengan membuat sebuah method, misal dengan nama <code>RemoveMainTab</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-02.png"></p>

<p>kemudian method di atas kita panggil setelah pengesetan nilai property <code>ReportSource</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-03.png"></p>

<h5>Extension method</h5>

<p><a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">Extension method</a> adalah salah satu fitur yang ada dalam bahasa pemrograman .NET yang memungkinkan kita untuk menambahkan  method baru dari sebuah type seperti class tanpa harus membuat turunan dari type tesebut.</p>

<p>Contoh class <code>CrystalReportViewer</code>  aslinya tidak mempunyai method <code>RemoveMainTab</code> tetapi dengan adanya fitur  <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">extension method</a> kita bisa menambahkan method baru tanpa harus membuat turunan dari class <code>CrystalReportViewer</code> atau merubah secara langsung class <code>CrystalReportViewer</code>.</p>

<p>Untuk membuat <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">extension method</a> kita harus menambahkan class baru misal dengan nama <code>CrystalReportViewerExtension</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-04.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-05.png"></p>

<p>kemudian classnya harus static, setelah itu kita tambahkan method <code>RemoveMainTab</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-06.png"></p>

<p>Nah coba perhatikan method <code>RemoveMainTab</code> di atas, selain harus <code>static</code> parameternya juga harus ditambahkan keyword <code>this</code>.</p>

<p>Jika berhasil objek dari class <code>CrystalReportViewer</code> akan ketambahan method baru dengan nama <code>RemoveMainTab</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-07.png"></p>

<p>Terakhir kita cek reportnya apakah tab Main Report sudah hilang ?</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/270116-08.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/RemoveMainReportTabOnCRViewer">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Laporan Crystal Reports .NET Dengan Model Data-Push Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2/"/>
    <updated>2016-01-24T15:25:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg" width="120" height="100">Melanjutkan pembahasan tentang bagaimana cara mendesain laporan menggunakan Crystal Reports‎ .NET tanpa terhubung langsung ke database dengan memanfaatkan objek ADO.NET DataSet atau yang dikenal dengan istilah <a href="http://coding4ever.net/blog/2015/04/12/membuat-laporan-crystal-reports-net-dengan-model-data-push/">Push model</a>.</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-01.png"></p>

<p>Jika pada postingan <a href="http://coding4ever.net/blog/2015/04/12/membuat-laporan-crystal-reports-net-dengan-model-data-push/">sebelumnya</a> kita hanya menampilkan data dari sebuah tabel maka untuk <a href="http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2/">postingan</a> kali ini kita menampilkan data dari tiga buah tabel yang saling berhubungan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-02.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-03.png"></p>

<p>Persiapan tool-tool yang akan digunakan :</p>

<ol>
<li><a href="http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs#d-community">Visual Studio Community 2013</a>, Anda bisa saja menggunakan Visual Studio .NET versi sebelumnya (2010, 2012)</li>
<li><a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a>, untuk memudahkan dalam menambahkan library pihak ketiga. Adapun library pihak ketiga yang digunakan dalam sample ini adalah <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper .NET</a> dan <a href="http://www.nuget.org/packages/System.Data.SQLite.Core/">System.Data.SQLite Core</a></li>
<li><a href="http://scn.sap.com/docs/DOC-7824">Crystal Reports SP 13</a></li>
<li>Database <a href="http://www.sqlite.org/">SQLite</a></li>
</ol>


<p>Setelah semua tool yang dibutuhkan tersedia kita lanjutkan dengan pembuatan project :</p>

<ol>
<li><p>Buat project baru dengan type WinForm</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-04.png"></p></li>
<li><p>Tambahkan empat folder baru masing-masing dengan nama DataSet, Model, Repository dan Report</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-05.png"></p></li>
</ol>


<p>Folder DataSet digunakan untuk mengelompokkan item-item DataSet yang berfungsi sebagai tabel temporary, folder Model untuk mengelompokkan class-class model atau entity, folder <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository</a> untuk mengelompokkan class-class akses database dan terakhir folder Report untuk mengelompokkan item-item Crystal Reports.</p>

<h5>Class Model/Entity</h5>

<p>Untuk menerapkan konsep OOP (Object-oriented programming) dalam pemrograman database kita perlu membuat sebuah class yang disebut dengan istilah class Model atau Entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari membuat class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row dari tabel menjadi kumpulan objek (object collection).</p>

<p>Pemetaan bisa dilakukan secara manual atau bisa juga secara otomatis dengan menggunakan tool-tool ORM dari pihak ketiga seperti <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper .NET</a> dan <a href="](http://coding4ever.net/blog/categories/entity-framework/">Entity Framework</a>. Untuk contoh kali ini kita menggunakan <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper .NET</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-06.png"></p>

<p>Setelah memahami apa itu class model dan bagaimana proses pemetaan record ke objek terjadi, langkah berikutnya adalah menambahkan class model <em>Category, Product</em> dan <em>Supplier</em> yang mempunyai struktur sama persis dengan rancangan tabel di atas.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-08.png"></p>

<h5>Class Repository</h5>

<p>Class <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">repository</a> adalah class yang bertugas untuk menangani operasi database yang dikenal dengan istilah operasi CRUD (Create, Read, Update dan Delete). Di dalam class inilah kita menuliskan perintah-perintah INSERT, UPDATE, DELETE dan SELECT.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-09.png"></p>

<p>Sebagai contoh kode dibawah ini akan melakukan mapping (pemetaan) baris/row tabel menjadi kumpulan objek (object collection) secara otomatis.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-10.png"></p>

<p>Kode di atas menggunakan <a href="http://coding4ever.net/blog/categories/dapper-net/">Micro ORM</a> <a href="http://coding4ever.net/blog/categories/dapper-net/">Dapper.NET</a> untuk melakukan mapping/pemetaan hasil query ke objek collection.</p>

<p>Kemudian kita panggil seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-11.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-12.png"></p>

<h5>DataSet</h5>

<p>Dengan model <a href="http://coding4ever.net/blog/categories/crystal-reports-net/">data Push</a> kita tidak langsung menghubungkan antara Crystal Reports dengan database, jadi sebagai solusinya kita menggunakan DataSet yang berfungsi sebagai tabel temporary dan menjadi sumber data bagi Crystal Reports.</p>

<p>Untuk menambahkan item DataSet, klik kanan Project -> Add -> New Item…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-14.png"></p>

<p>Setelah menambahkan item DataSet (DsNorthwind), langkah berikutnya adalah menambahkan item DataTable</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-15.png"></p>

<p>Kemudian input informasi DataTablenya seperti gambar berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-16.png"></p>

<p>Ulangi langkah sebelumnya untuk menambahkan DataTable lainnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-17.png"></p>

<h5>Crystal Reports</h5>

<p>Crystal Reports adalah tool yang kita gunakan untuk membuat laporan. Untuk menambahkan item Crystal Report, klik kanan Project -> Add -> New Item…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-18.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-19.png"></p>

<p>Pilih “As a Blank Report” karena kita akan mendesain report secara manual.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-20.png"></p>

<p>Langkah berikutnya adalah menentukan sumber data yang kita arahkan ke item DataSet yang sudah kita buat pada langkah sebelumnya</p>

<p>Klik kanan Database Fields -> Database Expert &hellip;</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-21.png"></p>

<p>Pilih ADO.NET DataSet</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-22.png"></p>

<p>Drag satu-satu field ke section detail, kemudian dirapikan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-23.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-24.png"></p>

<h5>Crystal Report Viewer</h5>

<p>Setelah semua persiapan selesai, langkah berikutnya adalah menambahkan Crystal Report Viewer yang berfungsi sebagai container untuk untuk menampilkan report.</p>

<p>Aktifkan form kemudian tambahkan Crystal Report Viewer</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-25.png"></p>

<p>Kemudian tambahkan kode berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-26.png"></p>

<p>Dari kode di atas kita bisa melihat tidak ada lagi kode untuk mengeset koneksi database dan perintah SQL yang akan dikirimkan. Cara ini sangat cocok digunakan ketika kita akan membangun sistem dengan arsitektur <a href="http://coding4ever.net/blog/2012/02/01/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-1/">N-Tier</a>, di mana aplikasi klien sudah tidak terkoneksi lagi secara langsung ke database.</p>

<p>Jika kode di atas dijalankan, akan menghasilkan output seperti gambar di bawah ini.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/240116-27.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoCRPushModel2">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paket NuGet Yang Wajib Dicoba Bagian #2 - AutoUpdater.NET]]></title>
    <link href="http://coding4ever.net/blog/2016/01/10/paket-nuget-yang-wajib-dicoba-bagian-number-2-autoupdater-dot-net/"/>
    <updated>2016-01-10T10:35:44+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/10/paket-nuget-yang-wajib-dicoba-bagian-number-2-autoupdater-dot-net</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://coding4ever.files.wordpress.com/2014/03/nuget-logo1.png" width="120" height="100">Masalah update program adalah masalah klasik bagi para programmer aplikasi desktop. Apakah itu untuk perbaikan bug atau penambahan fitur baru. Bagaimana tidak, biasanya kita selalu disibukan dengan masalah yang satu ini. Update… update… dan update … :-D apalagi dengan jumlah klien yang banyak wahhhh cape deh :&lsquo;(</p>

<!-- more -->


<p>Sebenarnya proses update sendiri pada dasarnya adalah masalah sederhana <em>&ldquo;tinggal copy program yang baru untuk menimpa program yang lama&rdquo;</em>. Nah permasalahan biasanya muncul jika yang harus melakukan update adalah klien kita yang mungkin cuma bisa ngetik di word atau mantan operator dos yang baru pindah ke windows de el el.</p>

<p>Jadi merupakan ide yang baik untuk memberikan notifikasi (pemberitahuan) kepada end-user, bahwa ada updatean terbaru untuk aplikasi yang mereka gunakan.</p>

<p>Sehingga dengan adanya program update yang baik <code>User nyaman kita pun senang</code> :-D.</p>

<p><a href="http://www.nuget.org/packages/AutoupdaterdotNet/">AutoUpdater.NET</a> adalah salah satu library gratis yang bisa menjadi solusi untuk masalah ini dengan konfigurasi yang mudah sehingga proses update-pun menjadi menyenangkan.</p>

<p>Sebelum menggunakan library <a href="http://www.nuget.org/packages/AutoupdaterdotNet/">AutoUpdater.NET</a> ada beberapa hal yang perlu dipersiapkan :</p>

<h5>1. File exe versi terakhir</h5>

<p>File exe ini akan kita simpan di server, file inilah yang akan didownload oleh klien jika ada updatean terbaru. Jika akan mengupdate beberapa file sekaligus, misal selain mengupdate file exe juga mengupdate file <a href="https://en.wikipedia.org/wiki/Dynamic-link_library">dll</a>, untuk kasus seperti ini kita bisa menggunakan <a href="http://coding4ever.net/blog/categories/tools-installer/">paket installer</a>.</p>

<p>Ada banyak <a href="http://coding4ever.net/blog/categories/tools-installer/">tools gratis</a> untuk membuat <a href="http://coding4ever.net/blog/categories/tools-installer/">paket installer</a> seperti <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> dan <a href="http://coding4ever.net/blog/categories/nsis/">NSIS</a>. Untuk contoh pembuatan paket installer update bisa dilihat di <a href="http://coding4ever.net/blog/2009/12/29/membuat-paket-instalasi-update-program-menggunakan-inno-setup/">sini</a> dan <a href="http://coding4ever.net/blog/2009/12/29/membuat-paket-instalasi-update-program-menggunakan-nsis/">sini</a>.</p>

<h5>2. File Info Rilis</h5>

<p>File info rilis akan kita simpan di server. File ini berfungsi sebagai informasi bagi aplikasi klien apakah ada update-an terbaru atau tidak. File ini dibuat dengan menggunakan format XML. Contoh :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?>
</span><span class='line'>&lt;item>
</span><span class='line'>  &lt;title>Sistem Informasi Manufaktur&lt;/title>
</span><span class='line'>  &lt;version>1.3.1.0&lt;/version>
</span><span class='line'>  &lt;url>http://xxxxx.xxx/online-update/manufactur/auto-updater.exe&lt;/url> 
</span><span class='line'>&lt;/item></span></code></pre></td></tr></table></div></figure>


<h5>3. Web Server</h5>

<p>Anda bisa menggunakan IIS, Apache atau web server lainnya. Di web server ini kita akan menyimpan file exe dan info rilis (poin 1 dan 2).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-01.png"></p>

<h5>Menambahkan Library AutoUpdater.NET</h5>

<p>Untuk menambahkan library <a href="http://www.nuget.org/packages/AutoupdaterdotNet/">AutoUpdater.NET</a> bisa kita lakukan via <a href="http://coding4ever.net/blog/categories/nuget/">NuGet Package Manager</a>. Adapun caranya seperti berikut :</p>

<h6>1. Klik kanan node References -> Manage NuGet Packages&hellip;</h6>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-02.png"></p>

<h6>2. Cari AutoUpdater.NET dan klik tombol Install</h6>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-03.png"></p>

<p>Klik tombol Close, kemudian cek node <code>References</code>, seharusnya sudah ada tambahan library <code>AutoUpdater.NET</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-04.png"></p>

<h5>Cara Penggunaan Library AutoUpdater.NET</h5>

<p>Cara penggunaan <a href="http://www.nuget.org/packages/AutoupdaterdotNet/">AutoUpdater.NET</a> sangat mudah, kita cukup menambahkan beberapa kode berikut di form utama.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-06.png"></p>

<p>Pada kode di atas method <code>Start</code> kita arahkan ke url :<br><a href="http://localhost/update/DemoAutoUpdaterDotNet.xml">http://localhost/update/DemoAutoUpdaterDotNet.xml</a></p>

<p>Adapun isi dari file <code>DemoAutoUpdaterDotNet.xml</code> seperti berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?>
</span><span class='line'>&lt;item>
</span><span class='line'>  &lt;title>Demo AutoUpdater.Net&lt;/title>
</span><span class='line'>  &lt;version>1.1.0.0&lt;/version>
</span><span class='line'>  &lt;url>http://localhost/update/DemoAutoUpdaterDotNet.exe&lt;/url> 
</span><span class='line'>&lt;/item></span></code></pre></td></tr></table></div></figure>


<h5>Demo AutoUpdater.NET</h5>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/100116-071.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoOnlineBackup">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online Backup Database]]></title>
    <link href="http://coding4ever.net/blog/2016/01/06/online-backup-database/"/>
    <updated>2016-01-06T14:42:52+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/06/online-backup-database</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2016/01/google-drive.png" width="100" height="100"><a href="http://coding4ever.net/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/">Backup database lokal</a> saja ternyata tidak cukup, paling tidak itu yang saya rasakan ketika salah satu klien saya hardisk servernya <code>tewas</code> :-D. Padahal dulu itu saya sudah menyarankan untuk menggunakan UPS, tapi katanya &ldquo;<em>kalo pake UPS, fitur  powerON di biosnya jadi gak jalan&hellip;</em>&rdquo; dan saya maklum karena servernya memang ON 24 jam dan memang tidak ada petugas khusus yang mengONkan servernya kalo pas lagi OFF.
Jadi kita memang dituntut untuk memberikan solusi untuk masalah ini, terutama solusi yang murah meriah he he :-D</p>

<!-- more -->


<p>Salah satu solusinya adalah dengan memanfaatkan media penyimpanan online yang memang sudah terbukti handal dan gratis yaitu <code>Google Drive</code>. Dengan <code>Google Drive</code> limit ukuran file yang bisa diupload adalah maksimal 5GB.</p>

<p>Kita langsung saja berikut adalah langkah-langkah untuk mengakses layanan/API dari <code>Google Drive</code> atau layanan Google lainnya.</p>

<h5>1. Membuat Client id</h5>

<p>Untuk membuat client id, kita bisa langsung mengakses link <a href="https://console.developers.google.com/">Google Developer Console</a> kemudian login menggunakan email google Anda</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-19.png"></p>

<h5>2. Membuat project</h5>

<p>Klik menu Select a project -> Create a project…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-01.png"></p>

<p>Kemudian isikan nama project, misal <code>OnlineBackup</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-02.png"></p>

<h5>3. Mengaktifkan Google API</h5>

<p>Dari menu dashboard klik link <code>Use Google APIs</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-03.png"></p>

<p>Secara default google sudah mengaktifkan beberapa API yang bisa kita akses dari aplikasi</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-04.png"></p>

<p>Dari daftar api di atas kita belum menemukan API untuk mengakses google drive, sehingga API ini harus kita aktifkan secara manual dengan mengklik link <code>Google APIs</code> kemudian di kotak pencarian ketik <code>Drive API</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-05.png"></p>

<p>Selanjutnya klik link <code>Drive API</code> kemudian pilih <code>Enable API</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-06.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-07.png"></p>

<h5>4. Membuat Credential</h5>

<p>Sebelum layanan/API <code>Google Drive</code> ini bisa kita akses, kita harus membuat <code>Credential</code> terlebih dulu sebagai otorisasi bahwa kita adalah memang orang yang berhak untuk mengakses layanan ini.</p>

<p>Untuk membuat <code>Credential</code> klik menu <code>Credentials</code> kemudian pilih <code>OAuth client ID</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-08.png"></p>

<p>Kemudian klik menu <code>Configure consent screen</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-09.png"></p>

<p>Isikan datanya sesuai kebutuhan</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-10.png"></p>

<p>Selanjutnya kita akan menentukan jenis aplikasi yang akan mengakses API ini. Untuk contoh disini saya menggunakan aplikasi console.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-11.png"></p>

<p>Jika berhasil kita akan mendapatkan informasi <code>client ID</code> dan <code>client secret</code>. Informasi ini akan kita gunakan untuk mengakses layanan/API google drive ataupun layanan lainnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-12.png"></p>

<h5>5. Menyiapkan folder backup</h5>

<p>Langkah berikutnya adalah masuk ke <code>Google Drive</code> kemudian kita buat folder untuk backup database. Setelah membuat folder ini, kita perlu mengetahui informasi <code>folder id</code> dari folder backup ini. Untuk mendapatkan <code>folder id</code> bisa kita lihat dibagian address bar.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-13.png"></p>

<p>Pada gambar di atas <code>folder id</code> dari folder <code>Backup Database</code> ini adalah : <code>0B5aEAoHOGHqkelgzM2cxVncxNGM</code>.</p>

<p>Simpan informasi ini karena akan digunakan untuk mengakses folder Backup Database ini via aplikasi.</p>

<h5>6. Membuat aplikasi client</h5>

<p>Untuk contoh di sini kita akan menggunakan <code>aplikasi console</code> untuk mendemokan proses upload file ke Google Drive. Artinya aplikasi ini akan dijalankan via batch command atau command prompt.</p>

<p>Aplikasi ini juga membutuhkan dua library pihak ketiga yaitu <a href="https://www.nuget.org/packages/Google.Apis.Drive.v2/">Google.Apis.Drive.v2</a> dan <a href="https://www.nuget.org/packages/DotNetZip/">DotNetZip</a> yang bisa diinstall via <a href="http://coding4ever.net/blog/categories/nuget/">NuGet</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-14.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-15.png"></p>

<p>File backup database yang akan kita upload adalah file backup yang sudah kita buatkan versi kompresnya, disini kita menggunakan library <a href="https://www.nuget.org/packages/DotNetZip/">DotNetZip</a>.
Contoh kodenya  seperti berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">CreateZip</span><span class="p">(</span><span class="kt">string</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">extension</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">fileToZip</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">@&quot;{0}\{1}.zip&quot;</span><span class="p">,</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="n">fileBackup</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fileBackup</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">@&quot;{0}\{1}.{2}&quot;</span><span class="p">,</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="n">fileBackup</span><span class="p">,</span> <span class="n">extension</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">zip</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ZipFile</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;\nAdding {0}...&quot;</span><span class="p">,</span> <span class="n">fileBackup</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ZipEntry</span> <span class="n">e</span> <span class="p">=</span> <span class="n">zip</span><span class="p">.</span><span class="n">AddFile</span><span class="p">(</span><span class="n">fileBackup</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">zip</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">fileToZip</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setelah berhasil membuat file zipnya, tinggal upload ke google drive. Berikut contoh kodenya :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">UploadToGoogleDrive</span><span class="p">(</span><span class="kt">string</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileBackup</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// TODO : disesuaikan dengan nilai clientId dan clientSecret Anda</span>
</span><span class='line'>    <span class="c1">//        setting ini juga bisa disimpan di file App.config</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">clientId</span> <span class="p">=</span> <span class="s">&quot;505165741497-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">clientSecret</span> <span class="p">=</span> <span class="s">&quot;6Nxxxxxx-xxxxxxxxxxxxxxx&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="n">GoogleDriveHelper</span><span class="p">.</span><span class="n">AuthenticateOauth</span><span class="p">(</span><span class="n">clientId</span><span class="p">,</span> <span class="n">clientSecret</span><span class="p">,</span> <span class="n">Environment</span><span class="p">.</span><span class="n">UserName</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">service</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Authentication error&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Sedang proses upload ...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// TODO : disesuaikan dengan nilai folder id Anda</span>
</span><span class='line'>        <span class="c1">//        setting ini juga bisa disimpan di file App.config</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">folderId</span> <span class="p">=</span> <span class="s">&quot;0B5xxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// upload file</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">fileToUpload</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}\\{1}.zip&quot;</span><span class="p">,</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="n">fileBackup</span><span class="p">);</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">newFile</span> <span class="p">=</span> <span class="n">GoogleDriveHelper</span><span class="p">.</span><span class="n">UploadFile</span><span class="p">(</span><span class="n">service</span><span class="p">,</span> <span class="n">fileToUpload</span><span class="p">,</span> <span class="n">folderId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;\nUpload file gagal !&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">finally</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// hapus file yang berhasil diupload</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">fileToDelete</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}\\{1}.zip&quot;</span><span class="p">,</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="n">fileBackup</span><span class="p">);</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">fileToDelete</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Method <code>UploadToGoogleDrive</code> di atas membutuhkan class <a href="https://github.com/k4m4r82/DemoOnlineBackup/blob/master/src/DemoOnlineBackup/GoogleDriveHelper.cs">GoogleDriveHelper</a> yang bisa Anda cek di <a href="https://github.com/k4m4r82/DemoOnlineBackup/blob/master/src/DemoOnlineBackup/GoogleDriveHelper.cs">sini</a>.</p>

<p>Method <code>CreateZip</code> dan <code>UploadToGoogleDrive</code> di atas mempunyai parameter seperti berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">void</span> <span class="nf">CreateZip</span><span class="p">(</span><span class="kt">string</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">extension</span><span class="p">)</span>
</span><span class='line'><span class="k">void</span> <span class="nf">UploadToGoogleDrive</span><span class="p">(</span><span class="kt">string</span> <span class="n">pathFileBackup</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileBackup</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nilai masing-masing parameter di atas kita isi pada saat memanggil aplikasi via batch command atau command prompt. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-16.png"></p>

<p>Dan untuk mendapatkan nilainya, kita bisa mengakses parameter <code>args</code> dari method Main.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-17.png"></p>

<h5>7. Menjalankan aplikasi client via batch command</h5>

<p>Untuk menjalankan aplikasi di atas kita bisa menggunakan batch command. Untuk contoh kodenya menggunakan database MySQL :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for /f "tokens=2-4 delims=/ " %%a in ('date /T') do set year=%%c
</span><span class='line'>for /f "tokens=2-4 delims=/ " %%a in ('date /T') do set month=%%a
</span><span class='line'>for /f "tokens=2-4 delims=/ " %%a in ('date /T') do set day=%%b
</span><span class='line'> 
</span><span class='line'>for /f "tokens=1 delims=: " %%h in ('time /T') do set hour=%%h
</span><span class='line'>for /f "tokens=2 delims=: " %%m in ('time /T') do set minutes=%%m
</span><span class='line'>for /f "tokens=3 delims=: " %%a in ('time /T') do set ampm=%%a
</span><span class='line'>
</span><span class='line'>rem membuat file backup database dengan format nama_database-tahun-bulan-hari_jam_menit 
</span><span class='line'>set FILE_BACKUP=pulsa-%year%-%month%-%day%_%hour%-%minutes%-%ampm%
</span><span class='line'>set LOKASI_BACKUP=D:\BackupDatabase\backups
</span><span class='line'>set FILE_EXTENSION=sql
</span><span class='line'>
</span><span class='line'>rem set user dan password mysql
</span><span class='line'>set USER_MYSQL=root
</span><span class='line'>set PASS_MYSQL=rahasia
</span><span class='line'>
</span><span class='line'>rem USER_NAME, USER_PASSWORD dan NAMA_DATABASE menyesuaikan
</span><span class='line'>mysqldump -u%USER_MYSQL% -p%PASS_MYSQL% pulsa > %LOKASI_BACKUP%\%FILE_BACKUP%.%FILE_EXTENSION%
</span><span class='line'>
</span><span class='line'>D:\BackupDatabase\DemoOnlineBackup.exe %LOKASI_BACKUP% %FILE_BACKUP% %FILE_EXTENSION%</span></code></pre></td></tr></table></div></figure>


<p>Kemudian kode di atas kita simpan dengan nama <code>backup.cmd</code> di folder <code>Instalasi MySQL\bin</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-18.png"></p>

<p>Agar proses backup ini bisa otomatis dan terjadwal kita bisa memanfaatkan <a href="http://coding4ever.net/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/">Windows Task Scheduler</a>.</p>

<p>Terakhir hasil tes kode di atas berhasil mengupload file ke Google Drive dengan lancar :-)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2016/01/060116-20.png"></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoOnlineBackup">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.daimto.com/google-drive-api-c-upload/">Google Drive API with C# .net – Upload, update, patch, delete,trash</a></li>
<li><a href="https://github.com/LindaLawton/Google-Dotnet-Samples">Google-Dotnet-Samples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Test Menggunakan JMeter]]></title>
    <link href="http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/"/>
    <updated>2015-10-20T09:26:38+07:00</updated>
    <id>http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/10/apache-jmeter.png" width="100" height="100">Aktivitas saya di kantor akhir-akhir ini, lebih sering ngoding untuk backend/web service. Nah untuk membuat service ini, saya biasanya menggunakan teknologi <a href="http://coding4ever.net/blog/categories/wcf/">WCF</a>, hanya saja untuk <code>kekinian</code> :-D saya juga menggunakan <a href="http://www.asp.net/web-api">ASP.NET Web Api</a>.</p>

<p>Untuk tahapan testing wajib yang saya lakukan adalah minimal <a href="https://en.wikipedia.org/wiki/Unit_testing">unit test</a>. <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit test</a> yang dilakukan biasanya di level DAL (Data Access Layer) dan Controller.</p>

<!-- more -->


<p><a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> ini merupakan bagian dari <code>white box testing</code> karena testing ini dieksekusi langsung oleh programmer. Sedangkan untuk <code>black box testing</code> bisa dilakukan menggunakan aplikasi sejenis <a href="http://www.telerik.com/fiddler">Fiddler</a> atau menggunakan add-ons yang dimiliki oleh browser-browser seperti Mozilla Firefox dan Google Chrome.</p>

<p>Karena service ini nantinya akan digunakan oleh banyak client dan user, tentu akan <code>ngeri-ngeri sedap</code>  :-D jika testingnya masih dilakukan secara manual. Jadi sebaiknya kita menggunakan <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> untuk proses ini.</p>

<p>Ada banyak <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> yang tersedia baik yang gratis maupun yang berbayar. Untuk postingan kali ini saya menggunakan <a href="http://jmeter.apache.org/">JMeter</a>.</p>

<p>Apa itu <a href="http://jmeter.apache.org/">JMeter</a> ?</p>

<blockquote><p>The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions</p></blockquote>

<p>Berikut langkah-langkah menggunakan <a href="http://jmeter.apache.org/">JMeter</a> :</p>

<h5>1. Download <a href="http://jmeter.apache.org/download_jmeter.cgi">JMeter</a> kemudian ekstrak, misal di drive C:\</h5>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-1.png"></p>

<h5>2. Untuk menjalankan <a href="http://jmeter.apache.org/">JMeter</a>, klik ganda file <code>jmeter.bat</code> yang ada di folder <code>bin</code></h5>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-2.png"></p>

<p>Tunggu beberapa saat sampai tampil, aplikasi <a href="http://jmeter.apache.org/">JMeter</a></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-3.png"></p>

<p>Kemudian ganti informasi Name, sesuai kebutuhan. Misal <code>Performance Test Web Service Presensi</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-4.png"></p>

<h5>3. Menambahkan User Defined Variables</h5>

<p>Di node ini kita akan menambahkan informasi global yang sering digunakan pada saat testing seperti informasi <code>host</code> dan <code>port</code>.</p>

<p>Untuk menambahkan node <code>User Defined Variables</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Config Element -> User Defined Variables.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-5.png"></p>

<p>Kemudian lakukan pengaturan <code>User Defined Variables</code> seperti gambar berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-6.png"></p>

<p>Pada gambar di atas kita menambahkan dua variabel yaitu <code>host</code> dan <code>port</code>. Nah variabel-variabel ini nantinya akan digunakan pada langkah-langkah berikutnya.</p>

<h5>4. Menambahkan HTTP Header Manager</h5>

<p>Setelah menambahkan node <code>User Defined Variables</code>, kita lanjutkan dengan menambahkan node <code>HTTP Header Manager</code>. Langkah-langkahnya sama seperti menambahkan node <code>User Defined Variables</code>, hanya saja yang dipilih adalah <code>HTTP Header Manager</code>.</p>

<p>Di node ini kita akan menambahkan informasi apa saja yang dikirimkan <a href="http://jmeter.apache.org/">JMeter</a> ke HTTP request header.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-7.png"></p>

<h5>5. Menambahkan HTTP Request Defaults</h5>

<p>Langkah berikutnya adalah menambahkan node <code>HTTP Request Defaults</code>, caranya juga sama seperti sebelumnya hanya saja yang dipilih node <code>HTTP Request Defaults</code>.</p>

<p>Di node ini kita cukup mengeset informasi nama server/ip address, port dan protocol.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-8.png"></p>

<p>Karena sebelumnya kita sudah mendefinisikan nama host dan port di node <code>User Defined Variables</code>, di node ini kita tinggal panggil variabel tersebut dengan format : ${<strong>NAMA_VARIABEL</strong>}.</p>

<h5>6. Menambahkan Thread Group</h5>

<p>Node ini digunakan untuk mengelompokan service yang akan di tes. Misal kita mempunyai service Mahasiswa dan Dosen, kedua service ini sebaiknya dibuatkan <code>Thread Group</code> masing-masing.</p>

<p>Untuk menambahkan node <code>Thread Group</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Threads (Users) -> Thread Group.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-9.png"></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-10.png"></p>

<p>Dari setting di atas, kita akan membuat skenario <code>performance test</code> seperti berikut :</p>

<ul>
<li>Jumlah user sebanyak 50 orang</li>
<li>Setiap 2 detik (100/50), akan mengirimkan 6 request ke server.</li>
<li>Total jumlah sample = 300 (50 x 6)</li>
</ul>


<p>Skenario <code>performance test</code> ini bisa diganti-ganti nilainya sesuai kebutuhan.</p>

<h5>7. Menambahkan HTTP Request</h5>

<p>Setelah menentukan skenario <code>performance test</code>, langkah berikutnya adalah menambahkan node <code>HTTP Request</code>. Di node inilah kita akan menentukan web service yang akan di tes. Misal web service mahasiswa mempunyai dua layanan yaitu <code>GetByID</code> dan <code>GetByName</code>. Nah dua layanan ini akan kita tambahkan sebagi bagian dari <code>HTTP Request</code>.</p>

<p>Untuk menambahkan node <code>HTTP Request</code> klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Sampler -> HTTP Request.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-11.png"></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-12.png"></p>

<p>Dari gambar di atas, informasi web servicenya sebagai berikut :</p>

<ul>
<li>Nama service : <code>GetById</code></li>
<li>Path/Url : <code>/Api/Mahasiswa/GetById</code></li>
<li>Service ini mempunyai satu parameter yaitu <code>id</code>, yang kita set nilainya <code>09.01.2488</code></li>
<li>Informasi server name/ip dan port number tidak perlu di set, karena sudah kita set nilainya di node <code>HTTP Request Defaults</code></li>
</ul>


<p>Ulangi langkah sebelumnya untuk menambahkan service yang lain.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-13.png"></p>

<h5>8. Menambahkan report untuk menampilkan hasil Performance test</h5>

<p>Ada beberapa format laporan yang digunakan untuk menampilkan hasil performance test yaitu :</p>

<ul>
<li>View Results in Table</li>
<li>View Results Tree</li>
<li>Response Times Over Time</li>
<li>Transactions per Second</li>
<li>Statistical Aggregate Report</li>
<li>Summary Report</li>
</ul>


<p>Untuk menambahkan semua format laporan di atas klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Listener -> Pilih jenis laporan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-14.png"></p>

<h5>9. Menjalankan Performance test</h5>

<p>Untuk menjalankan performance test, kita tinggal mengklik toolbar <code>Start</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-15.png"></p>

<p><code>Performance test</code> ini di jalankan menggunakan <code>Environment Test</code> sebagai berikut :</p>

<h5>Server Web Service :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2008 64 Bit</li>
<li>Web Server : IIS 7</li>
<li>Teknologi/framwork REST Service : ASP.NET Web API 2</li>
<li>Processor : Intel Xeon X5570 2.93 Ghz</li>
<li>RAM : 12 GB</li>
</ul>


<h5>Server Database :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2012 64 Bit</li>
<li>Database : SQL Server 2014</li>
<li>Processor : Intel Xeon E5-2620 v2 2.10 Ghz</li>
<li>RAM : 24 Gb</li>
</ul>


<h5>10. Contoh Hasil Performance Test</h5>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-17.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-18.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-19.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-20.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/10/201015-21.png"></p>

<p>Sebagai penutup saya belum menemukan referensi yang tepat bagaimana cara menganalisa hasil dari <code>performance test</code> di atas, tetapi biasanya yang saya jadikan acuan adalah hasil yang bisa dilihat melalui node <code>View Results in Table</code> kolom Status, dari node ini kelihatan apakah ada request service yang berstatus <code>Warning</code>. Jika ada mungkin ini bisa menjadi bahan acuan apakah service kita masih perlu di-<code>improve</code> lagi atau skenario <code>performance test</code> yang perlu diganti atau karena faktor lainnya seperti kondisi jaringan yang lagi <code>enggak fit</code> pada saat melakukan tes :-D.</p>

<p>Selamat mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Visual Studio .NET Build Events Part #3]]></title>
    <link href="http://coding4ever.net/blog/2015/07/04/the-power-of-visual-studio-net-build-events-part-number-3/"/>
    <updated>2015-07-04T23:31:23+07:00</updated>
    <id>http://coding4ever.net/blog/2015/07/04/the-power-of-visual-studio-net-build-events-part-number-3</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/06/260615-00.png" width="100" height="100">Masih melanjutkan pembahasan tentang <a href="http://coding4ever.net/blog/categories/build-events/">build events</a> yang merupakan salah satu fitur menarik dari Visual Studio .NET dan berguna untuk meningkatkan produktivitas kita sebagai software developer.</p>

<p>Di <a href="http://coding4ever.net/blog/2015/07/01/the-power-of-visual-studio-net-build-events-part-number-2/">postingan</a> sebelumnya kita memanfaatkan fitur ini untuk membuat paket installer secara otomatis setelah proses build project selesai, jadi workflownya sangat cocok digunakan untuk pengembangan aplikasi desktop. Sedangkan <a href="http://coding4ever.net/blog/2015/07/04/the-power-of-visual-studio-net-build-events-part-number-3/">postingan</a> kali ini, studi kasusnya adalah pengembangan aplikasi web service.</p>

<!-- more -->


<p>Perlu diketahui bahwa workflow pengembangan aplikasi desktop dan web service itu sedikit berbeda. Pengembangan aplikasi web service ada kemiripan dengan pengembangan aplikasi web. Di mana kita melakukan proses develop  di komputer lokal setelah jadi baru kita upload ke server develop (untuk pengetesan lebih lanjut) atau ke server production (jika sudah siap rilis).</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-01.png"></p>

<p>Dari gambar di atas, maka workflow yang bisa kita gunakan adalah :</p>

<ol>
<li>Build project dengan mode <code>Debug</code> akan mengupload hasil build ke <code>development server</code></li>
<li>Sedangkan jika build project dengan mode <code>Release</code> akan mengupload hasil build ke <code>production server</code></li>
</ol>


<p>Setelah menentukan workflow, berikutnya adalah menentukan cara yang kita gunakan untuk mengupload hasil build. Untuk contoh di sini kita akan memanfaatkan <code>service FTP</code> untuk melakukan proses upload.</p>

<p><strong> FileZilla</strong></p>

<p><a href="https://filezilla-project.org/">FileZilla</a> adalah salah satu software gratis dan open source yang bisa digunakan untuk menyediakan service FTP. Cara instalasi dan konfigurasinya juga gampang dan jika Anda belum pernah menggunakan <a href="https://filezilla-project.org/">FileZilla</a>, saya pernah menulis tutorial penggunakan <a href="https://filezilla-project.org/">FileZilla</a> di <a href="http://coding4ever.net/blog/2010/09/20/beberapa-alternatif-menampilkan-file-gambar-via-jaringan/">sini</a>.</p>

<p><strong>Web Server</strong></p>

<p>Sama seperti aplikasi web, web service juga membutuhkan sebuah host/wadah agar bisa dijalankan. Untuk kebutuhan web server kita akan menggunakan spesifikasi seperti berikut :</p>

<ol>
<li>Menggunakan OS Windows 7/Windows Server 2008 ke atas</li>
<li>Web Server IIS</li>
<li>Service FTP menggunakan <a href="https://filezilla-project.org/">FileZilla</a>, walaupun Windows Server juga mempunyai fitur untuk menyediakan service FTP sendiri, tapi tidak kita bahas disini</li>
</ol>


<p><strong>Lokasi Web Service</strong></p>

<p>Secara default <code>document root</code> web server iis ada di folder <code>C:\inetpub\wwwroot</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-02.png"></p>

<p>Kita akan membahkan folder baru dengan nama <code>KRSchool</code>  berikut sub folder <code>bin</code>. Nah di sub folder <code>bin</code> inilah kita akan mengupload hasil build project.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-03.png"></p>

<p><strong>Membuat User FTP</strong></p>

<p>Setelah menyiapkan lokasi web service, berikutnya adalah membuat user yang berhak untuk mengakses lokasi web service. Di sini kita akan menggunakan <a href="https://filezilla-project.org/">FileZilla</a> sebagai penyedia service FTP. Adapun langkah-langkahnya seperti berikut :</p>

<ol>
<li><p>Jalankan FileZilla Server Interface</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-04.png"></p>

<p>Kemudian klik toolbar user account dialog</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-05.png"></p>

<p>Setelah itu akan tampil dialog user</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-06.png"></p>

<p>Kemudian klik tombol Add dan isikan nama user</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-07.png"></p></li>
<li><p>Setelah itu kita perlu mengeset password untuk user yang baru ditambahkan</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-08.png"></p></li>
<li><p>Berikutnya pindah ke node <code>Shared folders</code>, klik tombol Add kemudian tentukan lokasi web service</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-09.png"></p></li>
<li><p>Terakhir aktifkan semua hak akses untuk modifikasi file</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-10.png"></p></li>
</ol>


<p><strong>Tes User FTP</strong></p>

<p>Setelah berhasil mendaftarkan user ftp, saatnya kita tes service FTPnya dari komputer lain.</p>

<p>Dengan asumsi ip server adalah <code>192.168.56.101</code>, kita masuk ke dos prompt kemudian ketik <code>ftp 192.168.56.101</code>.</p>

<p>Jika konfigurasi service FTP yang kita lakukan dilangkah-langkah sebelumnya benar, kita akan diminta untuk memasukkan username dan password dan jika berhasil prompt akan berganti menjadi <code>ftp&gt;</code> yang menandakan bahwa username dan password kita benar.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-11.png"></p>

<p><strong>WinSCP</strong></p>

<p>Di sisi server kita menggunakan <a href="https://filezilla-project.org/">FileZilla</a> sebagai penyedia service FTP, sedangkan dari sisi klien kita menggunakan <a href="http://winscp.net/">WinSCP</a> untuk mengakses service FTP.</p>

<p>Cara penggunaan <a href="http://winscp.net/">WinSCP</a>, juga gampang. Berikut contohnya :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winscp.com /command "option batch abort" "option confirm off" "open ftp://USER_FTP:PASSWORD_FTP@IP_SERVER" "put FOLDER_RILIS\*.dll bin/" "exit"</span></code></pre></td></tr></table></div></figure>


<p>Untuk <code>USER_FTP</code>, <code>PASSWORD_FTP</code>, <code>IP_SERVER</code> dan <code>FOLDER_RILIS</code> menyesuaikan. Selanjutnya kita tinggal panggil perintah di atas melalui <code>Build Events</code></p>

<p><strong>Build Events</strong></p>

<p>Setelah semua persiapan selesai, kita akan menuliskan perintah <code>Build Events</code> untuk mengcopy hasil build dan menguploadnya ke server web service.
Berikut perintah lengkapnya :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-121.png"></p>

<p>Pada perintah di atas, nilai IPServer tergantung dari setting <code>Solution Configuration</code> atau <code>Configuration Manager</code>. Jika di set <code>Debug</code>, hasil build akan diupload ke <code>development server</code> sedangkan jika di set <code>Release</code> akan di upload ke <code>production server</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-04.png"></p>

<p>Setelah itu lakukan proses <code>build -&gt; project</code>, maka semua file dll yang ada di folder <code>bin\Debug</code> atau <code>bin\Release</code> akan dicopykan ke folder <code>C:\WebServiceRilis</code>, kemudian akan dilanjutkan dengan mengupload ke web server.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-13.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-151.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-141.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/050715-161.png"></p>

<p>Selamat MENCOBA :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Visual Studio .NET Build Events Part #2]]></title>
    <link href="http://coding4ever.net/blog/2015/07/01/the-power-of-visual-studio-net-build-events-part-number-2/"/>
    <updated>2015-07-01T10:20:30+07:00</updated>
    <id>http://coding4ever.net/blog/2015/07/01/the-power-of-visual-studio-net-build-events-part-number-2</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/06/260615-00.png" width="130" height="130">Melanjutkan pembahasan <a href="http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1/">postingan</a> sebelumnya yaitu tentang fitur <code>Build Events</code> yang dimiliki oleh Visual Studio .NET.</p>

<p>Di postingan <a href="http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1/">bagian #1</a> kita memanfaatkan fitur ini untuk melakukan proses copy file (exe, dll, config) secara otomatis setelah proses build project selesai.</p>

<p>Nah di <a href="http://coding4ever.net/blog/2015/07/01/the-power-of-visual-studio-net-build-events-part-number-2/">postingan</a> kali ini kita akan menambahkan perintah untuk mengcompile skrip <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> sehingga proses pembuatan paket installer pun jadi otomatis.</p>

<!-- more -->


<p><strong>Inno Setup</strong></p>

<p><a href="http://jrsoftware.org/">Inno Setup</a> adalah salah satu software favorit untuk membuat paket installer berbasis windows. Selain gratis software ini juga didukung oleh dokumentasi yang lengkap sehingga memudahkan kita untuk mempelajarinya. Saya juga ada menulis beberapa postingan tentang <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> yang bisa anda baca di<a href="http://coding4ever.net/blog/categories/inno-setup/">sini</a>.</p>

<p>Jadi untuk melanjutkan pembahasan ini, saya mengasumsikan Anda sudah pernah menggunakan <a href="http://jrsoftware.org/">Inno Setup</a> untuk membuat paket installer.</p>

<p>Untuk membuat skrip <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> itu gampang, contohnya seperti berikut :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Setup]
</span><span class='line'>AppName={code:GetAppName}
</span><span class='line'>AppVerName={code:GetAppName} Versi {code:GetAppVersion}
</span><span class='line'>AppPublisher={code:GetVendorName}
</span><span class='line'>AppVersion={code:GetAppVersion}
</span><span class='line'>AllowCancelDuringInstall = yes
</span><span class='line'>DefaultDirName={pf}\KRSchool
</span><span class='line'>DefaultGroupName={code:GetAppName}
</span><span class='line'>Compression = lzma
</span><span class='line'>SolidCompression = yes
</span><span class='line'>OutputBaseFilename=SetupKRSchool
</span><span class='line'>AllowNoIcons = yes
</span><span class='line'>AlwaysRestart = no
</span><span class='line'>AlwaysShowComponentsList = no
</span><span class='line'>DisableProgramGroupPage = yes
</span><span class='line'>AppendDefaultDirName = yes
</span><span class='line'>CreateUninstallRegKey = yes
</span><span class='line'>DisableStartupPrompt = yes
</span><span class='line'>LanguageDetectionMethod=none
</span><span class='line'>ShowLanguageDialog=no
</span><span class='line'>UsePreviousLanguage=no
</span><span class='line'>Uninstallable = yes
</span><span class='line'>UninstallFilesDir={app}\uninst
</span><span class='line'>UninstallDisplayIcon={app}\KRSchool.exe,0
</span><span class='line'>UninstallDisplayName={code:GetAppName}
</span><span class='line'>WindowVisible = no
</span><span class='line'>AppCopyright=Copyright © 2015. {code:GetVendorName}
</span><span class='line'>FlatComponentsList = yes
</span><span class='line'>PrivilegesRequired = admin
</span><span class='line'>VersionInfoVersion=1.0.0.0
</span><span class='line'>SetupIconFile=E:\Master\Developer Tools\Package\Setup.ico
</span><span class='line'>WizardImageFile=E:\Master\Developer Tools\Inno Setup\WizardImages\Modern\SetupModern16.bmp
</span><span class='line'>WizardSmallImageFile=E:\Master\Developer Tools\Inno Setup\WizardImages\Modern\Small\SetupModernSmall26.bmp
</span><span class='line'>
</span><span class='line'>[Languages]
</span><span class='line'>Name: ina; MessagesFile: compiler:Indonesia.isl
</span><span class='line'>Name: en; MessagesFile: compiler:Default.isl
</span><span class='line'>
</span><span class='line'>[Tasks]
</span><span class='line'>Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce
</span><span class='line'>Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked
</span><span class='line'>
</span><span class='line'>[Files]
</span><span class='line'>;My Application Runtime
</span><span class='line'>Source: *.*; DestDir: {app}; Flags: ignoreversion
</span><span class='line'>
</span><span class='line'>; .net framework
</span><span class='line'>Source: "E:\Master\Developer Tools\dotNET Framework\dotNetFx40_Full_x86_x64.exe"; DestDir: {tmp}; Flags: deleteafterinstall; Check: FrameworkIsNotInstalled 
</span><span class='line'>
</span><span class='line'>;skin
</span><span class='line'>Source: E:\Master\Developer Tools\Package\dll&ocx\ISSkin.dll; DestDir: {app}; Flags: dontcopy
</span><span class='line'>Source: E:\Master\Developer Tools\Package\dll&ocx\Office2007.cjstyles; DestDir: {tmp}; Flags: dontcopy
</span><span class='line'>
</span><span class='line'>[Icons]
</span><span class='line'>Name: {group}\{code:GetAppName}; Filename: {app}\KRSchool.exe; WorkingDir: {app}; IconFilename: {app}\main.ico
</span><span class='line'>Name: {userdesktop}\{code:GetAppName}; Filename: {app}\KRSchool.exe; WorkingDir: {app}; IconFilename: {app}\main.ico; Tasks: desktopicon
</span><span class='line'>
</span><span class='line'>[Registry]
</span><span class='line'>;INSTALL DIR
</span><span class='line'>Root: HKCU; Subkey: "Software\{code:GetVendorName}\{code:GetAppName}"; ValueName: "installDir"; ValueType: String; ValueData: {app}; Flags: uninsdeletevalue
</span><span class='line'>
</span><span class='line'>[Run]
</span><span class='line'>Filename: {tmp}\dotNetFx40_Full_x86_x64.exe; Parameters: "/q:a /c:""install /l /q"""; Check: FrameworkIsNotInstalled; StatusMsg: "Sedang menginstall Microsoft Framework 4.0 ..."
</span><span class='line'>
</span><span class='line'>[Code]
</span><span class='line'>const
</span><span class='line'>  AppName = 'KR School';
</span><span class='line'>  AppVersion = '1.0.0';
</span><span class='line'>  VendorName = 'KR Software';
</span><span class='line'>
</span><span class='line'>// Importing LoadSkin API from ISSkin.DLL
</span><span class='line'>procedure LoadSkin(lpszPath: String; lpszIniFileName: String);
</span><span class='line'>external 'LoadSkin@files:isskin.dll stdcall';
</span><span class='line'>
</span><span class='line'>// Importing UnloadSkin API from ISSkin.DLL
</span><span class='line'>procedure UnloadSkin();
</span><span class='line'>external 'UnloadSkin@files:isskin.dll stdcall';
</span><span class='line'>
</span><span class='line'>// Importing ShowWindow Windows API from User32.DLL
</span><span class='line'>function ShowWindow(hWnd: Integer; uType: Integer): Integer;
</span><span class='line'>external 'ShowWindow@user32.dll stdcall';
</span><span class='line'>
</span><span class='line'>function IsDotNetDetected(version: string; service: cardinal): boolean;
</span><span class='line'>// Indicates whether the specified version and service pack of the .NET Framework is installed.
</span><span class='line'>//
</span><span class='line'>// version -- Specify one of these strings for the required .NET Framework version:
</span><span class='line'>//    'v1.1.4322'     .NET Framework 1.1
</span><span class='line'>//    'v2.0.50727'    .NET Framework 2.0
</span><span class='line'>//    'v3.0'          .NET Framework 3.0
</span><span class='line'>//    'v3.5'          .NET Framework 3.5
</span><span class='line'>//    'v4\Client'     .NET Framework 4.0 Client Profile
</span><span class='line'>//    'v4\Full'       .NET Framework 4.0 Full Installation
</span><span class='line'>//
</span><span class='line'>// service -- Specify any non-negative integer for the required service pack level:
</span><span class='line'>//    0               No service packs required
</span><span class='line'>//    1, 2, etc.      Service pack 1, 2, etc. required
</span><span class='line'>var
</span><span class='line'>    key: string;
</span><span class='line'>    install, serviceCount: cardinal;
</span><span class='line'>    success: boolean;
</span><span class='line'>begin
</span><span class='line'>    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;
</span><span class='line'>
</span><span class='line'>    // .NET 3.0 uses value InstallSuccess in subkey Setup
</span><span class='line'>    if Pos('v3.0', version) = 1 then begin
</span><span class='line'>        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
</span><span class='line'>    end else begin
</span><span class='line'>        success := RegQueryDWordValue(HKLM, key, 'Install', install);
</span><span class='line'>    end;
</span><span class='line'>
</span><span class='line'>    // .NET 4.0 uses value Servicing instead of SP
</span><span class='line'>    if Pos('v4', version) = 1 then begin
</span><span class='line'>        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
</span><span class='line'>    end else begin
</span><span class='line'>        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
</span><span class='line'>    end;
</span><span class='line'>
</span><span class='line'>    result := success and (install = 1) and (serviceCount >= service);
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>function FrameworkIsNotInstalled: Boolean;
</span><span class='line'>begin
</span><span class='line'>    Result := not IsDotNetDetected('v4\Full', 0);
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>function GetVendorName(Param: string): string;
</span><span class='line'>begin
</span><span class='line'>  Result := VendorName;
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>function GetAppVersion(Param: string): string;
</span><span class='line'>begin
</span><span class='line'>  Result := AppVersion;
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>function GetAppName(Param: string): string;
</span><span class='line'>begin
</span><span class='line'>  Result := AppName;
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>function InitializeSetup(): Boolean;
</span><span class='line'>begin
</span><span class='line'>
</span><span class='line'>  ExtractTemporaryFile('Office2007.cjstyles');
</span><span class='line'>  LoadSkin(ExpandConstant('{tmp}\Office2007.cjstyles'), 'NormalAqua.ini');
</span><span class='line'>      
</span><span class='line'>  Result := True;
</span><span class='line'>end;
</span><span class='line'>
</span><span class='line'>procedure DeinitializeSetup();
</span><span class='line'>begin
</span><span class='line'>  // Hide Window before unloading skin so user does not get
</span><span class='line'>  // a glimse of an unskinned window before it is closed.
</span><span class='line'>  ShowWindow(StrToInt(ExpandConstant('{wizardhwnd}')), 0);
</span><span class='line'>  UnloadSkin();
</span><span class='line'>end;</span></code></pre></td></tr></table></div></figure>


<p>Kemudian skrip di atas kita simpan di folder <code>Rilis</code> misal dengan nama <code>SetupKRSchool.iss</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-01.png"></p>

<p>File <code>SetupKRSchool.iss</code> di atas akan kita compile menggunakan tool bawaan <a href="http://jrsoftware.org/">Inno Setup</a> yaitu <code>ISCC.exe</code>. Untuk contoh penggunaanya seperti ini :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iscc "c:\rilis\SetupKRSchool.iss"</span></code></pre></td></tr></table></div></figure>


<p>Nah perintah di atas akan kita panggil melalui Dialog Build Events</p>

<p><strong>Revisi Perintah Build Event</strong></p>

<p>Pada <a href="http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1/">postingan</a> sebelumnya kita sudah menulis perintah sederhana di dialog Build Events</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-02.png"></p>

<p>Kita akan merivisi perintah diatas untuk menjalankan  tool bawaan <a href="http://jrsoftware.org/">Inno Setup</a> yaitu <code>ISCC.exe</code>. Dengan tool ini kita bisa langsung mengcompile skrip <a href="http://jrsoftware.org/">Inno Setup</a>.</p>

<p>Berikut perintah lengkapnya.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-03.png"></p>

<p>Pada perintah di atas saya menambahkan kondisi</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if "$(ConfigurationName)" == "Debug" goto skip</span></code></pre></td></tr></table></div></figure>


<p>yang artinya perintah build event di atas hanya akan dijalankan jika <code>Solution Configuration</code> atau  <code>Configuration Manager</code> di set <code>Release</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-04.png"></p>

<p>Setelah itu lakukan proses <code>build -&gt; project</code>, maka semua file dll atau exe yang ada di folder <code>bin\Debug</code> atau <code>bin\Release</code> akan dicopykan ke folder <code>C:\Rilis</code>, kemudian akan dilanjutkan dengan mengcompile skrip <a href="http://jrsoftware.org/">Inno Setup</a>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-05.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-06.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-07.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/07/010715-08.png"></p>

<p>Selamat MENCOBA :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of Visual Studio .NET Build Events Part #1]]></title>
    <link href="http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1/"/>
    <updated>2015-06-25T22:51:48+07:00</updated>
    <id>http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/06/260615-00.png" width="130" height="130">Build Events merupakan salah fitur menarik yang dimiliki oleh Visual Studio.NET, dengan fitur ini akan membuat hidup kita sebagai <code>software developer</code> semakin mudah :D</p>

<p>Saya sendiri menggunakan fitur ini untuk melakukan proses copy file (exe, dll, config) secara otomatis setelah proses build project, tetapi bukan itu saja dengan fitur ini kita juga bisa menjalankan perintah tertentu seperti <code>batch command</code> atau perintah lainnya sesuai kebutuhan seperti  mengupload library hasil build web service ke server IIS atau mengeksekusi skrip installer seperti <a href="http://coding4ever.net/blog/categories/inno-setup/">Inno Setup</a> dan <a href="http://coding4ever.net/blog/categories/nsis/">NSIS</a>.</p>

<!-- more -->


<p><strong>Build Events</strong></p>

<p>Build Events merupakan salah satu fitur dari Visual Studio .NET yang bisa diaktifkan melalui Project -> Properties</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-01.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-02.png"></p>

<p>Build Events mempunyai dua event yaitu <code>Pre-build event</code> dan <code>Post-build event</code> sesuai  namanya <code>pre</code> di jalankan sebelum proses build dan <code>post</code> setelah proses build.</p>

<p><strong>Dialog Build Events</strong></p>

<p>Dialog Build Events merupakan tempat untuk menuliskan perintah sesuai dengan yang kita inginkan.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-03.png"></p>

<p>Dialog Build Events juga menyediakan <code>Macros</code> yang di dalamnya terdapat daftar variabel bawaan (built-in) yang bisa digunakan pada saat menuliskan perintah <code>build-event</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-04.png"></p>

<p>Kita bisa menambahkan <code>macros</code> dengan cara klik ganda item <code>macros</code>. Pemanggilan nama <code>macros</code> menggunakan format $(xxx), dimana <code>xxx</code> adalah nama <code>macros</code>. Contoh :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-05.png"></p>

<p>Pada saat perintah <code>build-event</code> dijalankan <code>macros</code> ini akan diganti dengan nilai aslinya (nilai aktual). Contoh berdasarkan gambar di atas <code>$(SolutionDir)</code> nilainya akan diganti dengan <code>D:\Postingan coding4ever\coding4ever\c#\KRSchool</code>.</p>

<p>Jadi ketika kita menuliskan perintah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>copy /Y "$(TargetDir)KRSchool.*.dll" "$(SolutionDir)Rilis"</span></code></pre></td></tr></table></div></figure>


<p>Sama artinya kita menuliskan</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>copy /Y "D:\Postingan coding4ever\coding4ever\c#\KRSchool\KRSchool.UI.Main\bin\Debug\KRSchool.*.dll" "D:\Postingan coding4ever\coding4ever\c#\KRSchool\Rilis"</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-06.png"></p>

<p>Berikut adalah daftar lengkap <code>macros</code> yang disediakan oleh Visual Studio .NET</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-07.png"></p>

<p>Untuk kolom <code>Value</code> nilainya akan menyesuaikan dengan lokasi solution Anda.</p>

<p><strong>Menggunakan Post-Build Events</strong></p>

<p>Saya biasanya menggunakan <code>post-build events</code> untuk keperluan mengcopy hasil build project ke <code>folder tertentu</code>, dari pada mengcopy manual dari folder <code>bin\Debug</code> atau <code>bin\Release</code>. Folder tertentu ini misalnya <code>C:\Rilis</code>, maka kita bisa mengetikan peritah berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-08.png"></p>

<p>Macro <code>TargetDir</code> ini nilainya tergantung dari setting <code>Configuration Manager</code>, apakah di set <code>Debug</code> atau <code>Release</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-09.png"></p>

<p>Setelah itu lakukan proses <code>build -&gt; project</code>, maka semua file dll atau exe yang ada di folder <code>bin\Debug</code> atau <code>bin\Release</code> akan dicopykan ke folder <code>C:\Rilis</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-10.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-11.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/260615-12.png"></p>

<p>Selamat MENCOBA :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cara Mudah Mengelola Versi Aplikasi]]></title>
    <link href="http://coding4ever.net/blog/2015/06/23/cara-mudah-mengelola-versi-aplikasi/"/>
    <updated>2015-06-23T11:06:50+07:00</updated>
    <id>http://coding4ever.net/blog/2015/06/23/cara-mudah-mengelola-versi-aplikasi</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://coding4ever.files.wordpress.com/2015/06/230615-00.png" width="100" height="100">Oke jadi ceritanya seperti ini, saya punya kebiasaan dan saya enggak tau apakah ini kebiasaan baik atau buruk :D</p>

<p>Untuk menerapkan konsep <code>separation of concerns</code> dalam pengembangan aplikasi, saya biasanya memisahkan modul-modul aplikasi menjadi beberapa project (satu solution dengan banyak project/assemblies). Contoh :</p>

<!-- more -->


<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-01.png"></p>

<p>Dari gambar di atas klo kita build akan menghasilkan beberapa file assembly seperti berikut :</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-02.png"></p>

<p>Kebiasaan saya yang lain adalah setiap <code>assembly</code>, apakah itu berupa file <a href="https://en.wikipedia.org/wiki/Dynamic-link_library">dll</a> atau exe, harus mempunyai versi yang sama. Misalkan kalo rilis pertama, saya set versinya = 1.0.0 maka semua <code>assembly</code>-nya harus punya versi yang sama.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-03.png"></p>

<p>Klo rilis berikutnya versinya = 1.2.0, maka semua versi <code>assembly</code>-nya juga harus sama</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-04.png"></p>

<p>Kan jadi enggak lucu klo versi <code>assembly</code>-nya ada yang beda he he :D</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-05.png"></p>

<p><strong>Merubah Versi Assembly</strong></p>

<p>Kalo cara biasa, misal kita punya empat project, berarti kita juga harus merubah versi <code>assembly</code> di empat lokasi yang berbeda</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-06.png"></p>

<p>Dari gambar di atas kita bisa melihat informasi versi <code>assembly</code> tersimpan di file <code>AssemblyInfo.cs</code> masing-masing project. Klo penasaran ini nih isinya he he :D</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-07.png"></p>

<p>Nah ini yang sedikit merepotkan dan kadang-kadang sedikit melelahkan :D, sudah di<code>build</code> eh ada <code>assembly</code> yang lupa diganti versinya, jadi <code>build</code> ulang deh he he :D</p>

<p>Trus solusinya gimana ? Cara yang saya gunakan adalah dengan membuat <code>Global Version</code> misal dengan nama <code>VersionInfo</code>. File <code>VersionInfo</code> ini merupakan file dari <code>Solution</code> jadi scopenya sama dengan project.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-08.png"></p>

<p>Nah untuk menambahkan file <code>VersionInfo</code> di atas caranya juga gampang, berikut langkah-langkahnya :</p>

<ol>
<li><p>Klik kanan Solution -> Add -> New Item…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-09.png"></p></li>
<li><p>Pilih item Visual C#/Basic Class</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-10.png"></p></li>
<li><p>Jika berhasil file <code>VersionInfo</code> akan tersimpan di folder <code>Solution Items</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-11.png"></p>

<p>Kemudian hapus semua isi file <code>VersionInfo</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-12.png"></p></li>
<li><p>Setelah itu copy <code>sebagian</code> informasi salah satu file <code>AssemblyInfo.cs</code> ke <code>VersionInfo</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-13.png"></p></li>
<li><p>Kemudian edit <code>sebagian</code> isi file <code>AssemblyInfo.cs</code> masing-masing project (cek yang ada komentar // di nonaktifkan)</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-14.png"></p></li>
<li><p>Terakhir masing-masing project menambahkan link ke file <code>VersionInfo</code></p>

<ul>
<li><p>Klik kanan Project -> Add -> Existing Item…</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-15.png"></p></li>
<li><p>Pilih file <code>VersionInfo</code> kemudian <code>Add As Link</code></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-16.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-17.png"></p></li>
</ul>


<p>Kemudian ulangi langkah-langkah sebelumnya untuk menambahkan link file <code>VersionInfo</code> ke project lainnya</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-18.png"></p></li>
</ol>


<p>Nah Sampai di sini tugas kita sudah selesai, sehingga ketika ada perubahan versi kita cukup merubah di satu file yaitu file <code>VersionInfo</code> yang ada di <code>Solution Items</code>.</p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-19.png"></p>

<p><img class="center" src="https://coding4ever.files.wordpress.com/2015/06/230615-20.png"></p>

<p>Selamat MENCOBA :)</p>

<p>Referensi : <a href="http://www.codeproject.com/Articles/328977/The-Right-Way-to-Version-Your-Assemblies">The Right Way to Version Your Assemblies</a></p>
]]></content>
  </entry>
  
</feed>
