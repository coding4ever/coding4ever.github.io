<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visual Basic .net | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/visual-basic-net/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2014-11-06T12:06:50+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 2]]></title>
    <link href="http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2/"/>
    <updated>2013-02-22T10:38:14+07:00</updated>
    <id>http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2</id>
    <content type="html"><![CDATA[<p>Melanjutkan pembahasan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">Dapper .NET</a>, kali ini saya akan mendemokan bagaimana mudahnya melakukan proses mapping record ke object dengan memanfaatkan library <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a>.</p>

<p>Masih menggunakan kasus yang sama dengan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya, kita sudah mempunyai tabel siswa berikut class entitynya, biar lebih mudah saya copas aja ke sini.</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png" alt="07022013-2" /></a></p>

<p>{% codeblock lang:c# %}
public class Siswa
{
    public string Nis { get; set; }
    public string Nama { get; set; }
}
{% endcodeblock %}</p>

<p>dan untuk VB.NET coder kodenya terlihat lebih banyak :D</p>

<p>{% codeblock lang:vbnet %}
Public Class Siswa</p>

<pre><code>Private _nis As String
Public Property Nis() As String
    Get
        Return _nis
    End Get
    Set(ByVal value As String)
        _nis = value
    End Set
End Property

Private _nama As String
Public Property Nama() As String
    Get
        Return _nama
    End Get
    Set(ByVal value As String)
        _nama = value
    End Set
End Property
</code></pre>

<p>End Class
{% endcodeblock %}</p>

<p>Sebelum kita beraksi jangan lupa untuk mendownload terlebih dulu library Dapper .NET di<a href="https://www.box.com/s/cey4lt613heunjcnodqq">sini</a> (dotNetFx35) dan di<a href="https://www.box.com/s/i72nqtpun9c0fah495nl">sini</a> (dotNetFx40). Jadi silahkan download sesuai dengan versi dot NET Framework Anda.</p>

<p>Langkah berikutnya adalah mengaktifkan kembali <a href="https://www.box.com/s/tzeyatmfyoemfdhjdod6">project</a> yang sudah kita bahas pada <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png" alt="21022013-1" /></a></p>

<p>Kemudian tambahkan referensi library Dapper .NET, dengan cara :</p>

<ol>
<li>Klik kanan node References</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png" alt="21022013-2" /></a></p>

<ol>
<li>Kemudian tentukan lokasi library Dapper .NET yang sudah Anda download</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png" alt="21022013-3" /></a></p>

<p>Jika berhasil akan ketambahan sub node baru (Dapper) di bawah node References</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png" alt="21022013-4" /></a></p>

<p>Cara kerja <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> adalah dengan mengextend interface IDbConnection yang digunakan oleh class-class connection seperti SqlConnection dan OleDbConnection.</p>

<p>Klo masih bingung perhatikan gambar berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png" alt="21022013-5" /></a></p>

<p>sekarang coba tambahkan namespace Dapper;</p>

<p>{% codeblock lang:c# %}
using Dapper;
{% endcodeblock %}</p>

<p>di VB.NET kita menggunakan keyword Imports</p>

<p>{% codeblock lang:vbnet %}
Imports Dapper
{% endcodeblock %}</p>

<p>maka secara otomatis objek conn akan mempunyai tambahan beberapa method baru seperti <strong>Execute</strong>, <strong>Query</strong> dan <strong>QueryMultiple</strong>.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png" alt="21022013-6" /></a></p>

<p>Nah method-method itulah yang kita gunakan untuk menjalankan perintah-perintah SQL seperti INSERT, UPDATE, DELETE dan SELECT. Klo istilah krennya sih operasi CRUD.</p>

<p>Oke untuk contoh postingan kali ini kita akan mencoba menjalankan perintah SELECT dengan memanggil method Query di atas.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png" alt="21022013-7" /></a></p>

<p>berikut kode VB.NET yg melakukan hal yang sama</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png" alt="26022013-1" /></a></p>

<p>pada kode di atas kita bisa melihat tanpa melakukan proses mapping sedikit pun, objek daftarSiswa akan terisi dengan kumpulan (collection) dari objek siswa, hanya dengan perintah sederhana berikut:</p>

<p>{% codeblock lang:c# %}
daftarSiswa = conn.Query(strSql, null).ToList();
{% endcodeblock %}</p>

<p>kode yang sama untuk VB.NET</p>

<p>{% codeblock lang:vbnet %}
daftarSiswa = conn.Query(Of Siswa)(strSql, Nothing).ToList()
{% endcodeblock %}</p>

<p>Tapi ada syaratnya yaitu nama-nama field yang ada di dalam tabel harus sama dengan nama-nama property yang ada di dalam class entity.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png" alt="21022013-8" /></a></p>

<p>Trus bagaimana klo nama field dan propertynya berbeda ? Solusinya ya dengan menggunakan ALIAS pada saat melakukan proses query.</p>

<p>Lihat contoh berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png" alt="21022013-9" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png" alt="21022013-10" /></a></p>

<p>atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png" alt="26022013-2" /></a></p>

<p>Setelah itu tinggal ditampilkan hasilnya :</p>

<p>{% codeblock lang:c# %}
foreach (var siswa in daftarSiswa)
{
    Console.WriteLine(siswa.Nis + &ldquo;\t&rdquo; + siswa.Nama);
}
{% endcodeblock %}</p>

<p>sekali lagi di VB.NET</p>

<p>{% codeblock lang:vbnet %}
For Each siswa In daftarSiswa
    Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)
Next
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013.png" alt="07022013" /></a></p>

<p>Yuph saya rasa cukup untuk postingan kali ini, dan pada postingan berikutnya insyaAllah kita akan membahas bagaimana menjalankan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE menggunakan library Dapper .NET.</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET2">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 1]]></title>
    <link href="http://coding4ever.net/blog/2013/02/07/dapper-net-micro-orm-part-1/"/>
    <updated>2013-02-07T14:58:15+07:00</updated>
    <id>http://coding4ever.net/blog/2013/02/07/dapper-net-micro-orm-part-1</id>
    <content type="html"><![CDATA[<p>Sudah lama saya ingin mengembangkan aplikasi menggunakan tool-tool <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> seperti ADO.NET Entity Framework, MyBatis, LINQ to SQL, NHibernate dan tool ORM lainnya.</p>

<p>Sempat sedikit serius untuk mempelajari NHibernate tapi&hellip; dengan alasan sok sibuk :D akhirnya stop ditengah jalan :(.</p>

<p>Masih belum menyerah saya pun mencoba mencari alternatif lain penggunaan tool ORM dengan melakukan pencarian  menggunakan keyword &ldquo;<strong>micro orm for .net</strong>&rdquo; dari sekian banyak pilihan micro ORM yang ada pilihan saya jatuh ke <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> dengan pertimbangan micro ORM ini sudah digunakan oleh website besar seperti <a href="http://stackoverflow.com/">Stack Overflow</a>, <a href="http://www.xapfest.com/">xpfest.com</a>, <a href="http://www.jitbit.com/helpdesk-software/">helpdesk</a>, <a href="http://www.worldcitycard.com/">worldcitycard</a>, <a href="http://www.ppmroadmap.com/">roadmap</a>.</p>

<!-- more -->


<p><a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> sendiri dibuat oleh om <a href="http://samsaffron.com/">Sam Saffron</a> salah seorang developer berbakat yang ada di belakang <a href="http://stackoverflow.com">Stack Overflow</a>.</p>

<p>Sebelum menggunakan <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> kita lihat dulu bagaimana mengakses database menggunakan library ADO .NET secara langsung.</p>

<p>Contoh kasusnya sederhana kita akan menampilkan data Siswa dengan menggunakan bahasa pemrograman C# dan VB.NET sedangkan untuk databasenya menggunakan Ms Access.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png" alt="07022013-2" /></a></p>

<p>{% codeblock lang:c# %}
using System.Data.OleDb;</p>

<p>namespace SiswaDapperNET1
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var conn = GetOpenConnection())
            {
                var strSql = &ldquo;SELECT nis, nama FROM siswa&rdquo;;
                using (var cmd = new OleDbCommand(strSql, conn))
                {
                    using (var dtr = cmd.ExecuteReader())
                    {
                        Console.WriteLine(&ldquo;NIS\tNAMA&rdquo;);
                        Console.WriteLine(&ldquo;===================================&rdquo;);
                        while (dtr.Read())
                        {
                            Console.WriteLine(dtr[&ldquo;nis&rdquo;] + &ldquo;\t&rdquo; + dtr[&ldquo;nama&rdquo;].ToString().ToUpper());
                        }
                    }
                }
            }</p>

<pre><code>        Console.ReadKey();
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :</p>

<p>{% codeblock lang:vbnet %}
Sub Main()</p>

<pre><code>Using conn As OleDbConnection = GetOpenConnection()

    Dim strSql = "SELECT nis, nama FROM siswa"
    Using cmd = New OleDbCommand(strSql, conn)
        Using dtr As OleDbDataReader = cmd.ExecuteReader()

            Console.WriteLine ("NIS" &amp; vbTab &amp; "NAMA")
            Console.WriteLine ("===================================")
            While dtr.Read()
                Console.WriteLine (dtr("nis") &amp; vbTab &amp; dtr("nama"))
            End While

        End Using
    End Using
End Using
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Method Main di atas membutuhkan method GetOpenConnection yang digunakan untuk membuat koneksi ke database Ms Access.</p>

<p>{% codeblock lang:c# %}
private static OleDbConnection GetOpenConnection()
{
    OleDbConnection conn = null;</p>

<pre><code>try
{

    var appDir = System.IO.Directory.GetCurrentDirectory();
    var strConn = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + appDir + "\\SISWA.MDB;User Id=admin;Password=;";

    conn = new OleDbConnection(strConn);
    conn.Open();
}
catch (Exception)
{
}

return conn;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>dan untuk programmer VB.NET</p>

<p>{% codeblock lang:vbnet %}
Private Function GetOpenConnection() As OleDbConnection
    Dim conn As OleDbConnection = Nothing</p>

<pre><code>Dim appDir As String = System.IO.Directory.GetCurrentDirectory()
Dim strConn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + appDir + "\SISWA.MDB;User Id=admin;Password=;"

Try

    conn = New OleDbConnection(strConn)
    conn.Open()

Catch ex As Exception

End Try

Return conn
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Selanjutnya kita akan memberikan sedikit sentuhan OOP terhadap kode di atas dengan melakukan mapping/pemetaan baris/row dari tabel menjadi objek.</p>

<p>Perhatikan ilustrasi berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-31.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-31.png" alt="26022013-3" /></a></p>

<p>Mapping bisa dilakukan secara manual atau menggunakan tool ORM (Object Relational Mapping).</p>

<p>Untuk contoh di bawah ini kita melakukan mapping secara manual, tetapi sebelumnya kita harus membuat sebuah class terlebih dulu yang disebut dengan class entity/model.</p>

<p>Class ini merupakan representasi dari tabel-tabel yang ada di dalam sebuah database.</p>

<p>Berdasarkan tabel Siswa di atas, kita akan membuat sebuah class dengan nama Siswa, field/property dari class ini sama persis dengan field-field yang ada di tabel Siswa.</p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<p>{% codeblock lang:c# %}
public class Siswa
{
    public string Nis { get; set; }
    public string Nama { get; set; }
}
{% endcodeblock %}</p>

<p>Jika menggunakan VB.NET kodenya terlihat lebih banyak :D</p>

<p>{% codeblock lang:vbnet %}
Public Class Siswa</p>

<pre><code>Private _nis As String
Public Property Nis() As String
    Get
        Return _nis
    End Get
    Set(ByVal value As String)
        _nis = value
    End Set
End Property

Private _nama As String
Public Property Nama() As String
    Get
        Return _nama
    End Get
    Set(ByVal value As String)
        _nama = value
    End Set
End Property
</code></pre>

<p>End Class
{% endcodeblock %}</p>

<p>Kemudian kita juga akan menambahkan sebuah method baru dengan nama GetDataSiswa, method ini akan mengembalikan kumpulan (collection) dari data siswa.</p>

<p>{% codeblock lang:c# %}
private static List<Siswa> GetDataSiswa()
{
    var daftarSiswa = new List<Siswa>();</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var strSql = "SELECT nis, nama FROM siswa";
    using (var cmd = new OleDbCommand(strSql, conn))
    {
        using (var dtr = cmd.ExecuteReader())
        {
            while (dtr.Read())
            {
                // proses mapping dari row ke object
                var siswa = new Siswa();
                siswa.Nis = dtr["nis"] == null ? string.Empty : dtr.GetString(0);
                siswa.Nama = dtr["nama"] == null ? string.Empty : dtr.GetString(1).ToUpper();

                daftarSiswa.Add(siswa);
            }
        }
    }
}

return daftarSiswa;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>sementara di VB.NET akan terlihat seperti berikut :</p>

<p>{% codeblock lang:vbnet %}
Private Function GetDataSiswa() As List(Of Siswa)</p>

<pre><code>Dim daftarSiswa As New List(Of Siswa)

Using conn As OleDbConnection = GetOpenConnection()

    Dim strSql = "SELECT nis, nama FROM siswa"
    Using cmd = New OleDbCommand(strSql, conn)
        Using dtr As OleDbDataReader = cmd.ExecuteReader()

            While dtr.Read()
                Dim siswa As New Siswa()
                With siswa
                    .Nis = IIf(IsDBNull(dtr("nis")), String.Empty, dtr("nis").ToString())
                    .Nama = IIf(IsDBNull(dtr("nama")), String.Empty, dtr("nama").ToString())
                End With

                daftarSiswa.Add (siswa)
            End While

        End Using
    End Using
End Using

Return daftarSiswa
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Terakhir kita akan melakukan revisi terhadap method Main diatas.</p>

<p>{% codeblock lang:c# %}
static void Main(string[] args)
{
    /<em>
    using (var conn = GetOpenConnection())
    {
        var strSql = &ldquo;SELECT nis, nama FROM siswa&rdquo;;
        using (var cmd = new OleDbCommand(strSql, conn))
        {
            using (var dtr = cmd.ExecuteReader())
            {
                Console.WriteLine(&ldquo;NIS\tNAMA&rdquo;);
                Console.WriteLine(&ldquo;===================================&rdquo;);
                while (dtr.Read())
                {
                    Console.WriteLine(dtr[&ldquo;nis&rdquo;] + &ldquo;\t&rdquo; + dtr[&ldquo;nama&rdquo;].ToString().ToUpper());
                }
            }
        }
    }
    </em>/</p>

<pre><code>Console.WriteLine("NIS\tNAMA");
Console.WriteLine("===================================");

var daftarSiswa = GetDataSiswa();
foreach (var siswa in daftarSiswa)
{
    Console.WriteLine(siswa.Nis + "\t" + siswa.Nama);
}

Console.ReadKey();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>sekali lagi di VB.NET :</p>

<p>{% codeblock lang:vbnet %}
Sub Main()</p>

<pre><code>'Using conn As OleDbConnection = GetOpenConnection()

'    Dim strSql = "SELECT nis, nama FROM siswa"
'    Using cmd = New OleDbCommand(strSql, conn)
'        Using dtr As OleDbDataReader = cmd.ExecuteReader()

'            Console.WriteLine("NIS" &amp; vbTab &amp; "NAMA")
'            Console.WriteLine("===================================")
'            While dtr.Read()
'                Console.WriteLine(dtr("nis") &amp; vbTab &amp; dtr("nama"))
'            End While

'        End Using
'    End Using
'End Using

Console.WriteLine ("NIS" &amp; vbTab &amp; "NAMA")
Console.WriteLine ("===================================")

Dim daftarSiswa = GetDataSiswa()

For Each siswa In daftarSiswa
    Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)
Next

Console.ReadKey()
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Jika program di atas dijalankan akan menghasilkan output seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013.png" alt="07022013" /></a></p>

<p>Untuk penggunaan micro ORM <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a>, insyaAllah akan kita mulai pembahasannya pada <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> berikutnya :D.</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET1">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beberapa Fungsi Sederhana Yang Sering Digunakan]]></title>
    <link href="http://coding4ever.net/blog/2011/11/22/beberapa-fungsi-sederhana-yang-sering-digunakan/"/>
    <updated>2011-11-22T09:13:12+07:00</updated>
    <id>http://coding4ever.net/blog/2011/11/22/beberapa-fungsi-sederhana-yang-sering-digunakan</id>
    <content type="html"><![CDATA[<p><strong>1. ConvertToUpper</strong></p>

<p>Sesuai namanya fungsi ini otomatis melakukan konversi ke huruf besar, fungsinya sangat sederhana sekali</p>

<p>C# :
{% codeblock lang:c# %}
private char ConvertToUpper(System.Windows.Forms.KeyPressEventArgs e)
{
    return Convert.ToChar(e.KeyChar.ToString().ToUpper());
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function ConvertToUpper(e As System.Windows.Forms.KeyPressEventArgs) As Char
    Return Convert.ToChar(e.KeyChar.ToString().ToUpper())
End Function
{% endcodeblock %}</p>

<!-- more -->


<p>kemudian fungsi diatas kita panggil di event KeyPress</p>

<p>C# :
{% codeblock lang:c# %}
private void txtConvertToUpper_KeyPress(object sender, KeyPressEventArgs e)
{
    e.KeyChar = ConvertToUpper(e);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtConvertToUppe_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtConvertToUppe.KeyPress
    e.KeyChar = ConvertToUpper(e)
End Sub
{% endcodeblock %}</p>

<p><strong>2. ConvertToLower</strong></p>

<p>Fungsi berikutnya kebalikan dari fungsi ConvertToUpper yaitu mengkonversi ke huruf kecil.</p>

<p>C# :
{% codeblock lang:c# %}
private char ConvertToLower(System.Windows.Forms.KeyPressEventArgs e)
{
    return Convert.ToChar(e.KeyChar.ToString().ToLower());
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function ConvertToLower(e As System.Windows.Forms.KeyPressEventArgs) As Char
    Return Convert.ToChar(e.KeyChar.ToString().ToLower())
End Function
{% endcodeblock %}</p>

<p>Untuk pemanggilannya juga masih sama di event KeyPress</p>

<p>C# :
{% codeblock lang:c# %}
private void txtConvertToLower_KeyPress(object sender, KeyPressEventArgs e)
{
    e.KeyChar = ConvertToLower(e);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtConvertToLower_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtConvertToLower.KeyPress
    e.KeyChar = ConvertToLower(e)
End Sub
{% endcodeblock %}</p>

<p><strong>3. NumericOnly</strong></p>

<p>Fungsi ini hanya mengizinkan input dalam bentuk angka plus titik (.) untuk desimalnya</p>

<p>C# :
{% codeblock lang:c# %}
private bool NumericOnly(System.Windows.Forms.KeyPressEventArgs e)
{
    string strValid = &ldquo;0123456789.&rdquo;;</p>

<pre><code>if (strValid.IndexOf(e.KeyChar) &lt; 0 &amp;&amp; !(e.KeyChar == Convert.ToChar(Keys.Back)))
{
    return true; // not valid
}
else
{
    return false; // valid
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function NumericOnly(e As System.Windows.Forms.KeyPressEventArgs) As Boolean
    Dim strValid As String = &ldquo;0123456789.&rdquo;</p>

<pre><code>If strValid.IndexOf(e.KeyChar) &lt; 0 AndAlso Not (e.KeyChar = Convert.ToChar(Keys.Back)) Then
    ' not valid
    Return True
Else
    ' valid
    Return False
End If
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Untuk pemanggilannya juga masih sama di event KeyPress</p>

<p>C# :
{% codeblock lang:c# %}
private void txtNumericOnly_KeyPress(object sender, KeyPressEventArgs e)
{
    e.Handled = NumericOnly(e);
}
{% endcodeblock %}</p>

<p>VB.NET
{% codeblock lang:vbnet %}
Private Sub txtNumericOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtNumericOnly.KeyPress
    e.Handled = NumericOnly(e)
End Function
{% endcodeblock %}</p>

<p>Fungsi NumericOnly diatas udah oke banget, tapi sayangnya kita masih bisa menginputkan nilai seperti 25.33.1 atau 25..3.</p>

<p>Intinya untuk tanda titik (.) masih bisa diinputnya lebih dari satu dan ini tidak benar jadi harus kita tambahkan validasi sedikit lagi.</p>

<p>Pertama kita deklarsikan dulu sebuah variabel untuk menyimpan status tanda titik (.).</p>

<p>C# :
{% codeblock lang:c# %}
private bool isDecimal = false;
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private isDecimal As Boolean = False
{% endcodeblock %}</p>

<p>Kemudian kita tambahkan validasi di event TextChanged untuk mengetahui apakah sudah ada tanda titik yang diinputkan.</p>

<p>C# :
{% codeblock lang:c# %}
private void txtNumericOnly_TextChanged(object sender, EventArgs e)
{
    isDecimal = false;</p>

<pre><code>int index = ((TextBox)sender).Text.IndexOf(".");
isDecimal = !(index &lt; 0);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtNumericOnly_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtNumericOnly.TextChanged
    isDecimal = False</p>

<pre><code>Dim index As Integer = DirectCast(sender, TextBox).Text.IndexOf(".")
isDecimal = Not (index &lt; 0)
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Terakhir kita revisi event KeyPressnya</p>

<p>C# :
{% codeblock lang:c# %}
private void txtNumericOnly_KeyPress(object sender, KeyPressEventArgs e)
{
    // tambah validasi pengecekan desimal disini
    if (isDecimal &amp;&amp; (e.KeyChar == Convert.ToChar(&ldquo;.&rdquo;)))
    {
        e.Handled = true;
    }
    else
    {
        e.Handled = NumericOnly(e);
    }
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtNumericOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtNumericOnly.KeyPress
    &lsquo; tambah validasi pengecekan desimal disini
    If isDecimal AndAlso (e.KeyChar = Convert.ToChar(&ldquo;.&rdquo;)) Then
        e.Handled = True
    Else
        e.Handled = NumericOnly(e)
    End If
End Sub
{% endcodeblock %}</p>

<p>Yuph sampe disini fungsinya udah tambah oke :)</p>

<p><strong>4. LetterOnly</strong></p>

<p>Fungsi yang hanya mengizinkan input berupa huruf besar/kecil plus titik dan spasi, fungsinya mirip sekali dengan fungis NumericOnly hanya karakter yang didaftarkan saja yang berbeda.</p>

<p>C# :
{% codeblock lang:c# %}
private bool LetterOnly(System.Windows.Forms.KeyPressEventArgs e)
{
    string strValid = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. &rdquo;;</p>

<pre><code>if (strValid.IndexOf(e.KeyChar) &lt; 0 &amp;&amp; !(e.KeyChar == Convert.ToChar(Keys.Back)))
{
    return true; // not valid
}
else
{
    return false; // valid
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function LetterOnly(e As System.Windows.Forms.KeyPressEventArgs) As Boolean
    Dim strValid As String = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. &rdquo;</p>

<pre><code>If strValid.IndexOf(e.KeyChar) &lt; 0 AndAlso Not (e.KeyChar = Convert.ToChar(Keys.Back)) Then
    ' not valid
    Return True
Else
    ' valid
    Return False
End If
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Cara penggunaanya juga otomatis masih sama</p>

<p>C# :
{% codeblock lang:c# %}
private void txtLetterOnly_KeyPress(object sender, KeyPressEventArgs e)
{
    e.Handled = LetterOnly(e);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtLetterOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtLetterOnly.KeyPress
    e.Handled = LetterOnly(e)
End Sub
{% endcodeblock %}</p>

<p><strong> 5. ThousandSeparator</strong></p>

<p>Fungsi ini otomatis akan menambahkan pemisah ribuan pada inputan berupa angka.</p>

<p>C# :
{% codeblock lang:c# %}
private void SetThousandSeparator(TextBox txt)
{
    if (txt.Text.Length > 0)
    {
        try
        {
            string s = txt.Text.Replace(&ldquo;,&rdquo;, &ldquo;&rdquo;);</p>

<pre><code>        int i = int.Parse(s);
        txt.Text = string.Format("{0:###,###,###}", i);

        txt.SelectionStart = txt.Text.Length;
    }
    catch
    {
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub SetThousandSeparator(txt As TextBox)
    If txt.Text.Length > 0 Then
        Try
            Dim s As String = txt.Text.Replace(&ldquo;,&rdquo;, &ldquo;&rdquo;)</p>

<pre><code>        Dim i As Integer = Integer.Parse(s)
        txt.Text = String.Format("{0:###,###,###}", i)

        txt.SelectionStart = txt.Text.Length
    Catch
    End Try
End If
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Untuk pemanggilannya di event TextChanged</p>

<p>C# :
{% codeblock lang:c# %}
private void txtThousandSeparator_TextChanged(object sender, EventArgs e)
{
    SetThousandSeparator((TextBox)sender);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtThousandSeparator_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtThousandSeparator.TextChanged
    SetThousandSeparator (DirectCast(sender, TextBox))
End Function
{% endcodeblock %}</p>

<p>Agar fungsi SetThousandSeparator bisa bekerja dengan baik tambahkan juga validasi angkanya</p>

<p>C# :
{% codeblock lang:c# %}
private void txtThousandSeparator_KeyPress(object sender, KeyPressEventArgs e)
{
    e.Handled = NumericOnly(e);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtThousandSeparator_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtThousandSeparator.KeyPress
    e.Handled = NumericOnly(e)
End Function
{% endcodeblock %}</p>

<p>Kemudian set property TextAlign = Right</p>

<p><strong>FUNGSI PENTING LAINNYA</strong></p>

<p><strong>6. IsEnter</strong></p>

<p>Untuk mendeteksi penekan tombol Enter, sehingga bisa kita manfaatkan untuk perpindahan fokus cursor pada saat input data.</p>

<p>C# :
{% codeblock lang:c# %}
private bool IsEnter(System.Windows.Forms.KeyPressEventArgs e)
{
    return (e.KeyChar == (char)Keys.Return);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function IsEnter(e As System.Windows.Forms.KeyPressEventArgs) As Boolean
    Return (e.KeyChar = ChrW(Keys.Return))
End Function
{% endcodeblock %}</p>

<p>Penggunaanya masih di event KeyPress</p>

<p>C# :
{% codeblock lang:c# %}
private void txtConvertToUpper_KeyPress(object sender, KeyPressEventArgs e)
{
    if (IsEnter(e)) SendKeys.Send(&ldquo;{Tab}&rdquo;);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub txtConvertToUpper_KeyPress(sender As Object, e As KeyPressEventArgs)
    If IsEnter(e) Then
        SendKeys.Send (&ldquo;{Tab}&rdquo;)
    End If
End Sub
{% endcodeblock %}</p>

<p><strong>7. IsEsc</strong></p>

<p>Untuk mendeteksi penekanan tombol Esc, salah satu implementasinya adalah menutup form aktif dengan menekan tombol Esc.</p>

<p>C# :
{% codeblock lang:c# %}
private bool IsEsc(System.Windows.Forms.KeyPressEventArgs e)
{
    return (e.KeyChar == (char)Keys.Escape);
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Function IsEsc(e As System.Windows.Forms.KeyPressEventArgs) As Boolean
    Return (e.KeyChar = ChrW(Keys.Escape))
End Function
{% endcodeblock %}</p>

<p>Nah jika pada fungsi-fungsi sebelumnya semua fungsinya kita panggil di event TextBox, untuk fungsi IsEsc akan kita panggil di event KeyPress milik objek form.</p>

<p>C# :
{% codeblock lang:c# %}
private void Form1_KeyPress(object sender, KeyPressEventArgs e)
{
    if (IsEsc(e)) this.Close();
}
{% endcodeblock %}</p>

<p>VB.NET :
{% codeblock lang:vbnet %}
Private Sub Form1_KeyPress(sender As Object, e As KeyPressEventArgs)
    If IsEsc(e) Then
        Me.Close()
    End If
End Sub
{% endcodeblock %}</p>

<p>Dan jangan lupa set property KeyPreview = True</p>

<p>Beberapa fungsi diatas sudah saya bundle menjadi satu komponen yang bisa didownload di<a href="{{%20site.url%20}}/blog/2010/12/01/coding4ever-advanced-textbox/">sini</a>.</p>

<p>Selamat mencoba :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menyimpan Dan Menampilkan Gambar Di MySQL]]></title>
    <link href="http://coding4ever.net/blog/2011/03/15/menyimpan-dan-menampilkan-gambar-di-mysql/"/>
    <updated>2011-03-15T20:15:34+07:00</updated>
    <id>http://coding4ever.net/blog/2011/03/15/menyimpan-dan-menampilkan-gambar-di-mysql</id>
    <content type="html"><![CDATA[<p>Ternyata masih ada sebagian om2x :D yang masih kesulitan untuk melakukan hal ini, tapi oke lah berhubung udah lama enggax posting kayaxnya enggak salah juga membahas permasalahan yang satu ini.</p>

<p>Dengan asumsi MySQL dan Visual Basic .NET sudah terinstall dengan baik hal selanjutnya yang perlu disiapkan adalah <a href="http://dev.mysql.com/downloads/connector/net/6.2.html#downloads">MySQL Connector/Net</a>, disini saya menggunakan versi 6.2.4</p>

<p>Jadi silahkan download kemudian lakukan instalasi.</p>

<p>Selanjutnya kita akan menyiapkan sebuah tabel, misal dengan nama mahasiswa dengan struktur seperti berikut :</p>

<p>{% codeblock %}
CREATE TABLE mahasiswa (
    npm VARCHAR(10),
    nama VARCHAR(50),
    foto MEDIUMBLOB
)
{% endcodeblock %}</p>

<!-- more -->


<p>Gimana udah selesai ? Klo udah kita lanjutkan dengan membuat project baru kemudian tambahkan referensi MySql.Data (menu Project -> Add Reference&hellip;)</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/03/15032011-1.jpg"><img src="http://coding4ever.files.wordpress.com/2011/03/15032011-1.jpg?w=300" alt="" /></a></p>

<p>Apakah udah cukup ? Belum tambahkan juga namespace (package klo istilah javanya) MySql.Data pada bagian paling atas kode program</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/03/15032011-2.jpg"><img src="http://coding4ever.files.wordpress.com/2011/03/15032011-2.jpg?w=300" alt="" /></a></p>

<p>Perintah diatas berguna untuk menyingkat penulisan kode program contoh :</p>

<p>{% codeblock %}
Private conn As New MySql.Data.MySqlClient.MySqlConnection
{% endcodeblock %}</p>

<p>bisa disingkat menjadi</p>

<p>{% codeblock %}
Private conn As New MySqlClient.MySqlConnection
{% endcodeblock %}</p>

<p>Selanjutnya kita akan desain tampilan program seperti gambar dibawah ini</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/03/15032011-3.jpg"><img src="http://coding4ever.files.wordpress.com/2011/03/15032011-3.jpg?w=300" alt="" /></a></p>

<p>komponen yang yang dibutuhkan 1 buah PictureBox dan 2 buah Button.</p>

<p><strong>Melakukan koneksi</strong></p>

<p>Nah cara yang paling gampang kita tempatkan aja kodenya dibagian <a href="http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming">constructor</a>)</p>

<p>{% codeblock %}
Private conn As New MySqlClient.MySqlConnection
Private strSql As String = String.Empty</p>

<p>Public Sub New()</p>

<pre><code>' This call is required by the Windows Form Designer.
InitializeComponent()

' Add any initialization after the InitializeComponent() call.

' kode untuk melakukan koneksi mulai dari sini
Dim strConn As String = "server=127.0.0.1;uid=root;pwd=rahasia;database=test"
conn.ConnectionString = strConn
conn.Open()
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Klo kelupaan lokasi constructornya dimana :D, caranya lihat gambar :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/03/15032011-4.jpg"><img src="http://coding4ever.files.wordpress.com/2011/03/15032011-4.jpg?w=300" alt="" /></a></p>

<p><strong>Meyimpan gambar</strong></p>

<p>Kodenya sederhana banget, kita lihat cuplikannya</p>

<p>{% codeblock %}
Private Sub btnSimpan_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSimpan.Click
    &lsquo; untuk contoh disini lokasi gambarnya saya hardcode
    &rsquo; kita bisa kembangkan dengan memanfaatkan komponen OpenFileDialog
    Dim fileName As String = &ldquo;E:\Gambar\k4m4r82.jpg&rdquo;</p>

<pre><code>strSql = "INSERT INTO mahasiswa (npm, nama, foto) VALUES (@1, @2, @3)" ' ini perintah insert biasa
Using cmd As New MySqlClient.MySqlCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "02.02.4114") ' npm
        .Parameters.AddWithValue("@2", "Kamarudin") ' nama
        .Parameters.AddWithValue("@3", IO.File.ReadAllBytes(fileName)) ' foto

        .ExecuteNonQuery()
    End With
End Using

MessageBox.Show("Data sudah disimpan", "Informasi", MessageBoxButtons.OK, MessageBoxIcon.Information)
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p><strong>Menampilkan gambar</strong></p>

<p>{% codeblock %}
Private Sub btnTampil_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTampil.Click
    strSql = &ldquo;SELECT foto FROM mhs WHERE npm = @1&rdquo;</p>

<pre><code>Using cmd As New MySqlClient.MySqlCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "02.02.4114") ' npm

        Using dtr As MySqlClient.MySqlDataReader = .ExecuteReader()
            If dtr.HasRows Then
                If dtr.Read() Then
                    Dim ms As New IO.MemoryStream(CType(dtr.Item("foto"), Byte()))
                    PictureBox1.Image = Image.FromStream(ms) ' tampilkan gambarnya
                End If
            End If
        End Using
    End With
End Using
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/03/15032011-5.jpg"><img src="http://coding4ever.files.wordpress.com/2011/03/15032011-5.jpg?w=300" alt="" /></a></p>

<p>Selamat mencoba :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELECT SCOPE_IDENTITY(), SELECT LAST_INSERT_ID() Dan RETURNING PK]]></title>
    <link href="http://coding4ever.net/blog/2011/02/27/select-scope_identity-select-last_insert_id-dan-returning-pk/"/>
    <updated>2011-02-27T13:51:22+07:00</updated>
    <id>http://coding4ever.net/blog/2011/02/27/select-scope_identity-select-last_insert_id-dan-returning-pk</id>
    <content type="html"><![CDATA[<p>Yuph kali ini kita akan membahas fungsi menarik (SELECT SCOPE_IDENTITY(), SELECT LAST_INSERT_ID() dan RETURNING PK) yang dimiliki oleh database2x terkenal seperti SQL Server, MySQL dan Firebird.</p>

<p>Dari nama fungsinya kita bisa menebak kegunaan dari fungsi diatas yaitu untuk mendapatkan nilai ID terakhir (biasanya bertipe angka) yang diinputkan.</p>

<p>Saya dan mungkin Anda biasanya dalam merancang tabel untuk selalu menambahkan field ID dengan attribut IDENTITY/AUTONUMBER dan sekaligus dijadikan sebagai PRIMARY KEY.</p>

<p>Tentunya hal ini kita lakukan untuk mempermudah dalam proses manipulasi data (edit dan delete).</p>

<p>Contoh beberapa tabel yang biasanya menggunakan field ID untuk PRIMARY KEY dan sekaligus diset dengan attribut IDENTITY/AUTONUMBER</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2011/02/table1.png"><img src="http://coding4ever.files.wordpress.com/2011/02/table1.png?w=300" alt="" /></a></p>

<p>Bagi yang males membaca referensi (termasuk sy :D) biasa menuliskan kode berikut untuk mengINSERTkan dan mendapatkan nilai ID yang terakhir, kita ambil contoh tabel provinsi.</p>

<p>{% codeblock lang:vbnet %}
Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click
    Dim lastID As Long = 0</p>

<pre><code>' langkah 1 - menambahkan data
strSql = "INSERT INTO provinsi (keterangan) VALUES (@1)"
Using cmd As New SqlClient.SqlCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "Riau")

        .ExecuteNonQuery()
    End With
End Using

' langkah 2 - mengambil id terakhir dg memanfaatkan fungsi MAX
strSql = "SELECT MAX(id) FROM provinsi"
Using cmd As New SqlClient.SqlCommand(strSql, conn)
    lastID = Convert.ToInt32(cmd.ExecuteScalar())
End Using

' tampilkan ID terakhir
MessageBox.Show("Last ID : " &amp; lastID.ToString())
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Sekarang kita lihat bedanya jika memanfaatkan fungsi SELECT SCOPE_IDENTITY().</p>

<p>{% codeblock lang:vbnet %}
Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click
    Dim lastID As Long = 0</p>

<pre><code>strSql = "INSERT INTO provinsi (keterangan) VALUES (@1) SELECT SCOPE_IDENTITY()" ' ada tambahan SELECT SCOPE_IDENTITY()
Using cmd As New SqlClient.SqlCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "Riau")

        lastID = Convert.ToInt32(.ExecuteScalar())
    End With
End Using

MessageBox.Show ("Last ID : " &amp; lastID.ToString())
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Gimana lebih simple kan ? :)</p>

<p>Oke sekarang kita lihat kode untuk MySQL(SELECT LAST_INSERT_ID) dan Firebird (RETURN KOLOM_PK).</p>

<p>{% codeblock lang:vbnet %}
&lsquo; MySQL
Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click
    Dim lastID As Long = 0</p>

<pre><code>strSql = "INSERT INTO provinsi (keterangan) VALUES (@1); SELECT LAST_INSERT_ID()"
Using cmd As New MySqlClient.MySqlCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "Riau")

        lastID = Convert.ToInt32(.ExecuteScalar())
    End With
End Using

MessageBox.Show ("Last ID : " &amp; lastID.ToString())
</code></pre>

<p>End Sub</p>

<p>&lsquo; Firebird
Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click
    Dim lastID As Long = 0</p>

<pre><code>strSql = "INSERT INTO provinsi (keterangan) VALUES (@1) RETURNING ID" ' ID -&gt; kolom primary key
Using cmd As New FirebirdClient.FbCommand(strSql, conn)
    With cmd
        .Parameters.Clear()
        .Parameters.AddWithValue("@1", "Riau")

        lastID = Convert.ToInt32(.ExecuteScalar())
    End With
End Using

MessageBox.Show ("Last ID : " &amp; lastID.ToString())
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Untuk bisa mengakses database MySQL dan Firebird di Visual Basic .NET kita harus menginstall <a href="http://dev.mysql.com/downloads/connector/net/">MySQL Connector/Net</a> dan <a href="http://firebirdsql.org/index.php?op=files&amp;id=netprovider">Firebird ADO.NET Data Provider</a>.</p>

<p>Selamat mencoba :)</p>
]]></content>
  </entry>
  
</feed>
