<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Liquibase | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/liquibase/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2017-08-22T16:03:33+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manajemen Perubahan Struktur Database Menggunakan Liquibase]]></title>
    <link href="http://coding4ever.net/blog/2017/01/18/manajemen-perubahan-struktur-database-menggunakan-liquibase/"/>
    <updated>2017-01-18T10:53:57+07:00</updated>
    <id>http://coding4ever.net/blog/2017/01/18/manajemen-perubahan-struktur-database-menggunakan-liquibase</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2017/01/logo-lb.png">https://coding4ever.files.wordpress.com/2017/01/logo-lb.png</a> 105 72 %}Dalam pembuatan aplikasi perubahan struktur/schema database merupakan hal yang wajar, baik pada fase development maupun setelah masuk ke fase implementasi (production/live). Ada banyak alasan kenapa kita perlu melakukan perubahan struktur database, contoh:</p>

<!-- more -->


<ul>
<li>Penambahan fitur baru yang membutuhan penambahan attribut/field di tabel yang sudah ada atau malah menambahkan tabel yang baru.</li>
<li>Perbaikan bug yang menyebabkan perubahan nama atau jenis data dalam database.</li>
<li>Issue kinerja sistem yang memerlukan tambahan index dalam database.</li>
</ul>


<p>Perubahan-perubahan ini tentunya <code>wajib</code> kita catat baik secara manual maupun menggunakan tool khusus yang bisa dengan mudah membuat log perubahan struktur database dari waktu ke waktu, karena jika tidak bisa berpotensi menjadi bug di kemudian hari.</p>

<p>Beberapa tool database management seperti <a href="https://www.webyog.com/">SQLyog</a> versi <a href="https://www.webyog.com/product/sqlyogFeatureListExpanded">Enterprise/Ultimate</a> atau <a href="http://www.sqlmanager.net/en/">EMS SQL Manager</a> versi berbayarnya memang menyediakan fitur untuk melakukan sinkronisasi struktur database dengan mudah, tapi bagi Anda yang mempunyai anggaran terbatas untuk membeli lisensinya ada alternatif tool gratis dan open source yang bisa kita gunakan salah satunya yaitu  <a href="http://www.liquibase.org/">Liquibase</a>.</p>

<p>Pernah kebayang nggak ngoding tanpa <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> seperti <a href="https://git-scm.com/">Git</a> atau <a href="https://subversion.apache.org/">SVN</a> kalo dulu mungkin iya, kalo sekarang <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> merupakan hal yang <code>wajib</code> kita gunakan untuk memberikan rasa aman saat ber-coding ria :-D. <a href="https://en.wikipedia.org/wiki/Version_control">Source/version control</a> ini digunakan untuk mencatat perubahan kode dari waktu ke waktu, apalagi kalo ngodingnya bareng-bareng, hanya orang-orang <code>kreatif</code> saja yang bisa melakukannya tanpa  <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> :-D. Dengan mengusung tema <code>Source Control for Your Database</code> <a href="http://www.liquibase.org/">Liquibase</a> juga bisa kita fungsikan sebagai <a href="https://en.wikipedia.org/wiki/Version_control">source/version control</a> untuk mencatat perubahan struktur/schema database.</p>

<h3>Instalasi  Liquibase</h3>

<p><a href="http://www.liquibase.org/">Liquibase</a> tidak memerlukan instalasi khusus, kita tinggal download filenya di web site resmi <a href="http://www.liquibase.org/download/index.html">Liquibase</a> kemudian mengekstraknya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-01.png">https://coding4ever.files.wordpress.com/2017/01/180117-01.png</a> %}</p>

<p>Selain itu ada tool lain yang perlu kita siapkan yaitu:</p>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">JRE</a> atau <a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html">JDK</a> karena <a href="http://www.liquibase.org/">Liquibase</a> ditulis menggunakan Java.</li>
<li>JDBC driver disesuaikan dengan database yang digunakan, untuk contoh di sini saya menggunakan database <a href="https://www.postgresql.org/">PostgreSQL</a>. Setelah didownload kita copykan ke folder lib</li>
</ul>


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-02.png">https://coding4ever.files.wordpress.com/2017/01/180117-02.png</a> %}</p>

<h3>Membuat Changelog</h3>

<p>Struktur database dalam <a href="http://www.liquibase.org/">Liquibase</a> ditulis dalam format XML, disebut dengan istilah <code>changelog</code>. Ada beberapa <a href="http://www.liquibase.org/documentation/command_line.html">perintah</a> yang bisa digunakan untuk menghasilkan <code>changelog</code>, tentunya disesuaikan dengan kebutuhan.</p>

<h5>generateChangelog</h5>

<p>Perintah ini digunakan untuk membuat <code>changelog</code> dari struktur database secara lengkap jadi mirip dengan perintah dump/export ke sql. Biasanya kita gunakan pada saat implementasi awal sistem untuk mengopykan struktur database kosongan dari server development ke server production/live. Misal di awal implementasi sistem kita mempunyai struktur database seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-03.png">https://coding4ever.files.wordpress.com/2017/01/180117-03.png</a> %}</p>

<p>Dari gambar di atas kita baru mempunyai dua buah tabel yaitu <code>m_customer</code> dan <code>m_supplier</code>.</p>

<p>Kemudian kita jalankan perintah <code>generateChangelog</code>:</p>

<p>{% codeblock lang:bash %}
liquibase &ndash;url=&ldquo;jdbc:postgresql://localhost:5432/db-develop&rdquo; &ndash;username=postgres &ndash;password=masterkey &ndash;changeLogFile=output/db.changelog-1.0.xml generateChangeLog
{% endcodeblock %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-04.png">https://coding4ever.files.wordpress.com/2017/01/180117-04.png</a> %}</p>

<p>Akan menghasilkan file <code>changelog</code> seperti berikut:</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-05.png">https://coding4ever.files.wordpress.com/2017/01/180117-05.png</a> %}</p>

<p>{% gist f1b99d6a19c05b241367caa332a11ed5 %}</p>

<p>Mungkin tidak perlu dijelaskan lagi ya, karena isi dari file <a href="https://gist.github.com/k4m4r82/f1b99d6a19c05b241367caa332a11ed5#file-db-changelog-1-0-xml">db.changelog-1.0.xml</a> di atas hanya menjelaskan struktur dari tabel <code>m_customer</code> dan <code>m_supplier</code> dalam format XML.</p>

<p>Setelah itu kita jalankan perintah <code>update</code> agar <code>changelog</code> yang dihasilkan dari perintah <code>generateChangelog</code> di atas dieksekusi ke database target (db production/live).</p>

<p>{% codeblock lang:bash %}
liquibase &ndash;url=&ldquo;jdbc:postgresql://localhost:5432/db-production&rdquo; &ndash;username=postgres &ndash;password=masterkey &ndash;changeLogFile=output/db.changelog-1.0.xml update  <br/>
{% endcodeblock %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-06.png">https://coding4ever.files.wordpress.com/2017/01/180117-06.png</a> %}</p>

<p>Dari gambar di bawah ini terlihat kondisi database production sebelum (sebelah kiri) dan sesudah dijalankan perintah <code>update</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-07.png">https://coding4ever.files.wordpress.com/2017/01/180117-07.png</a> %}</p>

<p>Pada saat pertama kali <a href="http://www.liquibase.org/">Liquibase</a> dijalankan untuk database target, <a href="http://www.liquibase.org/">Liquibase</a> akan membuat dua buah tabel sistem yaitu <a href="http://www.liquibase.org/documentation/databasechangelog_table.html">databasechangelog</a> dan <a href="http://www.liquibase.org/documentation/databasechangeloglock_table.html">databasechangeloglock</a> kedua tabel ini digunakan untuk mencatat hasil eksekusi <code>changelog</code> dari waktu ke waktu. Jadi perlu diperhatikan kedua tabel ini jangan dihapus.</p>

<h5>diffChangeLog</h5>

<p>Selama fase development maupun setelah masuk ke fase implementasi (production/live) kadang-kadang terjadi perubahan struktur database, sehingga kita perlu mengetahui perbedaan dari struktur lama dan baru, untuk melakukan ini kita menggunakan perintah <code>diffChangeLog</code>.</p>

<p>Misal seperti penjelasan gambar di bawah ini, yang sebelah kiri adalah struktur awal database yang hanya mempunyai dua buah tabel yaitu <code>m_customer</code> dan <code>m_supplier</code>, selama proses development berlangsung terjadi penambahan beberapa tabel baru yaitu <code>m_golongan</code>, <code>m_produk</code> dan tabel baru lainnya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-08.png">https://coding4ever.files.wordpress.com/2017/01/180117-08.png</a> %}</p>

<p>Nah untuk menghasilkan <code>changelog</code>, yang isinya adalah perbedaan struktur lama dan baru kita gunakan perintah <code>diffChangeLog</code>.</p>

<p>{% codeblock lang:bash %}
liquibase &ndash;url=&ldquo;jdbc:postgresql://localhost:5432/db-production&rdquo; &ndash;username=postgres &ndash;password=masterkey &ndash;referenceUrl=&ldquo;jdbc:postgresql://localhost:5432/db-develop&rdquo; &ndash;referenceUsername=postgres &ndash;referencePassword=masterkey  &ndash;changeLogFile=output/db.changelog-1.1.xml diffChangeLog
{% endcodeblock %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-09.png">https://coding4ever.files.wordpress.com/2017/01/180117-09.png</a> %}</p>

<p>Contoh file <code>changelog</code> yang dihasilkan:</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-10.png">https://coding4ever.files.wordpress.com/2017/01/180117-10.png</a> %}</p>

<p>{% gist e66ba9f2bff96f9ba50406d34864d87e %}</p>

<p>Kemudian kita jalankan lagi perintah <code>update</code>. Perintah <code>update</code> ini melakukan <code>patch</code> ke database target (database production/live).</p>

<p>{% codeblock lang:bash %}
liquibase &ndash;url=&ldquo;jdbc:postgresql://localhost:5432/db-production&rdquo; &ndash;username=postgres &ndash;password=masterkey &ndash;changeLogFile=output/db.changelog-1.1.xml update
{% endcodeblock %}</p>

<p>Setelah itu kita cek lagi struktur database productionnya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2017/01/180117-11.png">https://coding4ever.files.wordpress.com/2017/01/180117-11.png</a> %}</p>

<p>Gampang bukan :-), dengan menggunakan <a href="http://www.liquibase.org/">Liquibase</a> proses migrasi struktur database pun menjadi lebih mudah.</p>

<h3>File Liquibase Properties</h3>

<p>Untuk menyingkat penulisan perintah <a href="http://www.liquibase.org/">Liquibase</a> kita bisa memanfaatkan file liquibase properties. Di file ini kita mengeset semua nilai parameter yang dibutuhkan pada saat menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a>. Secara default nama yang digunakan untuk file liquibase properties adalah <code>liquibase.properties</code>, jika menggunakan nama default ini kita bisa langsung menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a> seperti berikut :</p>

<p>{% codeblock lang:bash %}</p>

<h1>generateChangelog</h1>

<p>liquibase generateChangelog</p>

<h1>diffChangeLog</h1>

<p>liquibase diffChangeLog</p>

<h1>update/patch database target</h1>

<p>liquibase update
{% endcodeblock %}</p>

<p>dan jika menggunakan nama yang lain, misal untuk masing-masing perintah kita buatkan  file liquibase properties tersendiri, pada saat menjalankan perintah <a href="http://www.liquibase.org/">Liquibase</a> harus kita sebutkan secara explicit nama file  liquibase properties-nya dengan menambahkan parameter <code>defaultsFile=&lt;nama_file_liquibase_properties&gt;</code>. Contoh:</p>

<p>{% codeblock lang:bash %}</p>

<h1>generateChangelog</h1>

<p>liquibase &ndash;defaultsFile=generate-liquibase.properties generateChangelog</p>

<h1>diffChangeLog</h1>

<p>liquibase &ndash;defaultsFile=diff-liquibase.properties diffChangeLog</p>

<h1>update/patch database target</h1>

<p>liquibase &ndash;defaultsFile=update-liquibase.properties update
{% endcodeblock %}</p>

<p>Dan untuk masing-masing file liquibase properties-nya kita isi seperti berikut:</p>

<p>{% gist 16429101488c5c734e8f86832c6dc646 %}</p>

<p>{% gist 033067883ebff3ab40ed2b08b3c06a42 %}</p>

<p>{% gist 4ad6e69e060e7fcd4da12fa56fbbaf0c %}</p>

<p>Selamat mencoba :-)</p>
]]></content>
  </entry>
  
</feed>
