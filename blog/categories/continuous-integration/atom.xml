<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous Integration | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/continuous-integration/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2019-08-25T18:57:06+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitLab CI Untuk .NET Developer Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2017/09/09/gitlab-ci-untuk-net-developer-bagian-number-2/"/>
    <updated>2017-09-09T22:17:36+07:00</updated>
    <id>http://coding4ever.net/blog/2017/09/09/gitlab-ci-untuk-net-developer-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2017/08/gitlabci.png">https://coding4ever.files.wordpress.com/2017/08/gitlabci.png</a>&#8220;>Melanjutkan pembahasan tentang <a href="/blog/categories/continuous-integration/">Continuous Integration</a> menggunakan <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>. Di <a href="/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/">postingan</a> sebelumnya kita sudah melakukan konfigurasi <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> dengan menambahkan file  <a href="https://gist.github.com/k4m4r82/f88e4bb02eb8ade0d9d049a07ec6ee30">.gitlab-ci.yml</a>.</p>

<p>Di konfigurasi awal ini kita sudah menambahkan dua job yang bertugas untuk merestore paket nuget dan melakukan proses build. Berikutnya kita akan menambahkan satu job lagi yang bertugas untuk membuat paket instalasi menggunakan <a href="/blog/categories/inno-setup/">Inno Setup</a> jika job pertama dan kedua berhasil dijalankan. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai histori hasil build dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-07.png">https://coding4ever.files.wordpress.com/2017/09/20170909-07.png</a>&#8221;></p>

<h3>Inno Setup</h3>

<p><a href="http://jrsoftware.org/">Inno Setup</a> adalah tool yang digunakan untuk membuat <a href="/blog/categories/tools-installer/">paket installer</a> yang gratis dan open source. Selain <a href="http://jrsoftware.org/">Inno Setup</a>, kita juga bisa menggunakan <a href="/blog/categories/tools-installer/">tool installer</a> lainnya seperti <a href="http://nsis.sourceforge.net/">NSIS</a>. Untuk informasi lebih lanjut tentang <a href="http://jrsoftware.org/">Inno Setup</a> dan <a href="http://nsis.sourceforge.net/">NSIS</a> bisa langsung ke <a href="/blog/categories/inno-setup/">sini</a> dan <a href="/blog/categories/nsis/">sini</a>.</p>

<p>Jadi di postingan kali ini kita akan menggunakan <a href="http://jrsoftware.org/">Inno Setup</a> untuk keperluan pembuatan file setup/paket installer. Sebagai contoh, berikut adalah skrip <a href="http://jrsoftware.org/">Inno Setup</a> yang digunakan untuk membuat file setup/paket installer untuk project <a href="https://gitlab.com/rudi.krsoftware/Northwind">Northwind</a> yang kita gunakan sebagai contoh project.</p>

<p><div><script src='https://gist.github.com/5eee78a4609377dcce794683958b9147.js'></script>
<noscript><pre><code>#define AppName &#39;Northwind App&#39;
#define AppDir &#39;Northwind&#39;
#define BuildDir &#39;src\Northwind.ConsoleApp\bin\Debug&#39;
#define AppExeName &#39;Northwind.ConsoleApp.exe&#39;
#define AppVendorName &#39;KR Software&#39;
#define AppCopyright &#39;Copyright Â© 2016. &#39; + AppVendorName
#define AppURL &#39;http://coding4ever.net/&#39;
#define AppVersion GetFileVersion(&#39;src\Northwind.ConsoleApp\bin\Debug\&#39; + AppExeName)

[Setup]
AppName={#AppName}
AppVerName={#AppName} Versi {#AppVersion}
AppPublisher={#AppVendorName}
AppVersion={#AppVersion}
AllowCancelDuringInstall = yes
DefaultDirName={pf}\{#AppVendorName}\{#AppDir}
DefaultGroupName={#AppVendorName}
Compression = lzma
SolidCompression = yes
OutputDir=.
OutputBaseFilename=Setup-v{#AppVersion}
AllowNoIcons = yes
AlwaysRestart = no
AlwaysShowComponentsList = no
DisableProgramGroupPage = yes
AppendDefaultDirName = yes
CreateUninstallRegKey = yes
DisableStartupPrompt = yes
LanguageDetectionMethod=none
ShowLanguageDialog=no
UsePreviousLanguage=no
Uninstallable = yes
UninstallFilesDir={app}\uninst
UninstallDisplayIcon={app}\{#AppExeName},0
UninstallDisplayName={#AppName}
WindowVisible = no
AppCopyright={#AppCopyright}
FlatComponentsList = yes
PrivilegesRequired = admin
VersionInfoVersion={#AppVersion}

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked

[Files]
;My Application Runtime
Source: {#BuildDir}\*.config; DestDir: {app}; Flags: ignoreversion
Source: {#BuildDir}\*.exe; DestDir: {app}; Flags: ignoreversion
Source: {#BuildDir}\*.dll; DestDir: {app}; Flags: ignoreversion

[Icons]
Name: {group}\{#AppName}; Filename: {app}\{#AppExeName}; WorkingDir: {app}
Name: {userdesktop}\{#AppName}; Filename: {app}\{#AppExeName}; WorkingDir: {app}; Tasks: desktopicon

[Code]
procedure AboutButtonOnClick(Sender: TObject);
begin
  MsgBox(&#39;{#AppName}&#39; #13#13 &#39;{#AppCopyright}&#39; #13 &#39;{#AppURL}&#39;, mbInformation, mb_Ok);
end;

procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton);
var
  AboutButton: TNewButton;
begin
  AboutButton := TNewButton.Create(ParentForm);
  AboutButton.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := &#39;&amp;About...&#39;;
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := ParentForm;  
end;

procedure InitializeWizard();
begin
  CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);  
end;</code></pre></noscript></div>
</p>

<p>Skrip Inno Setup ini kita tambahkan ke folder yang sama dengan folder source code kemudian kita simpan juga ke repository git.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-01.png">https://coding4ever.files.wordpress.com/2017/09/20170909-01.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-02.png">https://coding4ever.files.wordpress.com/2017/09/20170909-02.png</a>&#8221;></p>

<h3>Menambahkan Job untuk Membuat Paket Instalasi</h3>

<p>Setelah menambahkan file <a href="https://gist.github.com/k4m4r82/5eee78a4609377dcce794683958b9147">Inno Setup</a>, langkah berikutnya adalah kita mengedit file <a href="https://gist.github.com/k4m4r82/f88e4bb02eb8ade0d9d049a07ec6ee30">.gitlab-ci.yml</a> untuk menambahkan job baru yang bertugas untuk mengeksekusi file <a href="https://gist.github.com/k4m4r82/5eee78a4609377dcce794683958b9147">setup.iss</a></p>

<p>Berikut isi file <a href="https://gist.github.com/k4m4r82/f88e4bb02eb8ade0d9d049a07ec6ee30">.gitlab-ci.yml</a> yang sudah kita edit:</p>

<p><div><script src='https://gist.github.com/d07cb047d26f2df4778606c48db35b14.js'></script>
<noscript><pre><code>variables:
  MsBuildPath: &quot;C:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe&quot;
  NugetPath: &quot;C:\\GitLab-Runner\\NuGet\\nuget.exe&quot;
  InnoSetupPath: &quot;C:\\Program Files (x86)\\Inno Setup 5\\ISCC.exe&quot; # tambah var InnoSetupPath
  SolutionName: &quot;Northwind.sln&quot;

stages: # tipe dari job
  - restore # stage untuk merestore paket nuget
  - build # stage untuk proses build  
  - setup # stage untuk proses eksekusi skrip inno setup
  
cache:
  untracked: true
  paths:    
    - lib # folder hasil restore nuget package    

restore_nuget_package: # job 1
  stage: restore
  script:
    - echo &quot;Sedang merestore paket nuget untuk %SolutionName%...&quot;
    - &#39;&quot;%NugetPath%&quot; restore &quot;src\%SolutionName%&quot;&#39;  
    
build_solution: # job 2
  stage: build
  script:     
    - echo &quot;Sedang melakukan proses build untuk %SolutionName%...&quot;
    - &#39;&quot;%MsBuildPath%&quot; &quot;src\%SolutionName%&quot;&#39;      
    
create_file_setup: # job 3
  stage: setup
  script:     
    - echo &quot;Sedang membuat file setup untuk %SolutionName%...&quot;
    - &#39;&quot;%InnoSetupPath%&quot; &quot;setup.iss&quot;&#39;    
  artifacts: # upload file setup
    name: &quot;Setup&quot;    
    when: on_success
    paths:
     - Setup-v*.exe</code></pre></noscript></div>
</p>

<p>Coba perhatikan skrip di atas, di baris ke-4 kita menambahkan variabel <code>InnoSetupPath</code> yang isinya adalah lokasi file ISCC.exe yang digunakan untuk mengompile skrip <a href="https://gist.github.com/k4m4r82/5eee78a4609377dcce794683958b9147">inno setup</a>. Kemudian di baris ke-10 kita menambahkan stage baru dengan nama <code>setup</code> yang digunakan untuk job baru yang akan kita tambahkan yaitu job <code>create_file_setup</code>. Terakhir di baris ke-29, kita menambahkan job baru dengan nama <code>create_file_setup</code>. Job ini akan melakukan proses kompilasi skrip <a href="https://gist.github.com/k4m4r82/5eee78a4609377dcce794683958b9147">inno setup</a> menjadi file setup/paket instalasi (baris ke-33), kemudian mengupload ke server GitLab. Untuk keperluan upload ini, kita menambahkan keyword <a href="https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html">artifacts</a> masih di job <code>create_file_setup</code>, kemudian diikuti dengan beberapa konfigurasi. <a href="https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html">Artifact</a> adalah output dari proses build, bisa berupa file exe, dll atau file dengan ekstensi lainnya</p>

<p>Setelah itu simpan perubahan file <a href="https://gist.github.com/k4m4r82/d07cb047d26f2df4778606c48db35b14">.gitlab-ci.yml</a> ke repository  git.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-03.png">https://coding4ever.files.wordpress.com/2017/09/20170909-03.png</a>&#8221;></p>

<p>Kemudian langsung di push, untuk melihat apakah semua job (restore, build dan pembuatan paket instalasi) berhasil dijalankan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-04.png">https://coding4ever.files.wordpress.com/2017/09/20170909-04.png</a>&#8221;></p>

<p>Tunggu beberapa saat, kemudian cek link <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">Pipelines</a> untuk melihat status <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">Pipelines</a> yang sedang dijalankan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-05.png">https://coding4ever.files.wordpress.com/2017/09/20170909-05.png</a>&#8221;></p>

<p><a href="https://docs.gitlab.com/ee/ci/pipelines.html">Pipelines</a> digunakan untuk mengelompokkan job. Jika ingin melihat job apa saja yang ada di dalam <a href="https://docs.gitlab.com/ee/ci/pipelines.html">Pipelines</a>, kita tinggal klik aja link statusnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-06.png">https://coding4ever.files.wordpress.com/2017/09/20170909-06.png</a>&#8221;></p>

<p>Jika sudah selesai, kita bisa melihat link download <code>artifacts</code> di kolom terakhir.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-07.png">https://coding4ever.files.wordpress.com/2017/09/20170909-07.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-08.png">https://coding4ever.files.wordpress.com/2017/09/20170909-08.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/09/20170909-09.png">https://coding4ever.files.wordpress.com/2017/09/20170909-09.png</a>&#8221;></p>

<p>Selesai&hellip;, untuk contoh lengkap hasil buildnya bisa Anda cek di <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">sini</a></p>

<p>Selamat <a href="https://gitlab.com/rudi.krsoftware/Northwind">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitLab CI Untuk .NET Developer Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/"/>
    <updated>2017-08-30T12:32:47+07:00</updated>
    <id>http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2017/08/gitlabci.png">https://coding4ever.files.wordpress.com/2017/08/gitlabci.png</a>&#8220;>Sudah hampir setahun saya menggunakan <a href="/blog/categories/jenkins/">Jenkins</a> sebagai tool/software CI <a href="/blog/categories/continuous-integration/">Continuous Integration</a>. Ada banyak manfaat yang saya rasakan terutama untuk mengurangi pekerjaan-pekerjaan <code>sepele</code> tapi <code>berulang</code> seperti pembuatan paket instalasi, upload updatean terbaru ke server atau deploy web api/service ke server development atau production.  Dengan menggunakan software CI(<a href="/blog/categories/continuous-integration/">Continuous Integration</a>) seperti <a href="/blog/categories/jenkins/">Jenkins</a> pekerjaan-pekerjaan membosankan tersebut bisa dilakukan hanya dengan mengklik satu tombol atau bisa juga dibuat otomatis ketika kita mem-push perubahan source code ke repository git. Waktu yang dibutuhkan juga biasanya tidak lama sekitar 1-3 menit, ya tergantung besar atau kecilnya project yang akan dibuild/deploy.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-011.png">https://coding4ever.files.wordpress.com/2017/08/20170830-011.png</a>&#8221;></p>

<p>Selain itu dari sisi dokumentasi juga ikut terbantu, karena tool seperti <a href="/blog/categories/jenkins/">Jenkins</a> dan dengan bantuan pluginnya bisa otomatis mengenerate history build dari waktu ke waktu.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-021.png">https://coding4ever.files.wordpress.com/2017/08/20170830-021.png</a>&#8221;></p>

<p>Tapi pada postingan kali ini saya ingin membahas tool/software CI(<a href="/blog/categories/continuous-integration/">Continuous Integration</a>) yang lain yaitu <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>. Beberapa hari ini saya menyempatkan untuk mencoba <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> dan kesimpulannya ada beberapa kelebihan <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> dibandingkan <a href="/blog/categories/jenkins/">Jenkins</a> yaitu:</p>

<ul>
<li><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah terintegrasi dengan <a href="https://gitlab.com/">GitLab </a>. <a href="https://gitlab.com/">GitLab </a> adalah layanan cloud untuk repository git, jadi mirip dengan <a href="http://github.com/">github</a> atau <a href="http://bitbucket.org/">bitbucket</a>. Kelebihan gitlab dibandingkan dengan github dan bitbucket adalah untuk layanan gratisnya tidak ada pembatasan jumlah tim atau jumlah repository private yang bisa dibuat. Sedangkan untuk <a href="/blog/categories/jenkins/">Jenkins</a> repository gitnya harus diinstall terpisah atau menggunakan layanan repository git yang sudah ada seperti gitlab, github atau bitbucket.</li>
<li>Konfigurasi Job di <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> lebih sederhana dibandingkan <a href="/blog/categories/jenkins/">Jenkins</a>. Konfigurasi job <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> menggunakan file text biasa dengan format <a href="https://en.wikipedia.org/wiki/YAML">YAML</a>, sehingga file konfigurasi ini bisa kita tambahkan ke repository git.</li>
<li>Satu konfigurasi <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah bisa digunakan untuk beberapa <a href="https://docs.gitlab.com/ee/ci/yaml/#jobs">job</a> dan <a href="https://docs.gitlab.com/ee/ci/yaml/README.html#stages">stage</a> sedangkan dengan <a href="/blog/categories/jenkins/">Jenkins</a> kita harus membuat beberapa job untuk masing-masing stage (<a href="https://en.wiktionary.org/wiki/CMIIW">CMIIW</a>).</li>
<li>Penggunaan  <a href="/blog/categories/jenkins/">Jenkins</a> sangat cocok untuk keperluan internal kantor, jadi jika ingin digunakan secara public (di akses via internet) harus menyediakan mesin khusus yang mempunyai ip public atau bisa juga menggunakan VPS. Sedangkan untuk <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sendiri kita cukup menyediakan mesin yang mempunyai akses internet dan tidak harus mempunyai ip public.</li>
<li>Apalagi yaâ¦, silahkan dicoba sendiri he he :-D</li>
</ul>


<h3>Continuous Integration</h3>

<p>Sebelum kita lanjut ke pembahasan <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>, saya ingin mereview kembali apa yang dimaksud dengan CI (<a href="/blog/categories/continuous-integration/">Continuous Integration</a>).  <a href="/blog/categories/continuous-integration/">Continuous Integration</a>, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.</p>

<p>Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses build untuk memastikan tidak ada kode yang merusak/membuat proses build gagal. Jadi semakin cepat kegagalan build ini diketahui semakin cepat pula kita meresponnya. Dan jika proses build-nya berhasil akan dilanjutkan dengan proses deploy. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan unit testing, integration testing dan testing otomatis lainnya.</p>

<p>Sebagai .NET developer kita sudah biasa melakukan proses build dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh deploy anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<p>Proses build ini selain bisa dibuat otomatis setiap kita mem-push source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak build pas jam makan siang enggak boleh makan siang sampai proses build-nya berhasil atau yang merusak build pas jam pulang kantor enggak boleh pulang sampai proses build-nya berhasil :-D</p>

<p>Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :</p>

<ul>
<li>Menulis kode, build dan tes di komputer masing-masing (seperti biasa).</li>
<li>Commit dan push kode ke server repository/source control seperti GIT atau SVN.</li>
<li>Server CI akan meng-clone/pull repository kemudian melakukan build, menjalankan tes otomatis (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama.</li>
</ul>


<p>Nah mudah-mudahan sampai di sini sudah punya gambaran ya tentang apa itu <a href="/blog/categories/continuous-integration/">Continuous Integration</a> dan bagaimana cara kerjanya.</p>

<h3>Apa saja yang perlu dipelajari ?</h3>

<p>Untuk belajar CI, tentu saja ada pengetahun penunjang yang perlu Anda pelajari yaitu penggunaan <a href="https://en.wikipedia.org/wiki/Version_control">Source/Version Control</a> terutama <a href="https://git-scm.com/">GIT</a> dan aplikasi GIT Client seperti <a href="https://tortoisegit.org/download/">TortoiseGit</a>. Pengetahun lainnya adalah pembuatan paket instalasi menggunakan <a href="/blog/categories/inno-setup/">Inno Setup</a> untuk aplikasi desktop atau bisa juga pengetahuan mendeploy web api/service ke server.</p>

<h3>GitLab CI</h3>

<p><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> adalah salah satu tool/software <a href="/blog/categories/continuous-integration/">Continuous Integration</a> gratis yang merupakan bagian dari <a href="https://about.gitlab.com/">GitLab</a>. <a href="https://about.gitlab.com/">GitLab</a> sendiri merupakan layanan cloud repository git, jadi mirip dengan <a href="http://github.com/">github</a> atau <a href="http://bitbucket.org/">bitbucket</a>. Kelebihan dari <a href="https://about.gitlab.com/">GitLab</a> ini sendiri, untuk versi gratisnya tidak dibatasi seperti halnya <a href="http://github.com/">github</a> dan <a href="http://bitbucket.org/">bitbucket</a>. Jadi dengan versi gratisnya tidak ada pembatasan jumlah private repository yang bisa kita buat ataupun jumlah tim yang terlibat. Menarik bukan untuk sebuah layanan cloud repository git yang gratis.</p>

<p><a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sendiri kalo kita lihat lebih mirip dengan sebuah dashboard untuk mengelola job dan log hasil buildnya. Jadi aslinya yang melakukan build dan deploy itu bukanlah <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> tapi tool lain yang disebut dengan  <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a>. <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> ini harus kita install di mesin (pc/server) yang mempunyai akses internet agar bisa terhubung ke service <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>. Mesin untuk <a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> tidak harus mempunyai ip public yang penting terkoneksi dengan internet.</p>

<p>Idenya sederhana tapi brilian, dengan konsep seperti ini akan menghemat resource dari server <a href="https://about.gitlab.com/">GitLab</a> itu sendiri, karena semua resource yang dibutuhkan untuk proses build dan deploy di tanggung oleh mesin dari user/developer. Tapi dari sisi user/developer juga diuntungkan karena mesin untuk build dan deploynya adalah milik kita sendiri, sehingga kita punya akses full untuk setup/konfigurasi tool/software apa saja yang dibutuhkan untuk proses build dan deploy tersebut.</p>

<h3>GitLab Runner</h3>

<p><a href="https://docs.gitlab.com/runner/#using-gitlab-runner">GitLab Runner</a> adalah tool/software yang bertugas untuk menjalankan job dan mengirimkan kembali hasilnya ke <a href="https://about.gitlab.com/">GitLab</a>, nah data-data inilah yang akan diolah oleh <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>.</p>

<p>GitLab Runner bisa diinstall untuk GNU/Linux, macOS, FreeBSD, dan Windows.</p>

<h4>Instalasi GitLab Runner</h4>

<p><a href="https://docs.gitlab.com/runner/install/windows.html">Instalasi GitLab Runner</a> sendiri sangat mudah, ditambah dengan dokumentasi yang lengkap. Jadi seharusnya Anda tidak akan mendapatkan masalah untuk langkah-langkah instalasinya. Untuk petunjuknya bisa ada cek di <a href="https://docs.gitlab.com/runner/install/windows.html">sini</a>.</p>

<p>Untuk memastikan instalasinya GitLab Runnernya berhasil, silahkan Anda cek service GitLab Runnernya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-03.png">https://coding4ever.files.wordpress.com/2017/08/20170830-03.png</a>&#8221;></p>

<p>Selain menginstall <a href="https://docs.gitlab.com/runner/install/">GitLab Runner</a>, kita juga perlu menginstall beberapa tool pendukung seperti:</p>

<ul>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li>Pembuat paket installer seperti <a href="http://www.jrsoftware.org/">Inno Setup</a></li>
<li><a href="https://www.nuget.org/downloads">Nuget</a> untuk merestore paket nuget</li>
<li>FTP Client seperti <a href="https://winscp.net/eng/index.php">WinSCP</a></li>
</ul>


<p>Intinya semua tool pendukung di atas, diinstall sesuai dengan kebutuhan environment development.</p>

<h4>Mendaftarkan Repository ke GitLab Runner</h4>

<p>Setelah instalasi GitLab Runner, berikutnya adalah mendaftarkan repository git ke GitLab Runner. Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1</strong>.  Login ke <a href="https://about.gitlab.com/">GitLab</a>, klo belum punya ya silahkan daftar terlebih dulu.</p>

<p><strong>Langkah 2</strong>.  Buat repository baru</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-04.png">https://coding4ever.files.wordpress.com/2017/08/20170830-04.png</a>&#8221;></p>

<p><strong>Langkah 3</strong>.  Setelah membuat repositorynya berhasil, klik link <code>Settings</code> -> <code>Pipelines</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-05.png">https://coding4ever.files.wordpress.com/2017/08/20170830-05.png</a>&#8221;></p>

<p>Scroll ke bawah sedikit, kemudian catat informasi <code>Specific Runners</code> untuk poin 2 dan 3.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-06.png">https://coding4ever.files.wordpress.com/2017/08/20170830-06.png</a>&#8221;></p>

<p>Kemudian di bagian <code>Shared Runners</code> klik tombol <code>Disable shared Runners</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-07.png">https://coding4ever.files.wordpress.com/2017/08/20170830-07.png</a>&#8221;></p>

<p><strong>Langkah 4</strong>.  Berikutnya adalah mengaktifkan <code>Command Prompt</code> dengan mode <code>Administrator</code> kemudian masuk ke folder instalasi GitLab Runner</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-08.png">https://coding4ever.files.wordpress.com/2017/08/20170830-08.png</a>&#8221;></p>

<p>Setelah itu ketik perintah <code>gitlab-runner register</code>, kemudian tinggal jawab pertanyaan yang ada termasuk informasi <code>Specific Runners</code> yang kita dapatkan di <code>langkah 3</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-09.png">https://coding4ever.files.wordpress.com/2017/08/20170830-09.png</a>&#8221;></p>

<p>Jika proses registrasinya berhasil, kita bisa cek runner aktifnya dibawah informasi <code>Specific Runners</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-10.png">https://coding4ever.files.wordpress.com/2017/08/20170830-10.png</a>&#8221;></p>

<h3>Contoh Project</h3>

<p>Untuk keperluan uji coba kali ini saya menggunakan contoh aplikasi Northwind yang bisa Anda download di <a href="https://github.com/k4m4r82/RepositoryPattern">sini</a>. Setelah itu kita <code>push</code> source codenya ke link repository gitlab yang sudah kita buat di langkah-langkah sebelumnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-11.png">https://coding4ever.files.wordpress.com/2017/08/20170830-11.png</a>&#8221;></p>

<p>Dan untuk proses <code>push</code>-nya saya menggunakan <a href="https://tortoisegit.org/download/">TortoiseGit</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-12.png">https://coding4ever.files.wordpress.com/2017/08/20170830-12.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-13.png">https://coding4ever.files.wordpress.com/2017/08/20170830-13.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-14.png">https://coding4ever.files.wordpress.com/2017/08/20170830-14.png</a>&#8221;></p>

<h3>Menambahkan file .gitlab-ci.yml</h3>

<p>Untuk melakukan konfigurasi <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>, kita perlu menambahkan file dengan nama <a href="https://docs.gitlab.com/ee/ci/yaml/">.gitlab-ci.yml</a>. File ini adalah file text biasa yang menggunakan format <a href="https://en.wikipedia.org/wiki/YAML">YAML</a>, sehingga file konfigurasi ini bisa kita tambahkan ke folder source code kemudian kita simpan juga ke repository git.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-15.png">https://coding4ever.files.wordpress.com/2017/08/20170830-15.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-161.png">https://coding4ever.files.wordpress.com/2017/08/20170830-161.png</a>&#8221;></p>

<p>Berikut contoh isi file <code>.gitlab-ci.yml</code></p>

<p><div><script src='https://gist.github.com/f88e4bb02eb8ade0d9d049a07ec6ee30.js'></script>
<noscript><pre><code>variables:
  MsBuildPath: &quot;C:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe&quot;
  NugetPath: &quot;C:\\GitLab-Runner\\NuGet\\nuget.exe&quot;
  SolutionName: &quot;Northwind.sln&quot;

stages: # tipe dari job
  - restore # stage untuk merestore paket nuget
  - build # stage untuk proses build  
  
cache:
  untracked: true
  paths:    
    - lib # folder hasil restore nuget package    

restore_nuget_package: # job 1
  stage: restore
  script:
    - echo &quot;Sedang merestore paket nuget untuk %SolutionName%...&quot;
    - &#39;&quot;%NugetPath%&quot; restore &quot;src\%SolutionName%&quot;&#39;  
    
build_solution: # job 2
  stage: build
  script:     
    - echo &quot;Sedang melakukan proses build untuk %SolutionName%...&quot;
    - &#39;&quot;%MsBuildPath%&quot; &quot;src\%SolutionName%&quot;&#39;    
  only:
    - master # validasi untuk branch atau tag</code></pre></noscript></div>
</p>

<p>Coba perhatikan skrip di atas, di baris ke-6 kita mendefinisikan beberapa stage yaitu <code>restore</code> dan <code>build</code>, kita bisa juga menambahkan stage yang lain misal <code>test</code>, <code>deploy</code>, <code>development</code>, <code>production</code>, dst. Stage digunakan untuk menentukan jenis dari job. Jadi perlu diingat bahwa stage dan job itu berbeda, walaupun dibanyak contoh menggunakan nama yang sama untuk stage dan job.</p>

<p>Eksekusi antar job di <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> itu sifatnya independen atau dengan kata lain tidak ada hubungan antar job. Ketika job B membutuhkan file yang dihasilkan oleh job A secara default tidak bisa, sehingga kita perlu menambahkan konfigurasi <code>cache</code>, seperti yang terlihat di baris ke-10. Kita mendaftarkan folder <code>lib</code> ke dalam konfigurasi <code>cache</code>. Folder <code>lib</code> ini berisi file-file library (*.dll) hasil dari job <code>restore_nuget_package</code>. Semua file yang ada di folder <code>lib</code> ini dibutuhkan pada saat menjalankan job <code>build_solution</code>.</p>

<p>Berikutnya kita pindah ke baris 15, di baris ini kita mendefinisikan job dengan nama <code>restore_nuget_package</code> dengan tipe stage <code>restore</code>, kemudian menjalankan skrip untuk merestore paket nuget.</p>

<p>Terakhir di baris ke-21, kita mendefinisikan job lain dengan nama <code>build_solution</code>, sesuai namanya job ini digunakan untuk membuild solution atau project atau klo lewat IDE Visual Studio .NET kita menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging).</p>

<h3>Cara Mengecek/Memvalidasi Skrip File .gitlab-ci.yml</h3>

<p>Sebelum kita menambahkan file <code>.gitlab-ci.yml</code> ke repository git, ada baiknya kita cek terlebih dahulu apakah script yang kita tuliskan sudah benar atau belum.
<a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a> sudah menyediakan link khusus untuk mengeceknya, yang bisa Anda cek di <a href="https://gitlab.com/ci/lint">sini</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-171.png">https://coding4ever.files.wordpress.com/2017/08/20170830-171.png</a>&#8221;></p>

<h3>Testing Build</h3>

<p>Untuk testing build kita tinggal melakukan push ke repository git.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-181.png">https://coding4ever.files.wordpress.com/2017/08/20170830-181.png</a>&#8221;></p>

<p>Kemudian untuk melihat log progres buildnya kita bisa cek link <code>Pipelines</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-19.png">https://coding4ever.files.wordpress.com/2017/08/20170830-19.png</a>&#8221;></p>

<p>Gambar detail job yang sedang dijalankan</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-201.png">https://coding4ever.files.wordpress.com/2017/08/20170830-201.png</a>&#8221;></p>

<p>Untuk melihat detail log dari masing-masing job, tinggal kita klik nama jobnya, misal job restore nuget package</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-211.png">https://coding4ever.files.wordpress.com/2017/08/20170830-211.png</a>&#8221;></p>

<p>job build solution</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-221.png">https://coding4ever.files.wordpress.com/2017/08/20170830-221.png</a>&#8221;></p>

<p>Status proses build berhasil</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170830-231.png">https://coding4ever.files.wordpress.com/2017/08/20170830-231.png</a>&#8221;></p>

<p>Untuk contoh lengkap hasil buildnya bisa Anda cek di <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">sini</a></p>

<p>Akhirnya selesai juga postingan <a href="/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/">GitLab CI untuk .NET Developer Bagian #1</a>, dan mudah-mudahan bisa dipahami :-D. Untuk postingan berikutnya insyaAlloh kita akan menambahkan job untuk membuat paket instalasi menggunakan Inno Setup dan menguploadnya sehingga bisa langsung didownload via  Dashboard <a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI</a>.</p>

<p>Selamat <a href="https://gitlab.com/rudi.krsoftware/Northwind/pipelines">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Otomatis Project Visual Basic 6 Menggunakan Jenkins]]></title>
    <link href="http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/"/>
    <updated>2016-12-26T10:02:21+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a>&#8221; width=&#8221;109&#8221; height=&#8221;106&#8221;>Mas kalo di tempat saya masih menggunakan tool jadul seperti Visual Basic 6 untuk pengembangan aplikasinya, apakah masih bisa menggunakan <a href="https://jenkins.io/">Jenkins</a> sebagai software <a href="/blog/categories/continuous-integration/">CInya</a> ? Jawabannya bisa, walaupun secara plugin, di <a href="https://jenkins.io/">Jenkins</a> belum ada plugin khusus untuk keperluan &ldquo;build otomatis project Visual Basic 6&rdquo; seperti halnya di .NET yang sudah tersedia <a href="https://wiki.jenkins-ci.org/display/JENKINS/MSBuild+Plugin">plugin MSBuild</a>. Sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a>  yang ditulis menggunakan bahasa <a href="https://en.wikipedia.org/wiki/PowerShell">PowerShell</a>. Kalo masih bingung dengan skrip <a href="https://github.com/psake/psake">psake</a>, skrip ini mirip dengan skrip rake yang dibuat menggunakan bahasa Ruby.</p>

<!-- more -->


<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>Source/version control Git</li>
<li>Server Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Library (dll/ocx) pihak ketiga</li>
<li>Skrip <a href="https://github.com/psake/psake">psake</a> - psake is a build automation tool written in PowerShell</li>
<li><a href="https://upx.github.io/">UPX</a> - UPX is a free, portable, extendable, high-performance executable packer for several executable formats</li>
</ul>


<h3>PC/Laptop Development</h3>

<ul>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Source/version control Git</li>
<li>TortoiseGit</li>
</ul>


<h3>Skrip Build Otomatis Project Visual Basic 6</h3>

<p>Secara plugin di <a href="https://jenkins.io/">Jenkins</a> memang belum tersedia plugin khusus untuk keperluan &ldquo;build project Visual Basic 6&rdquo; tapi sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a> untuk keperluan ini. Contoh skrip  <a href="https://github.com/psake/psake">psake</a> untuk keperluan <a href="/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/">build otomatis project Visual Basic 6</a> bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">sini</a>.</p>

<p>Berikut contoh skripnya:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;This build assumes the following directory structure&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Script</span> <span class="n">assumes</span> <span class="n">all</span> <span class="n">directories</span> <span class="n">exists</span><span class="p">,</span> <span class="n">initialized</span> <span class="n">by</span> <span class="n">a</span> <span class="n">parent</span> <span class="n">script</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;#&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">\</span><span class="n">build_artifact</span> <span class="o">-</span> <span class="no">This</span> <span class="n">folder</span> <span class="n">is</span> <span class="n">created</span> <span class="k">if</span> <span class="n">it</span> <span class="n">is</span> <span class="n">missing</span> <span class="ow">and</span> <span class="n">contains</span> <span class="n">output</span> <span class="n">of</span> <span class="n">the</span> <span class="n">build</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;\build_log      - This folder is created if it is missing and contains log of the build&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">\</span><span class="n">src</span>            <span class="o">-</span> <span class="no">This</span> <span class="n">folder</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">source</span> <span class="n">code</span> <span class="ow">or</span> <span class="n">project</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">build</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;run : .\psake.ps1 build.ps1&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">properties</span> <span class="n">that</span> <span class="n">is</span> <span class="n">used</span> <span class="n">by</span> <span class="n">the</span> <span class="n">script</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;properties {                  &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="vg">$vb6bin</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ss">C</span><span class="p">:\</span><span class="no">Program</span> <span class="no">Files</span> <span class="p">(</span><span class="n">x86</span><span class="p">)\</span><span class="no">Microsoft</span> <span class="no">Visual</span> <span class="no">Studio</span><span class="p">\</span><span class="no">VB98</span><span class="p">\</span><span class="no">VB6</span><span class="o">.</span><span class="n">EXE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;$build_dir = Split-Path $psake.build_script_file        </span>
</span><span class='line'><span class="sr">$src_dir = &quot;$build_dir\src&quot;</span>
</span><span class='line'><span class="sr">$build_artifact_dir = &quot;$build_dir\build_artifact&quot;</span>
</span><span class='line'><span class="sr">$build_log_dir = &quot;$build_dir\build_log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">$project_name = &quot;Northwind.vbp&quot;</span>
</span><span class='line'><span class="sr">$project = &quot;$src_dir\$project_name&quot;             </span>
</span><span class='line'><span class="sr">$logfile = &quot;$build_log_dir\$project_name.log&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">function</span> <span class="no">NormalizeOutDir</span><span class="p">(</span><span class="vg">$outdir</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="ow">not</span> <span class="p">(</span><span class="vg">$outdir</span><span class="o">.</span><span class="n">EndsWith</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="vg">$outdir</span> <span class="o">+=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;\</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if ($outdir.Contains(&quot; &quot;)) {</span>
</span><span class='line'><span class="sr">    $outdir = $outdir + &quot;\&quot;</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">return $outdir</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">function</span> <span class="no">HasFailed</span><span class="p">(</span><span class="vg">$logFile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="no">Select</span><span class="o">-</span><span class="nb">String</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="vg">$logfile</span> <span class="o">-</span><span class="no">Quiet</span><span class="p">)</span> <span class="o">-</span><span class="ow">or</span> <span class="p">(</span><span class="no">Select</span><span class="o">-</span><span class="nb">String</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ow">not</span> <span class="n">found</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="vg">$logfile</span> <span class="o">-</span><span class="no">Quiet</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;function HasSucceeded($logFile) {</span>
</span><span class='line'><span class="sr">    return (Select-String &amp;ldquo;succeeded&amp;rdquo; $logFile -Quiet)</span>
</span><span class='line'><span class="sr">}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">FormatTaskName</span> <span class="p">((</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">25</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">[</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">]&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/em&gt;25))&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Task</span> <span class="no">Default</span> <span class="o">-</span><span class="no">Depends</span> <span class="no">Build</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Task Build -Depends CreateLogFile {           &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="vg">$outdir</span> <span class="o">=</span> <span class="no">NormalizeOutDir</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="vg">$build_artifact_dir</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="vg">$failed</span> <span class="o">=</span> <span class="vg">$false</span>
</span><span class='line'>    <span class="vg">$retries</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vg">$succeeded</span> <span class="o">=</span> <span class="vg">$false</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Write-Host &quot;Building $name&quot; -ForegroundColor Green</span>
</span><span class='line'>
</span><span class='line'><span class="sr">try {</span>
</span><span class='line'><span class="sr">    Exec {&amp;amp; $vb6bin /m</span> <span class="vg">$project</span> <span class="sr">/out $logfile /ou</span><span class="n">tdir</span> <span class="vg">$outdir</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="kp">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="vg">$failed</span> <span class="o">=</span> <span class="vg">$true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="vg">$failed</span> <span class="o">-</span><span class="ow">or</span> <span class="vg">$succeeded</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="no">Write</span><span class="o">-</span><span class="no">Host</span> <span class="o">-</span><span class="no">NoNewline</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>    <span class="no">Start</span><span class="o">-</span><span class="no">Sleep</span> <span class="o">-</span><span class="n">s</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vg">$failed</span> <span class="o">=</span> <span class="no">HasFailed</span><span class="p">(</span><span class="vg">$logfile</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$succeeded</span> <span class="o">=</span> <span class="no">HasSucceeded</span><span class="p">(</span><span class="vg">$logfile</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$retries</span> <span class="o">=</span> <span class="vg">$retries</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vg">$failed</span> <span class="o">=</span> <span class="p">(</span><span class="vg">$failed</span> <span class="o">-</span><span class="ow">or</span> <span class="p">(</span><span class="vg">$retries</span> <span class="o">-</span><span class="n">eq</span> <span class="mi">60</span><span class="p">))</span> <span class="o">-</span><span class="ow">and</span> <span class="o">!</span><span class="vg">$succeeded</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="vg">$failed</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="no">Type</span> <span class="vg">$logfile</span>
</span><span class='line'>    <span class="kp">throw</span> <span class="s2">&quot;Unable to build $name&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="no">Type</span> <span class="vg">$logfile</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Task CreateLogFile {</span>
</span><span class='line'><span class="sr">    If (!(Test-Path $build_artifact_dir))</span>
</span><span class='line'><span class="sr">    {</span>
</span><span class='line'><span class="sr">        New-Item -Path $build_artifact_dir -ItemType Directory</span>
</span><span class='line'><span class="sr">    }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">If</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="no">Test</span><span class="o">-</span><span class="no">Path</span> <span class="vg">$build_log_dir</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="no">New</span><span class="o">-</span><span class="no">Item</span> <span class="o">-</span><span class="no">Path</span> <span class="vg">$build_log_dir</span> <span class="o">-</span><span class="no">ItemType</span> <span class="no">Directory</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Write</span><span class="o">-</span><span class="n">host</span>  <span class="p">(</span><span class="s2">&quot;Build dir : {0}&quot;</span> <span class="o">-</span><span class="n">f</span> <span class="vg">$build_dir</span><span class="p">)</span>
</span><span class='line'><span class="no">Write</span><span class="o">-</span><span class="n">host</span>  <span class="p">(</span><span class="s2">&quot;Src dir : {0}&quot;</span> <span class="o">-</span><span class="n">f</span> <span class="vg">$src_dir</span><span class="p">)</span>
</span><span class='line'><span class="no">Write</span><span class="o">-</span><span class="n">host</span>  <span class="p">(</span><span class="s2">&quot;Artifact dir : {0}&quot;</span> <span class="o">-</span><span class="n">f</span> <span class="vg">$build_artifact_dir</span><span class="p">)</span>
</span><span class='line'><span class="no">Write</span><span class="o">-</span><span class="n">host</span>  <span class="p">(</span><span class="s2">&quot;Log dir : {0}&quot;</span> <span class="o">-</span><span class="n">f</span> <span class="vg">$logfile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="no">Test</span><span class="o">-</span><span class="no">Path</span> <span class="vg">$logfile</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="no">Remove</span><span class="o">-</span><span class="no">Item</span> <span class="vg">$logfile</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$path</span> <span class="o">=</span> <span class="o">[</span><span class="no">IO</span><span class="o">.</span><span class="n">Path</span><span class="o">]::</span><span class="no">GetFullPath</span><span class="p">(</span><span class="vg">$logfile</span><span class="p">)</span>
</span><span class='line'><span class="no">New</span><span class="o">-</span><span class="no">Item</span> <span class="o">-</span><span class="no">ItemType</span> <span class="n">file</span>  <span class="vg">$path</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Kemudian skrip di atas disimpan di lokasi yang sama dengan folder <code>src</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-01.png">https://coding4ever.files.wordpress.com/2016/12/261226-01.png</a>&#8221;></p>

<p>Untuk contoh project Visual Basic 6-nya bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6">sini</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-02.png">https://coding4ever.files.wordpress.com/2016/12/261226-02.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-03.png">https://coding4ever.files.wordpress.com/2016/12/261226-03.png</a>&#8221;></p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya sudah tidak lagi menjelaskan lagi secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan
<a href="/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya :</p>

<p><strong>Langkah 1</strong>: Buat job/project baru, misal dengan nama <code>northwind-vb6-build</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-04.png">https://coding4ever.files.wordpress.com/2016/12/261226-04.png</a>&#8221;></p>

<p><strong>Langkah 2</strong>: Setting repository git</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-05.png">https://coding4ever.files.wordpress.com/2016/12/261226-05.png</a>&#8221;></p>

<p><strong>Langkah 3</strong>: Setting Execute Windows batch command untuk menjalankan skrip <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-06.png">https://coding4ever.files.wordpress.com/2016/12/261226-06.png</a>&#8221;></p>

<p>Skrip di atas akan menjalankan file <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a> yang akan menghasilkan file exe dari project <a href="https://github.com/k4m4r82/NorthwindVB6">Visual Basic 6</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-09.png">https://coding4ever.files.wordpress.com/2016/12/261226-09.png</a>&#8221;></p>

<p>Hasil <code>compile</code> Visual Basic 6 biasanya ukuran filenya belum dioptimasi, sehingga kita bisa menambahkan skrip untuk melakukan compress menggunakan tool <a href="https://upx.github.io/">UPX</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-07.png">https://coding4ever.files.wordpress.com/2016/12/261226-07.png</a>&#8221;></p>

<p>Lumayan hasil compressnya bisa mencapai 30%-an sendiri.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-111.png">https://coding4ever.files.wordpress.com/2016/12/261226-111.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-101.png">https://coding4ever.files.wordpress.com/2016/12/261226-101.png</a>&#8221;></p>

<p>Kita juga bisa menambahkan skrip <a href="http://www.jrsoftware.org/">Inno Setup</a> untuk membuat paket installer secara otomatis setelah proses <code>build</code> selesai, caranya gimana bisa Anda cek di <a href="/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/">sini</a>.</p>

<p><strong>Langkah 4</strong>: Terakhir tes build</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-08.png">https://coding4ever.files.wordpress.com/2016/12/261226-08.png</a>&#8221;></p>

<p>Jika proses build selesai, kita tinggal cek hasilnya compilenya di folder job</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261226-09.png">https://coding4ever.files.wordpress.com/2016/12/261226-09.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindVB6">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #4]]></title>
    <link href="http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4/"/>
    <updated>2016-12-14T06:44:25+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a>&#8221; width=&#8221;109&#8221; height=&#8221;106&#8221;>Masih membahas tentang  manfaat dari <a href="/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a> untuk kemudahan dalam melakukan proses <code>build</code> dan <code>deploy</code> secara terpusat. Jika dipostingan <a href="/blog/categories/jenkins/">sebelumnya</a> saya menggunakan contoh <a href="https://github.com/k4m4r82/Northwind">aplikasi desktop</a> maka kali ini kita akan membahas proses build dan deploy untuk aplikasi berbasis web seperti ASP.NET, ASP.NET MVC dan <a href="https://github.com/k4m4r82/NorthwindWebApi">ASP.NET  WEB API</a>.</p>

<!-- more -->


<p>Untuk kemudahan proses deploy ke web server IIS, Microsoft sudah menyediakan tool khusus untuk melakukan ini yaitu <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Tool ini akan kita kombinasikan dengan tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build</a>.</p>

<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li>Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li><a href="https://www.nuget.org/">NuGet</a></li>
</ul>


<h5>Server Development/Production</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Web Server IIS 7</li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
</ul>


<h5>PC/Laptop Development</h5>

<ul>
<li>Visual Studio .NET 2013 <a href="https://www.visualstudio.com/vs/community/">Community Edition</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a></li>
</ul>


<h3>Konfigurasi Server Development/Production</h3>

<p>Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1</strong>: Aktifkan role Management Service (Server Manager -> Role -> Web Server (IIS))</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-01.png">https://coding4ever.files.wordpress.com/2016/12/261213-01.png</a>&#8221;></p>

<p>Setelah selesai dilanjutkan dengan pembuatan user windows/local user.</p>

<p><strong>Langkah 2</strong>: Menambahkan user windows/local non-admin untuk keperluan deploy (Server Manager -> Configuration -> Local Users and Groups -> Users</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-02.png">https://coding4ever.files.wordpress.com/2016/12/261213-02.png</a>&#8221;></p>

<p><strong>Langkah 3</strong>: <a href="https://www.iis.net/downloads/microsoft/web-deploy">Download</a> dan Install <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Pada saat instalasi pilih custome kemudian aktifkan semua pilihan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-03.png">https://coding4ever.files.wordpress.com/2016/12/261213-03.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-04.png">https://coding4ever.files.wordpress.com/2016/12/261213-04.png</a>&#8221;></p>

<p><strong>Langkah 4</strong>: Konfigurasi Web Deploy Publishing (IIS Manager -> Site -> Deploy -> Configure Web Deploy Publishing â¦)</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-05.png">https://coding4ever.files.wordpress.com/2016/12/261213-05.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-06.png">https://coding4ever.files.wordpress.com/2016/12/261213-06.png</a>&#8221;></p>

<p><code>tukang_deploy</code> di atas adalah user windows/local <code>non-admin</code> yang sudah kita buat pada langkah sebelumnya.</p>

<p><strong>Langkah 5</strong>: Selesai</p>

<h3>Konfigurasi PC/Laptop Development</h3>

<p>Untuk konfigurasi pc/laptop development dilakukan dengan cara membuat <code>publish profile</code>.  Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Aktifkan project Visual Studio.net, sebagai contoh bisa didownload di <a href="https://github.com/k4m4r82/NorthwindWebApi">sini</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-07.png">https://coding4ever.files.wordpress.com/2016/12/261213-07.png</a>&#8221;></p>

<p><strong>Langkah 2:</strong> Klik kanan project Web API -> Publish&hellip;, setelah itu akan tampil dialog publish web</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-08.png">https://coding4ever.files.wordpress.com/2016/12/261213-08.png</a>&#8221;></p>

<p><strong>Langkah 3:</strong> Kemudian pada tab Profile pilih Custome</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-09.png">https://coding4ever.files.wordpress.com/2016/12/261213-09.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-101.png">https://coding4ever.files.wordpress.com/2016/12/261213-101.png</a>&#8221;></p>

<p>Isikan nama profile</p>

<p><strong>Langkah 4:</strong> Pada tab Connection isikan konfigurasinya seperti berikut</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-112.png">https://coding4ever.files.wordpress.com/2016/12/261213-112.png</a>&#8221;></p>

<p>Contoh konfigurasi di atas menggunakan ip <code>192.168.56.2</code> untuk server development, jadi nilainya tinggal disesuaikan. Untuk user dan password dikosongkan dulu aja, nanti kita set pada saat proses <code>build</code> dan <code>deploy</code> di job/project jenkins.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-122.png">https://coding4ever.files.wordpress.com/2016/12/261213-122.png</a>&#8221;></p>

<p><strong>Langkah 5:</strong> Selanjutnya tinggal di Next aja</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-13.png">https://coding4ever.files.wordpress.com/2016/12/261213-13.png</a>&#8221;></p>

<p><strong>Langkah 6:</strong> Terakhir klik tombol Close</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-14.png">https://coding4ever.files.wordpress.com/2016/12/261213-14.png</a>&#8221;></p>

<p>Setelah proses ini selesai akan dibuatkan file <code>PublishProfiles</code> yang tersimpan di node <code>Properties</code> -> <code>PublishProfiles</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-221.png">https://coding4ever.files.wordpress.com/2016/12/261213-221.png</a>&#8221;></p>

<p>File <code>PublishProfiles</code> ini nantinya akan kita gunakan pada saat proses <code>build</code> dan <code>deploy</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-23.png">https://coding4ever.files.wordpress.com/2016/12/261213-23.png</a>&#8221;></p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya tidak lagi menjelaskan secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan <a href="/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Buat job/project baru, misal dengan nama <code>northwind-web-api-deploy</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-15.png">https://coding4ever.files.wordpress.com/2016/12/261213-15.png</a>&#8221;></p>

<p><strong>Langkah 2:</strong> Setting repository git</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-16.png">https://coding4ever.files.wordpress.com/2016/12/261213-16.png</a>&#8221;></p>

<p><strong>Langkah 3:</strong> Setting restore nuget package</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-17.png">https://coding4ever.files.wordpress.com/2016/12/261213-17.png</a>&#8221;></p>

<p><strong>Langkah 4:</strong> Setting MSBuild</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-181.png">https://coding4ever.files.wordpress.com/2016/12/261213-181.png</a>&#8221;></p>

<p><strong>Langkah 5:</strong> Terakhir tes build dan deploy</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-19.png">https://coding4ever.files.wordpress.com/2016/12/261213-19.png</a>&#8221;></p>

<p>Jika proses <code>build</code> dan <code>deploy</code> selesai, kita tinggal cek hasilnya di IIS Manager</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-201.png">https://coding4ever.files.wordpress.com/2016/12/261213-201.png</a>&#8221;></p>

<p>Setelah itu kita juga bisa langsung mencoba web servicenya menggunakan web browser.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/12/261213-21.png">https://coding4ever.files.wordpress.com/2016/12/261213-21.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindWebApi">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #3]]></title>
    <link href="http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3/"/>
    <updated>2016-11-07T09:44:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a>&#8221; width=&#8221;109&#8221; height=&#8221;106&#8221;>Melanjutkan pembahasan tentang <a href="/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a>. Kita sudah berhasil membuat project/job untuk melakukan proses <code>build</code> dan <code>deploy</code> secara otomatis dan terpusat di satu server. Hanya saja, ada sedikit yang kurang yaitu project/job ini harus kita jalankan/eksekusi secara manual setelah proses <code>push</code> source code ke server repository kita lakukan, dan tentunya akan sangat merepotkan jika harus bolak-balik mengeksekusi project/job setiap selesai melakukan proses <code>push</code>.</p>

<!-- more -->


<p>Nah untuk solusi masalah ini, kita akan menambahkan sedikit skrip agar proses eksekusi project/job ini bisa berjalan secara otomatis setelah selesai melakukan proses <code>push</code>. Skrip ini dikenal dengan nama <code>hook script</code>. Jadi source control seperti Git, mempunyai sekumpulan skrip (hook script ) dengan nama tertentu yang akan di eksekusi oleh git sebelum atau sesudah event-event tertentu, seperti: commit, push, receive dan event-event lainnya. <code>Hook script</code> ini disimpan di folder <code>hooks</code> masing-masing folder repository.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-01.png">https://coding4ever.files.wordpress.com/2016/11/261107-01.png</a>&#8221;></p>

<p>Pada gambar di atas, saya menambahkan file <a href="https://git-scm.com/docs/githooks">hook script</a> dengan nama <code>post-receive</code>, file ini akan dieksekusi secara otomatis seteleh proses <code>push</code> selesai. Berikut contoh isi dari file <code>post-receive</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-021.png">https://coding4ever.files.wordpress.com/2016/11/261107-021.png</a>&#8221;></p>

<p>Skrip <code>post-receive</code> di atas akan mengakses URL/alamat yang di gunakan untuk proses <code>build</code> dan <code>deploy</code> yaitu :</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><code>JENKINS_URL</code> diisi dengan alamat dari server jenkins misal <code>http://localhost:8080</code></li>
<li><code>JOB_NAME</code> diisi dengan nama project/job jenkins misal  <code>northwind-build</code></li>
<li><code>TOKEN_NAME</code> diisi dengan sembarang nilai token, misal <code>cnwlhaUq6g5Uwzvg6ePI</code></li>
</ul>


<p>Selain itu untuk mengakses URL ini juga dibutuhkan informasi user dan APInya, misal menggunakan user <code>admin</code> dengan apinya <code>94a0428ca9d8d1d6c2e229fe1183f98</code>. Selain menggunakan user API kita juga bisa menggunakan langsung password dari user tapi tentunya cara yang kedua ini tidak disarankan.</p>

<h3>Mendapatkan Informasi User API</h3>

<p>Informasi user API bisa diakses melalui menu <code>Manage Jenkins</code> -> <code>Manage Users</code> -> <code>Configure</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-03.png">https://coding4ever.files.wordpress.com/2016/11/261107-03.png</a>&#8221;></p>

<p>Kemudian klik tombol <code>Show API Tokenâ¦</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-04.png">https://coding4ever.files.wordpress.com/2016/11/261107-04.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-05.png">https://coding4ever.files.wordpress.com/2016/11/261107-05.png</a>&#8221;></p>

<h3>Mengaktifkan Project/Job Authentication Token</h3>

<p>Untuk bisa mengakses URL  <strong>JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</strong> selain membutuhkan <code>User</code> dan <code>User API</code>, kita juga perlu mengaktifkan project/job Authentication Token melalui link <code>Project</code> -> <code>Configure</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-06.png">https://coding4ever.files.wordpress.com/2016/11/261107-06.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-07.png">https://coding4ever.files.wordpress.com/2016/11/261107-07.png</a>&#8221;></p>

<p>Kemudian aktifkan pilihan <code>Trigger builds remotely</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-08.png">https://coding4ever.files.wordpress.com/2016/11/261107-08.png</a>&#8221;></p>

<p>Untuk nilai <code>Authentication Token</code> diisi sesuai keinginan, kalo saya biasanya menggunakan tool <a href="/blog/2014/05/21/manajemen-password-menggunakan-keepass/">KeePass</a> untuk mengenerate nilai tokennya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-091.png">https://coding4ever.files.wordpress.com/2016/11/261107-091.png</a>&#8221;></p>

<h3>Testing Build Otomatis</h3>

<p>Setelah menyelesaikan konfigurasi di atas, saatnya melakukan pengetesan apakah konfigurasinya sudah benar atau belum. Berikut langkah-langkahnya :</p>

<ul>
<li>Aktifkan project <a href="https://github.com/k4m4r82/Northwind">Northwind</a></li>
<li><p>Tambahkan method abstract baru di interface <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Api/IProductRepository.cs">IProductRepository</a>, misal dengan nama <code>GetByCategoryName</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-10.png">https://coding4ever.files.wordpress.com/2016/11/261107-10.png</a>&#8221;></p></li>
<li><p>Kemudian lengkapi implementasinya method abstractnya di class <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Service/ProductRepositoryDapper.cs">ProductRepositoryDapper</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-11.png">https://coding4ever.files.wordpress.com/2016/11/261107-11.png</a>&#8221;></p></li>
<li><p>Terakhir lakukan <code>commit</code> dan <code>push</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-12.png">https://coding4ever.files.wordpress.com/2016/11/261107-12.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-13.png">https://coding4ever.files.wordpress.com/2016/11/261107-13.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-14.png">https://coding4ever.files.wordpress.com/2016/11/261107-14.png</a>&#8221;></p></li>
<li><p>Dan secara otomatis proses <code>build</code> dan <code>deploy</code> di server CI akan dijalankan</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/11/261107-15.png">https://coding4ever.files.wordpress.com/2016/11/261107-15.png</a>&#8221;></p></li>
</ul>


<h3>Kesimpulan</h3>

<p>Dengan memanfaatkan <code>hook script</code> proses <code>build</code> dan <code>deploy</code> bisa dibuat otomatis pada event- event-event tertentu, seperti: commit, push, receive dan event-event lainnya.</p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
</feed>
