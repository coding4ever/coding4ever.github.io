<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dapper .net | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/dapper-net/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-07-23T08:40:54+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Repository Pattern Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/"/>
    <updated>2016-06-28T12:54:38+07:00</updated>
    <id>http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Melanjutkan pembahasan <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a>, kali ini kita akan membahas salah satu manfaat menggunakan <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a>. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<!-- more -->


<p>Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository<T> generic/umum sebagai berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-01.png">https://coding4ever.files.wordpress.com/2016/06/280616-01.png</a> %}</p>

<p>Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository<T>. Contoh interface ICategoryRepository dan IProductRepository.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-02.png">https://coding4ever.files.wordpress.com/2016/06/280616-02.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-03.png">https://coding4ever.files.wordpress.com/2016/06/280616-03.png</a> %}</p>

<p>Sebagai contoh kita akan membuat aplikasi menggunakan database <a href="https://northwinddatabase.codeplex.com/">Northwind</a>, dengan menggunakan <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.</p>

<p>{% gist 3ce54c2191c532665f2e19c09abd901b %}</p>

<p>Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-04.png">https://coding4ever.files.wordpress.com/2016/06/280616-04.png</a> %}</p>

<p>Pada gambar di atas deklarsi objek <code>categoryRepository</code> tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep <a href="http://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to interfaces</a>), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.</p>

<p>Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepository.cs">CategoryRepository</a> di atas menggunakan <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> dengan <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> lain yang lebih ringan misal <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Dapper .NET</a>. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepositoryDapper.cs">CategoryRepositoryDapper</a> kemudian mengganti implementasi classnya di sisi client. Mudah bukan :-)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-05.png">https://coding4ever.files.wordpress.com/2016/06/280616-05.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-061.png">https://coding4ever.files.wordpress.com/2016/06/280616-061.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-07.png">https://coding4ever.files.wordpress.com/2016/06/280616-07.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-08.png">https://coding4ever.files.wordpress.com/2016/06/280616-08.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-09.png">https://coding4ever.files.wordpress.com/2016/06/280616-09.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit of Work Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/"/>
    <updated>2016-02-24T10:24:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Kalau sudah membahas <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a> rasanya kurang <code>manteb</code> jika tidak membahas <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work Pattern</a>, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak <em>&ldquo;ibarat sop ayam tanpa garam,  rasanya hambar&rdquo;</em> he he :D</p>

<p><a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan.
Jadi cara kerja <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> ini mirip dengan salah satu fitur andalan <a href="https://en.wikipedia.org/wiki/Category:Database_management_systems">DBMS</a> yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</p>

<!-- more -->


<p><a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> sendiri merupakan salah satu pattern <code>kesukaan</code> Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a>. Bagi Anda yang sudah pernah mencoba <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a>.</p>

<h5>Membuat Interface dan Class Konkret Unit of Work</h5>

<p>Sama seperti pembahasan <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, impelmentasi <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> juga disarankan menggunakan <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>.</p>

<p>Berdasarkan contoh project <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita akan menambahkan interface baru dengan nama <code>IUnitOfWork</code>. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/240216-01.png">https://coding4ever.files.wordpress.com/2016/02/240216-01.png</a> %}</p>

<p>Setelah itu kita buatkan class konkretnya dengan nama <code>UnitOfWork</code>, dan ingat class ini harus mengimplementasikan interface <code>IUnitOfWork</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/240216-02.png">https://coding4ever.files.wordpress.com/2016/02/240216-02.png</a> %}</p>

<p>Terakhir kita lengkapi kode class UnitOfWork seperti berikut :</p>

<p>{% gist c21f5beec8837a044f37 %}</p>

<h5>Testing Class Unit of Work</h5>

<p>Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> menggunakan <a href="{{%20site.url%20}}">Unit of Work Pattern</a>.</p>

<p>{% gist af692dd1962816fab878 %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/UnitOfWorkPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="{{%20site.url%20}}">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Dapper.NET</a>, <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-01.png">https://coding4ever.files.wordpress.com/2016/02/210216-01.png</a> %}</p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-021.png">https://coding4ever.files.wordpress.com/2016/02/210216-021.png</a> %}</p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-101.png">https://coding4ever.files.wordpress.com/2016/02/210216-101.png</a> %}</p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-03.png">https://coding4ever.files.wordpress.com/2016/02/210216-03.png</a> %}</p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<p>{% gist bd6bbf861f46082851c7 %}</p>

<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-04.png">https://coding4ever.files.wordpress.com/2016/02/210216-04.png</a> %}</p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-05.png">https://coding4ever.files.wordpress.com/2016/02/210216-05.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-061.png">https://coding4ever.files.wordpress.com/2016/02/210216-061.png</a> %}</p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<p>{% gist 05123acda602dd1bdc47 %}</p>

<p>{% gist d876476ffa10fa9855d2 %}</p>

<p>Kemudian lengkapi kodenya seperti berikut :</p>

<p>{% gist 4513c85d1541f0321204 %}</p>

<p>{% gist 87ba9b6fe43275c1f59c %}</p>

<h5>Membuat Class Context</h5>

<p>Di dalam <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-07.png">https://coding4ever.files.wordpress.com/2016/02/210216-07.png</a> %}</p>

<p>{% gist 207b5c995e267c01d5c4 %}</p>

<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-08.png">https://coding4ever.files.wordpress.com/2016/02/210216-08.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-09.png">https://coding4ever.files.wordpress.com/2016/02/210216-09.png</a> %}</p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<p>{% gist ac5519310e9154830f1c %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 3]]></title>
    <link href="http://coding4ever.net/blog/2013/03/29/dapper-net-micro-orm-part-3/"/>
    <updated>2013-03-29T14:44:04+07:00</updated>
    <id>http://coding4ever.net/blog/2013/03/29/dapper-net-micro-orm-part-3</id>
    <content type="html"><![CDATA[<p>Pada <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> sebelumnya, kita sudah mencoba mengimplementasikan salah satu perintah SQL yaitu SELECT dengan menggunakan library Dapper .NET.</p>

<p>Dan pada postingan kali ini kita akan mencoba mengimplementasikan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE.</p>

<p>Langsung saja aktifkan kembali project <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> sebelumnya.</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png" alt="21022013-1" /></a></p>

<p><strong>1. INSERT</strong></p>

<p>Untuk menambahkan data terlebih dulu kita membuat sebuah objek, misal objek siswa.</p>

<p>{% codeblock lang:c# %}
// membuat object siswa
var siswa = new Siswa();
siswa.Nis = &ldquo;9991&rdquo;;
siswa.Nama = &ldquo;Bagus&rdquo;;
{% endcodeblock %}</p>

<p>Sejak .NET Framework 3.x ditambahkan fitur baru yg disebut dengan object initializer yang memungkinkan pengesetan nilai property pada saat pembuatan objek.</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};
{% endcodeblock %}</p>

<p>Gimana jadi lebih simple bukan ? :)</p>

<p>Setelah objek siswa dibuat, kita langsung memanggil method Execute dari object conn untuk melakukan penyimpanan.</p>

<p>Berikut kode lengkapnya :</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;INSERT INTO siswa (nis, nama) VALUES (@Nis, @Nama)&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>Parameter @Nis dan @Nama harus sama dengan property class, jika tidak sama kita bisa menggunakan cara yang kedua. Misal untuk nama parameternya kita set @NomorInduk dan @NamaSiswa.</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;INSERT INTO siswa (nis, nama) VALUES (@NomorInduk, @NamaSiswa)&rdquo;;
    result = conn.Execute(strSql, new { NomorInduk = siswa.Nis, NamaSiswa = siswa.Nama });
}
{% endcodeblock %}</p>

<p><strong>2. UPDATE</strong></p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;,
    Nama = &ldquo;Bagus Wicaksono&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;UPDATE siswa SET nama = @Nama WHERE nis = @Nis&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>dan terakhir &hellip;</p>

<p><strong>3. DELETE</strong></p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;DELETE FROM siswa WHERE nis = @Nis&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET3">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 2]]></title>
    <link href="http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2/"/>
    <updated>2013-02-22T10:38:14+07:00</updated>
    <id>http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2</id>
    <content type="html"><![CDATA[<p>Melanjutkan pembahasan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">Dapper .NET</a>, kali ini saya akan mendemokan bagaimana mudahnya melakukan proses mapping record ke object dengan memanfaatkan library <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a>.</p>

<p>Masih menggunakan kasus yang sama dengan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya, kita sudah mempunyai tabel siswa berikut class entitynya, biar lebih mudah saya copas aja ke sini.</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png" alt="07022013-2" /></a></p>

<p>{% codeblock lang:c# %}
public class Siswa
{
    public string Nis { get; set; }
    public string Nama { get; set; }
}
{% endcodeblock %}</p>

<p>dan untuk VB.NET coder kodenya terlihat lebih banyak :D</p>

<p>{% codeblock lang:vbnet %}
Public Class Siswa</p>

<pre><code>Private _nis As String
Public Property Nis() As String
    Get
        Return _nis
    End Get
    Set(ByVal value As String)
        _nis = value
    End Set
End Property

Private _nama As String
Public Property Nama() As String
    Get
        Return _nama
    End Get
    Set(ByVal value As String)
        _nama = value
    End Set
End Property
</code></pre>

<p>End Class
{% endcodeblock %}</p>

<p>Sebelum kita beraksi jangan lupa untuk mendownload terlebih dulu library Dapper .NET di<a href="https://www.box.com/s/cey4lt613heunjcnodqq">sini</a> (dotNetFx35) dan di<a href="https://www.box.com/s/i72nqtpun9c0fah495nl">sini</a> (dotNetFx40). Jadi silahkan download sesuai dengan versi dot NET Framework Anda.</p>

<p>Langkah berikutnya adalah mengaktifkan kembali <a href="https://www.box.com/s/tzeyatmfyoemfdhjdod6">project</a> yang sudah kita bahas pada <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png" alt="21022013-1" /></a></p>

<p>Kemudian tambahkan referensi library Dapper .NET, dengan cara :</p>

<ol>
<li>Klik kanan node References</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png" alt="21022013-2" /></a></p>

<ol>
<li>Kemudian tentukan lokasi library Dapper .NET yang sudah Anda download</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png" alt="21022013-3" /></a></p>

<p>Jika berhasil akan ketambahan sub node baru (Dapper) di bawah node References</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png" alt="21022013-4" /></a></p>

<p>Cara kerja <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> adalah dengan mengextend interface IDbConnection yang digunakan oleh class-class connection seperti SqlConnection dan OleDbConnection.</p>

<p>Klo masih bingung perhatikan gambar berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png" alt="21022013-5" /></a></p>

<p>sekarang coba tambahkan namespace Dapper;</p>

<p>{% codeblock lang:c# %}
using Dapper;
{% endcodeblock %}</p>

<p>di VB.NET kita menggunakan keyword Imports</p>

<p>{% codeblock lang:vbnet %}
Imports Dapper
{% endcodeblock %}</p>

<p>maka secara otomatis objek conn akan mempunyai tambahan beberapa method baru seperti <strong>Execute</strong>, <strong>Query</strong> dan <strong>QueryMultiple</strong>.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png" alt="21022013-6" /></a></p>

<p>Nah method-method itulah yang kita gunakan untuk menjalankan perintah-perintah SQL seperti INSERT, UPDATE, DELETE dan SELECT. Klo istilah krennya sih operasi CRUD.</p>

<p>Oke untuk contoh postingan kali ini kita akan mencoba menjalankan perintah SELECT dengan memanggil method Query di atas.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png" alt="21022013-7" /></a></p>

<p>berikut kode VB.NET yg melakukan hal yang sama</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png" alt="26022013-1" /></a></p>

<p>pada kode di atas kita bisa melihat tanpa melakukan proses mapping sedikit pun, objek daftarSiswa akan terisi dengan kumpulan (collection) dari objek siswa, hanya dengan perintah sederhana berikut:</p>

<p>{% codeblock lang:c# %}
daftarSiswa = conn.Query(strSql, null).ToList();
{% endcodeblock %}</p>

<p>kode yang sama untuk VB.NET</p>

<p>{% codeblock lang:vbnet %}
daftarSiswa = conn.Query(Of Siswa)(strSql, Nothing).ToList()
{% endcodeblock %}</p>

<p>Tapi ada syaratnya yaitu nama-nama field yang ada di dalam tabel harus sama dengan nama-nama property yang ada di dalam class entity.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png" alt="21022013-8" /></a></p>

<p>Trus bagaimana klo nama field dan propertynya berbeda ? Solusinya ya dengan menggunakan ALIAS pada saat melakukan proses query.</p>

<p>Lihat contoh berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png" alt="21022013-9" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png" alt="21022013-10" /></a></p>

<p>atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png" alt="26022013-2" /></a></p>

<p>Setelah itu tinggal ditampilkan hasilnya :</p>

<p>{% codeblock lang:c# %}
foreach (var siswa in daftarSiswa)
{
    Console.WriteLine(siswa.Nis + &ldquo;\t&rdquo; + siswa.Nama);
}
{% endcodeblock %}</p>

<p>sekali lagi di VB.NET</p>

<p>{% codeblock lang:vbnet %}
For Each siswa In daftarSiswa
    Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)
Next
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013.png" alt="07022013" /></a></p>

<p>Yuph saya rasa cukup untuk postingan kali ini, dan pada postingan berikutnya insyaAllah kita akan membahas bagaimana menjalankan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE menggunakan library Dapper .NET.</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET2">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
