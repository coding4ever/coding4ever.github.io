<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dapper .net | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/dapper-net/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2014-11-06T12:06:50+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 3]]></title>
    <link href="http://coding4ever.net/blog/2013/03/29/dapper-net-micro-orm-part-3/"/>
    <updated>2013-03-29T14:44:04+07:00</updated>
    <id>http://coding4ever.net/blog/2013/03/29/dapper-net-micro-orm-part-3</id>
    <content type="html"><![CDATA[<p>Pada <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> sebelumnya, kita sudah mencoba mengimplementasikan salah satu perintah SQL yaitu SELECT dengan menggunakan library Dapper .NET.</p>

<p>Dan pada postingan kali ini kita akan mencoba mengimplementasikan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE.</p>

<p>Langsung saja aktifkan kembali project <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> sebelumnya.</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png" alt="21022013-1" /></a></p>

<p><strong>1. INSERT</strong></p>

<p>Untuk menambahkan data terlebih dulu kita membuat sebuah objek, misal objek siswa.</p>

<p>{% codeblock lang:c# %}
// membuat object siswa
var siswa = new Siswa();
siswa.Nis = &ldquo;9991&rdquo;;
siswa.Nama = &ldquo;Bagus&rdquo;;
{% endcodeblock %}</p>

<p>Sejak .NET Framework 3.x ditambahkan fitur baru yg disebut dengan object initializer yang memungkinkan pengesetan nilai property pada saat pembuatan objek.</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};
{% endcodeblock %}</p>

<p>Gimana jadi lebih simple bukan ? :)</p>

<p>Setelah objek siswa dibuat, kita langsung memanggil method Execute dari object conn untuk melakukan penyimpanan.</p>

<p>Berikut kode lengkapnya :</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;INSERT INTO siswa (nis, nama) VALUES (@Nis, @Nama)&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>Parameter @Nis dan @Nama harus sama dengan property class, jika tidak sama kita bisa menggunakan cara yang kedua. Misal untuk nama parameternya kita set @NomorInduk dan @NamaSiswa.</p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;, Nama = &ldquo;Bagus&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;INSERT INTO siswa (nis, nama) VALUES (@NomorInduk, @NamaSiswa)&rdquo;;
    result = conn.Execute(strSql, new { NomorInduk = siswa.Nis, NamaSiswa = siswa.Nama });
}
{% endcodeblock %}</p>

<p><strong>2. UPDATE</strong></p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;,
    Nama = &ldquo;Bagus Wicaksono&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;UPDATE siswa SET nama = @Nama WHERE nis = @Nis&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>dan terakhir &hellip;</p>

<p><strong>3. DELETE</strong></p>

<p>{% codeblock lang:c# %}
var siswa = new Siswa
{
    Nis = &ldquo;9991&rdquo;
};</p>

<p>using (var conn = GetOpenConnection())
{
    strSql = &ldquo;DELETE FROM siswa WHERE nis = @Nis&rdquo;;
    result = conn.Execute(strSql, siswa);
}
{% endcodeblock %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET3">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 2]]></title>
    <link href="http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2/"/>
    <updated>2013-02-22T10:38:14+07:00</updated>
    <id>http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2</id>
    <content type="html"><![CDATA[<p>Melanjutkan pembahasan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">Dapper .NET</a>, kali ini saya akan mendemokan bagaimana mudahnya melakukan proses mapping record ke object dengan memanfaatkan library <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a>.</p>

<p>Masih menggunakan kasus yang sama dengan <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya, kita sudah mempunyai tabel siswa berikut class entitynya, biar lebih mudah saya copas aja ke sini.</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png" alt="07022013-2" /></a></p>

<p>{% codeblock lang:c# %}
public class Siswa
{
    public string Nis { get; set; }
    public string Nama { get; set; }
}
{% endcodeblock %}</p>

<p>dan untuk VB.NET coder kodenya terlihat lebih banyak :D</p>

<p>{% codeblock lang:vbnet %}
Public Class Siswa</p>

<pre><code>Private _nis As String
Public Property Nis() As String
    Get
        Return _nis
    End Get
    Set(ByVal value As String)
        _nis = value
    End Set
End Property

Private _nama As String
Public Property Nama() As String
    Get
        Return _nama
    End Get
    Set(ByVal value As String)
        _nama = value
    End Set
End Property
</code></pre>

<p>End Class
{% endcodeblock %}</p>

<p>Sebelum kita beraksi jangan lupa untuk mendownload terlebih dulu library Dapper .NET di<a href="https://www.box.com/s/cey4lt613heunjcnodqq">sini</a> (dotNetFx35) dan di<a href="https://www.box.com/s/i72nqtpun9c0fah495nl">sini</a> (dotNetFx40). Jadi silahkan download sesuai dengan versi dot NET Framework Anda.</p>

<p>Langkah berikutnya adalah mengaktifkan kembali <a href="https://www.box.com/s/tzeyatmfyoemfdhjdod6">project</a> yang sudah kita bahas pada <a href="{{%20site.url%20}}/blog/2013/02/07/dapper-net-micro-orm-part-1/">postingan</a> sebelumnya.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-1.png" alt="21022013-1" /></a></p>

<p>Kemudian tambahkan referensi library Dapper .NET, dengan cara :</p>

<ol>
<li>Klik kanan node References</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-2.png" alt="21022013-2" /></a></p>

<ol>
<li>Kemudian tentukan lokasi library Dapper .NET yang sudah Anda download</li>
</ol>


<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-3.png" alt="21022013-3" /></a></p>

<p>Jika berhasil akan ketambahan sub node baru (Dapper) di bawah node References</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-4.png" alt="21022013-4" /></a></p>

<p>Cara kerja <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> adalah dengan mengextend interface IDbConnection yang digunakan oleh class-class connection seperti SqlConnection dan OleDbConnection.</p>

<p>Klo masih bingung perhatikan gambar berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-5.png" alt="21022013-5" /></a></p>

<p>sekarang coba tambahkan namespace Dapper;</p>

<p>{% codeblock lang:c# %}
using Dapper;
{% endcodeblock %}</p>

<p>di VB.NET kita menggunakan keyword Imports</p>

<p>{% codeblock lang:vbnet %}
Imports Dapper
{% endcodeblock %}</p>

<p>maka secara otomatis objek conn akan mempunyai tambahan beberapa method baru seperti <strong>Execute</strong>, <strong>Query</strong> dan <strong>QueryMultiple</strong>.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-6.png" alt="21022013-6" /></a></p>

<p>Nah method-method itulah yang kita gunakan untuk menjalankan perintah-perintah SQL seperti INSERT, UPDATE, DELETE dan SELECT. Klo istilah krennya sih operasi CRUD.</p>

<p>Oke untuk contoh postingan kali ini kita akan mencoba menjalankan perintah SELECT dengan memanggil method Query di atas.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-7.png" alt="21022013-7" /></a></p>

<p>berikut kode VB.NET yg melakukan hal yang sama</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-1.png" alt="26022013-1" /></a></p>

<p>pada kode di atas kita bisa melihat tanpa melakukan proses mapping sedikit pun, objek daftarSiswa akan terisi dengan kumpulan (collection) dari objek siswa, hanya dengan perintah sederhana berikut:</p>

<p>{% codeblock lang:c# %}
daftarSiswa = conn.Query(strSql, null).ToList();
{% endcodeblock %}</p>

<p>kode yang sama untuk VB.NET</p>

<p>{% codeblock lang:vbnet %}
daftarSiswa = conn.Query(Of Siswa)(strSql, Nothing).ToList()
{% endcodeblock %}</p>

<p>Tapi ada syaratnya yaitu nama-nama field yang ada di dalam tabel harus sama dengan nama-nama property yang ada di dalam class entity.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-8.png" alt="21022013-8" /></a></p>

<p>Trus bagaimana klo nama field dan propertynya berbeda ? Solusinya ya dengan menggunakan ALIAS pada saat melakukan proses query.</p>

<p>Lihat contoh berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-9.png" alt="21022013-9" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png"><img src="http://coding4ever.files.wordpress.com/2013/02/21022013-10.png" alt="21022013-10" /></a></p>

<p>atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-2.png" alt="26022013-2" /></a></p>

<p>Setelah itu tinggal ditampilkan hasilnya :</p>

<p>{% codeblock lang:c# %}
foreach (var siswa in daftarSiswa)
{
    Console.WriteLine(siswa.Nis + &ldquo;\t&rdquo; + siswa.Nama);
}
{% endcodeblock %}</p>

<p>sekali lagi di VB.NET</p>

<p>{% codeblock lang:vbnet %}
For Each siswa In daftarSiswa
    Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)
Next
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013.png" alt="07022013" /></a></p>

<p>Yuph saya rasa cukup untuk postingan kali ini, dan pada postingan berikutnya insyaAllah kita akan membahas bagaimana menjalankan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE menggunakan library Dapper .NET.</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET2">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper .NET Micro-ORM Part 1]]></title>
    <link href="http://coding4ever.net/blog/2013/02/07/dapper-net-micro-orm-part-1/"/>
    <updated>2013-02-07T14:58:15+07:00</updated>
    <id>http://coding4ever.net/blog/2013/02/07/dapper-net-micro-orm-part-1</id>
    <content type="html"><![CDATA[<p>Sudah lama saya ingin mengembangkan aplikasi menggunakan tool-tool <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> seperti ADO.NET Entity Framework, MyBatis, LINQ to SQL, NHibernate dan tool ORM lainnya.</p>

<p>Sempat sedikit serius untuk mempelajari NHibernate tapi&hellip; dengan alasan sok sibuk :D akhirnya stop ditengah jalan :(.</p>

<p>Masih belum menyerah saya pun mencoba mencari alternatif lain penggunaan tool ORM dengan melakukan pencarian  menggunakan keyword &ldquo;<strong>micro orm for .net</strong>&rdquo; dari sekian banyak pilihan micro ORM yang ada pilihan saya jatuh ke <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> dengan pertimbangan micro ORM ini sudah digunakan oleh website besar seperti <a href="http://stackoverflow.com/">Stack Overflow</a>, <a href="http://www.xapfest.com/">xpfest.com</a>, <a href="http://www.jitbit.com/helpdesk-software/">helpdesk</a>, <a href="http://www.worldcitycard.com/">worldcitycard</a>, <a href="http://www.ppmroadmap.com/">roadmap</a>.</p>

<!-- more -->


<p><a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> sendiri dibuat oleh om <a href="http://samsaffron.com/">Sam Saffron</a> salah seorang developer berbakat yang ada di belakang <a href="http://stackoverflow.com">Stack Overflow</a>.</p>

<p>Sebelum menggunakan <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a> kita lihat dulu bagaimana mengakses database menggunakan library ADO .NET secara langsung.</p>

<p>Contoh kasusnya sederhana kita akan menampilkan data Siswa dengan menggunakan bahasa pemrograman C# dan VB.NET sedangkan untuk databasenya menggunakan Ms Access.</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013-2.png" alt="07022013-2" /></a></p>

<p>{% codeblock lang:c# %}
using System.Data.OleDb;</p>

<p>namespace SiswaDapperNET1
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var conn = GetOpenConnection())
            {
                var strSql = &ldquo;SELECT nis, nama FROM siswa&rdquo;;
                using (var cmd = new OleDbCommand(strSql, conn))
                {
                    using (var dtr = cmd.ExecuteReader())
                    {
                        Console.WriteLine(&ldquo;NIS\tNAMA&rdquo;);
                        Console.WriteLine(&ldquo;===================================&rdquo;);
                        while (dtr.Read())
                        {
                            Console.WriteLine(dtr[&ldquo;nis&rdquo;] + &ldquo;\t&rdquo; + dtr[&ldquo;nama&rdquo;].ToString().ToUpper());
                        }
                    }
                }
            }</p>

<pre><code>        Console.ReadKey();
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :</p>

<p>{% codeblock lang:vbnet %}
Sub Main()</p>

<pre><code>Using conn As OleDbConnection = GetOpenConnection()

    Dim strSql = "SELECT nis, nama FROM siswa"
    Using cmd = New OleDbCommand(strSql, conn)
        Using dtr As OleDbDataReader = cmd.ExecuteReader()

            Console.WriteLine ("NIS" &amp; vbTab &amp; "NAMA")
            Console.WriteLine ("===================================")
            While dtr.Read()
                Console.WriteLine (dtr("nis") &amp; vbTab &amp; dtr("nama"))
            End While

        End Using
    End Using
End Using
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Method Main di atas membutuhkan method GetOpenConnection yang digunakan untuk membuat koneksi ke database Ms Access.</p>

<p>{% codeblock lang:c# %}
private static OleDbConnection GetOpenConnection()
{
    OleDbConnection conn = null;</p>

<pre><code>try
{

    var appDir = System.IO.Directory.GetCurrentDirectory();
    var strConn = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + appDir + "\\SISWA.MDB;User Id=admin;Password=;";

    conn = new OleDbConnection(strConn);
    conn.Open();
}
catch (Exception)
{
}

return conn;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>dan untuk programmer VB.NET</p>

<p>{% codeblock lang:vbnet %}
Private Function GetOpenConnection() As OleDbConnection
    Dim conn As OleDbConnection = Nothing</p>

<pre><code>Dim appDir As String = System.IO.Directory.GetCurrentDirectory()
Dim strConn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + appDir + "\SISWA.MDB;User Id=admin;Password=;"

Try

    conn = New OleDbConnection(strConn)
    conn.Open()

Catch ex As Exception

End Try

Return conn
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Selanjutnya kita akan memberikan sedikit sentuhan OOP terhadap kode di atas dengan melakukan mapping/pemetaan baris/row dari tabel menjadi objek.</p>

<p>Perhatikan ilustrasi berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/26022013-31.png"><img src="http://coding4ever.files.wordpress.com/2013/02/26022013-31.png" alt="26022013-3" /></a></p>

<p>Mapping bisa dilakukan secara manual atau menggunakan tool ORM (Object Relational Mapping).</p>

<p>Untuk contoh di bawah ini kita melakukan mapping secara manual, tetapi sebelumnya kita harus membuat sebuah class terlebih dulu yang disebut dengan class entity/model.</p>

<p>Class ini merupakan representasi dari tabel-tabel yang ada di dalam sebuah database.</p>

<p>Berdasarkan tabel Siswa di atas, kita akan membuat sebuah class dengan nama Siswa, field/property dari class ini sama persis dengan field-field yang ada di tabel Siswa.</p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<p>{% codeblock lang:c# %}
public class Siswa
{
    public string Nis { get; set; }
    public string Nama { get; set; }
}
{% endcodeblock %}</p>

<p>Jika menggunakan VB.NET kodenya terlihat lebih banyak :D</p>

<p>{% codeblock lang:vbnet %}
Public Class Siswa</p>

<pre><code>Private _nis As String
Public Property Nis() As String
    Get
        Return _nis
    End Get
    Set(ByVal value As String)
        _nis = value
    End Set
End Property

Private _nama As String
Public Property Nama() As String
    Get
        Return _nama
    End Get
    Set(ByVal value As String)
        _nama = value
    End Set
End Property
</code></pre>

<p>End Class
{% endcodeblock %}</p>

<p>Kemudian kita juga akan menambahkan sebuah method baru dengan nama GetDataSiswa, method ini akan mengembalikan kumpulan (collection) dari data siswa.</p>

<p>{% codeblock lang:c# %}
private static List<Siswa> GetDataSiswa()
{
    var daftarSiswa = new List<Siswa>();</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var strSql = "SELECT nis, nama FROM siswa";
    using (var cmd = new OleDbCommand(strSql, conn))
    {
        using (var dtr = cmd.ExecuteReader())
        {
            while (dtr.Read())
            {
                // proses mapping dari row ke object
                var siswa = new Siswa();
                siswa.Nis = dtr["nis"] == null ? string.Empty : dtr.GetString(0);
                siswa.Nama = dtr["nama"] == null ? string.Empty : dtr.GetString(1).ToUpper();

                daftarSiswa.Add(siswa);
            }
        }
    }
}

return daftarSiswa;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>sementara di VB.NET akan terlihat seperti berikut :</p>

<p>{% codeblock lang:vbnet %}
Private Function GetDataSiswa() As List(Of Siswa)</p>

<pre><code>Dim daftarSiswa As New List(Of Siswa)

Using conn As OleDbConnection = GetOpenConnection()

    Dim strSql = "SELECT nis, nama FROM siswa"
    Using cmd = New OleDbCommand(strSql, conn)
        Using dtr As OleDbDataReader = cmd.ExecuteReader()

            While dtr.Read()
                Dim siswa As New Siswa()
                With siswa
                    .Nis = IIf(IsDBNull(dtr("nis")), String.Empty, dtr("nis").ToString())
                    .Nama = IIf(IsDBNull(dtr("nama")), String.Empty, dtr("nama").ToString())
                End With

                daftarSiswa.Add (siswa)
            End While

        End Using
    End Using
End Using

Return daftarSiswa
</code></pre>

<p>End Function
{% endcodeblock %}</p>

<p>Terakhir kita akan melakukan revisi terhadap method Main diatas.</p>

<p>{% codeblock lang:c# %}
static void Main(string[] args)
{
    /<em>
    using (var conn = GetOpenConnection())
    {
        var strSql = &ldquo;SELECT nis, nama FROM siswa&rdquo;;
        using (var cmd = new OleDbCommand(strSql, conn))
        {
            using (var dtr = cmd.ExecuteReader())
            {
                Console.WriteLine(&ldquo;NIS\tNAMA&rdquo;);
                Console.WriteLine(&ldquo;===================================&rdquo;);
                while (dtr.Read())
                {
                    Console.WriteLine(dtr[&ldquo;nis&rdquo;] + &ldquo;\t&rdquo; + dtr[&ldquo;nama&rdquo;].ToString().ToUpper());
                }
            }
        }
    }
    </em>/</p>

<pre><code>Console.WriteLine("NIS\tNAMA");
Console.WriteLine("===================================");

var daftarSiswa = GetDataSiswa();
foreach (var siswa in daftarSiswa)
{
    Console.WriteLine(siswa.Nis + "\t" + siswa.Nama);
}

Console.ReadKey();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>sekali lagi di VB.NET :</p>

<p>{% codeblock lang:vbnet %}
Sub Main()</p>

<pre><code>'Using conn As OleDbConnection = GetOpenConnection()

'    Dim strSql = "SELECT nis, nama FROM siswa"
'    Using cmd = New OleDbCommand(strSql, conn)
'        Using dtr As OleDbDataReader = cmd.ExecuteReader()

'            Console.WriteLine("NIS" &amp; vbTab &amp; "NAMA")
'            Console.WriteLine("===================================")
'            While dtr.Read()
'                Console.WriteLine(dtr("nis") &amp; vbTab &amp; dtr("nama"))
'            End While

'        End Using
'    End Using
'End Using

Console.WriteLine ("NIS" &amp; vbTab &amp; "NAMA")
Console.WriteLine ("===================================")

Dim daftarSiswa = GetDataSiswa()

For Each siswa In daftarSiswa
    Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)
Next

Console.ReadKey()
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>Jika program di atas dijalankan akan menghasilkan output seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2013/02/07022013.png"><img src="http://coding4ever.files.wordpress.com/2013/02/07022013.png" alt="07022013" /></a></p>

<p>Untuk penggunaan micro ORM <a href="https://code.google.com/p/dapper-dot-net/">Dapper .NET</a>, insyaAllah akan kita mulai pembahasannya pada <a href="{{%20site.url%20}}/blog/2013/02/22/dapper-net-micro-orm-part-2/">postingan</a> berikutnya :D.</p>

<p>Selamat <a href="https://github.com/k4m4r82/MicroORMDapperNET1">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
