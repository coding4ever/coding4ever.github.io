<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Testing | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/software-testing/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-12-14T07:01:04+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit Dan NDbUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit/"/>
    <updated>2016-08-12T10:13:09+07:00</updated>
    <id>http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/07/nunit.png">https://coding4ever.files.wordpress.com/2016/07/nunit.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;57&#8221;>Melanjutkan pembahasan tentang <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing Menggunakan NUnit</a>, di mana pada <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya  kita menggunakan contoh kasus <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>  pada pengembangan aplikasi database, sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak.</p>

<!-- more -->


<p>Untuk method <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> dan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> masih menggunakan contoh yang sama dengan <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya.</p>

<p style="text-align:center;"> Contoh method CRUD</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-01.png">https://coding4ever.files.wordpress.com/2016/08/120816-01.png</a>&#8221;></p>

<p style="text-align:center;"> Contoh Unit Testing</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-02.png">https://coding4ever.files.wordpress.com/2016/08/120816-02.png</a>&#8221;></p>

<p>Sebagai pengingat untuk melakukan <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> pada aplikasi database, kita harus menyiapkan data untuk tesnya terlebih dulu yaitu dengan meng-INSERT-kan beberapa data yang sesuai dengan kondisi yang kita set pada <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testing</a>. Cara <code>manual</code> sudah kita lakukan pada <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">postingan</a> sebelumnya, dan untuk <a href="">postingan</a> kali ini kita akan menggunakan library tambahan yang disebut dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>. Dengan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> kita dapat me-reset kondisi database sesuai keinginan setiap kali tes akan dijalankan. Me-reset di sini maksudnya <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> akan mengosongkan isi database terlebih dulu kemudian mengisikan data tesnya berdasarkan data yang sudah kita siapkan dalam format XML. Jadi pastikan kita tidak menggunakan database <code>production</code> pada saat menjalankan <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<h3>Menggunakan NDbUnit</h3>

<p><a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> bisa dengan mudah kita tambahkan melalui <a href="/blog/categories/nuget/">NuGet</a>. Ada banyak pilihan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, disesuaikan dengan database yang kita gunakan. Untuk contoh di sini saya menggunakan <a href="https://www.nuget.org/packages/NDbUnit.SqlClient/">NDbUnit.SqlClient</a> untuk database SQL Server.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-03.png">https://coding4ever.files.wordpress.com/2016/08/120816-03.png</a>&#8221;></p>

<p>Setelah menambahkan library <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>, langkah berikutnya adalah menambahkan file  .NET dataset schema definition (xsd) untuk setiap tabel yang akan di tes. Contoh kita punya tabel <code>Pegawai</code> dengan struktur seperti berikut:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-04.png">https://coding4ever.files.wordpress.com/2016/08/120816-04.png</a>&#8221;></p>

<p>Kemudian kita tinggal buatkan file.NET dataset schema definition (xsd) sesuai dengan struktur tabel di atas.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-05.png">https://coding4ever.files.wordpress.com/2016/08/120816-05.png</a>&#8221;></p>

<p>Berikutnya kita tambahkan file XML yang berisi data <code>Pegawai</code> yang akan di-INSERT-kan secara otomatis ke dalam database oleh <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-06.png">https://coding4ever.files.wordpress.com/2016/08/120816-06.png</a>&#8221;></p>

<p>Terakhir kita tambahkan method <code>ResetDatabase</code> pada class <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">PegawaiRepositoryTest</a>, kemudian kita panggil di method <code>Init</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-07.png">https://coding4ever.files.wordpress.com/2016/08/120816-07.png</a>&#8221;></p>

<p>Nah sekarang kita coba jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>, tapi sebelumnya kita cek dulu isi dari tabel <code>Pegawai</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-08.png">https://coding4ever.files.wordpress.com/2016/08/120816-08.png</a>&#8221;></p>

<p>Masih kosong kan? Coba kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-09.png">https://coding4ever.files.wordpress.com/2016/08/120816-09.png</a>&#8221;></p>

<p>Yup <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> langsung berhasil, sekarang kita cek lagi isi dari tabel Pegawai</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-10.png">https://coding4ever.files.wordpress.com/2016/08/120816-10.png</a>&#8221;></p>

<p>Nah sudah ada isinya kan? Ini berarti <a href="https://github.com/NDbUnit/NDbUnit">NDbUnit</a> sukses menjalankan misinya untuk mengisikan data Pegawai berdasarkan file <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/Pegawai.xml">Pegawai.xml</a> yang sudah kita buat pada langkah-langkah sebelumnya, sebelum <a href="https://github.com/k4m4r82/DemoIntegrationTesting2/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> dijalankan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/08/120816-06.png">https://coding4ever.files.wordpress.com/2016/08/120816-06.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/"/>
    <updated>2016-07-28T11:19:59+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/07/nunit.png">https://coding4ever.files.wordpress.com/2016/07/nunit.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;57&#8221;>Dasar-dasar <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> sudah kita pelajari, dilanjutkan dengan <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> untuk mengecek tingkat keseriusan programmer dalam membuat <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>. Semakin sedikit <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat atau asal-asalan pada saat membuat <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> bakalan dijamin <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p>Pada postingan kali ini kita akan membahas tentang <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> yaitu tes yang dilakukan secara berkelompok. Sebagai contoh, dalam pengembangan aplikasi bisnis hampir bisa dipastikan 100% akan menggunakan database.  Sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak. Jadi kita tidak perlu lagi melakukan pengetesan secara <code>serius</code> di level UI (console, winform atau halaman web) karena sudah di lakukan pengetesan  melalui <a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a>.</p>

<p>Contoh kita punya dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-01.png">https://coding4ever.files.wordpress.com/2016/07/280716-01.png</a>&#8221;></p>

<p>Kemudian kita buatkan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> seperti ini :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-02.png">https://coding4ever.files.wordpress.com/2016/07/280716-02.png</a>&#8221;></p>

<p>Unit testing pertama yang akan kita tes adalah method <code>GetByID</code>, method ini mempunyai satu parameter yaitu <code>nik</code> yang nilainya kita isi dengan <code>12345</code>. Setelah pemanggilan method <code>GetByID</code> (baris 30) <code>seharusnya</code> objek <code>pegawai</code> akan terisi dengan data pegawai dengan nik <code>12345</code>. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Objek pegawai tidak boleh null (baris 32)</li>
<li>Nik pegawai harus sama dengan <code>12345</code> (baris 33)</li>
<li>Nama pegawai harus sama dengan <code>Janoe Hendarto, S.Kom</code> (baris 34)</li>
<li>Untuk alamat dan kota nilainya juga harus sama dengan gambar di atas (baris 35 – 36)</li>
</ol>


<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a> menggunakan <code>NUnit GUI Runner</code>, dan hasilnya adalah …</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-03.png">https://coding4ever.files.wordpress.com/2016/07/280716-03.png</a>&#8221;></p>

<p><a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">Unit testingnya</a> ternyata gagal karena kondisi yang sudah kita tentukan di baris 32 bahwa objek pegawainya tidak boleh null tidak terpenuhi. Ada dua kemungkinan penyebab kegagalan ini yaitu :</p>

<ol>
<li>Kita salah mengeset nilai niknya, jadi kemungkinan niknya bukan <code>12345</code> atau ..</li>
<li>Datanya memang belum ada</li>
</ol>


<p>Jadi kita akan cek dulu kemungkinan yang nomor 2 yaitu dengan melihat isi tabel Pegawai</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-04.png">https://coding4ever.files.wordpress.com/2016/07/280716-04.png</a>&#8221;></p>

<p>Ternyata memang benar datanya yang belum ada he he :-D, berarti harus kita tambahkan dulu data pegawai dengan nik <code>12345</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-05.png">https://coding4ever.files.wordpress.com/2016/07/280716-05.png</a>&#8221;></p>

<p>Setelah itu kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-06.png">https://coding4ever.files.wordpress.com/2016/07/280716-06.png</a>&#8221;></p>

<p>Ternyata masih gagal tapi dengan kondisi yang berbeda, dari gambar di atas terlihat nilai yang kita harapkan adalah <code>Janoe Hendarto, S.Kom</code> sedangkan yang ada di database adalah <code>Janoe Hendarto, M.Kom</code> beda di gelarnya yaitu <code>S.Kom</code> dan <code>M.Kom</code>, berarti kegagalan kedua ini kita yang salah mengeset kondisi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>. Solusinya kita tinggal ganti <code>S.Kom</code> menjadi <code>M.Kom</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-07.png">https://coding4ever.files.wordpress.com/2016/07/280716-07.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-08.png">https://coding4ever.files.wordpress.com/2016/07/280716-08.png</a>&#8221;></p>

<p>Kemudian kita cek lagi <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-09.png">https://coding4ever.files.wordpress.com/2016/07/280716-09.png</a>&#8221;></p>

<p>Akhirnya tes pertama berhasil :-)</p>

<p>Gimana ? Lebih <code>cepat</code> dan <code>gampang</code> bukan dari pada melakukan pengetesan dengan cara <code>jadul</code> via console, winform, atau halaman web he he just kidding :-D</p>

<p>Berikutnya kita akan tes method yang kedua yaitu <code>GetAll</code>, kode pengetesannya seperti ini :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-10.png">https://coding4ever.files.wordpress.com/2016/07/280716-10.png</a>&#8221;></p>

<p>Method <code>GetAll</code> di atas akan mengembalikan kumpulan/collection dari objek pegawai. Setelah itu kita membuat skenario pengetesan seperti berikut :</p>

<ol>
<li>Jumlah pegawainya ada 3 orang/record (baris 43)</li>
<li>Di baris 46 kita membuat objek <code>pegawai</code> kemudian mengeset datanya dengan data pegawai terakhir (index = 2)</li>
<li>Mulai baris 48 – 52, kita melakukan pengetesan seperti pengetesan method <code>GetByID</code></li>
</ol>


<p>Untuk keperluan tes ini kita tambahkan lagi dua record data pegawai, sehingga totalnya adalah 3 record sesuai dengan skenario nomor 1 di atas.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-11.png">https://coding4ever.files.wordpress.com/2016/07/280716-11.png</a>&#8221;></p>

<p>Setelah itu kita jalankan <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service.UnitTest/PegawaiRepositoryTest.cs">unit testingnya</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-12.png">https://coding4ever.files.wordpress.com/2016/07/280716-12.png</a>&#8221;></p>

<p>Karena kondisi pengetesan (unit testing) sudah sesuai dengan data riil database, pengetesanpun langsung berhasil.</p>

<p>Nah sampai di sini sudah dua method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> yang selesai kita tes, dan untuk contoh pengetesan method <a href="https://github.com/k4m4r82/DemoIntegrationTesting/blob/master/src/SimPeg.Repository.Service/PegawaiRepository.cs">CRUD</a> lainnya seperti Save, Update dan Delete kodenya lebih kurang seperti berikut:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-13.png">https://coding4ever.files.wordpress.com/2016/07/280716-13.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-14.png">https://coding4ever.files.wordpress.com/2016/07/280716-14.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-15.png">https://coding4ever.files.wordpress.com/2016/07/280716-15.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/280716-161.png">https://coding4ever.files.wordpress.com/2016/07/280716-161.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoIntegrationTesting">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coverage Testing Menggunakan NUnit, OpenCover Dan ReportGenerator]]></title>
    <link href="http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/"/>
    <updated>2016-07-22T20:23:16+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/07/nunit.png">https://coding4ever.files.wordpress.com/2016/07/nunit.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;57&#8221;>Sudah menggunakan <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ? Klo belum mampir ke <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">sini</a> dulu ya :-)</p>

<p>Kali ini kita akan membahas tentang <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> yaitu pengetesan yang dilakukan untuk mengecek apakah <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang dibuat telah meng-cover semua kode yang perlu dites. Jika <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> terlalu sedikit atau waktu membuat <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> asal-asalan biasanya <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> akan gagal.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-15.jpg">https://coding4ever.files.wordpress.com/2016/07/220716-15.jpg</a>&#8221;></p>

<p>Mengecek satu-persatu unit testing yang dibuat oleh programmer apakah sudah sesuai dengan kode yang perlu dites jelas tidak mungkin, untungnya sudah tersedia banyak tool yang bisa melakukkannya secara otomatis.</p>

<p>Berikut beberapa tool yang bisa digunakan untuk melakukan <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di dunia .NET yaitu :</p>

<ol>
<li><a href="http://nunit.org/">NUnit</a></li>
<li><a href="https://github.com/OpenCover/opencover/releases">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator/releases">Report Generator</a></li>
</ol>


<p>Duet maut ketiga tool di atas bisa kita gunakan untuk melakukan prosedur <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a>. Untuk mendownloadnya Anda tinggal klik link di atas, khusus untuk <a href="https://www.nuget.org/packages/OpenCover/">OpenCover</a> dan <a href="https://www.nuget.org/packages/ReportGenerator/">Report Generator</a> sebaiknya disimpan di folder yang sama.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-01.png">https://coding4ever.files.wordpress.com/2016/07/220716-01.png</a>&#8221;></p>

<h3>Proses Coverage Testing</h3>

<p>Secara umum proses <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> menggunakan ke tiga tool di atas bisa di gambarkan seperti berikut</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-02.png">https://coding4ever.files.wordpress.com/2016/07/220716-02.png</a>&#8221;></p>

<p>Keterangan gambar :</p>

<ol>
<li>NUnit tool menjalankan prosedur unit testing terhadap file library yang sudah ditentukan</li>
<li>Dari proses poin 1 akan digunakan OpenCover untuk mengenerate file hasil coverage test dalam format xml. Karena file hasil generatenya dalam format xml, tentu akan menyulitkan kita untuk membacanya, makanya kita butuh tool terakhir yaitu Report Generator</li>
<li>Report Generator digunakan untuk membuat laporan format HTML yang lebih <code>manusiawi</code> sehingga mudah dibaca berdasarkan file coverage.xml</li>
</ol>


<p>Berdasarkan keterangan di atas kita bisa menuliskan batch command untuk prosedur <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> seperti berikut :</p>

<h4>Tahapan poin 1 dan 2</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>OpenCover.Console.exe -target:nunit-console.exe -targetargs:&ldquo;/nologo /noshadow &rdquo;&ldquo;Library.NUnitTest.dll&rdquo;&ldquo;&rdquo; -filter:+[&lt;em>]&lt;/em> -register:user -output: CodeCoverageResult.xml</span></code></pre></td></tr></table></div></figure></p>

<h4>Tahapan poin 3</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;2. menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>ReportGenerator.exe -reports CodeCoverageResult.xml -targetdir: _CodeCoverageReport</span></code></pre></td></tr></table></div></figure></p>

<h3>Persiapan Coverage Testing</h3>

<p>Sama seperti pembahasan <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> kita juga membutuhkan dua project yaitu project target dan project unit testing. Untuk contoh disini kita sudah punya dua project yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> dan <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLibUnitTest">KRSoftwareLibUnitTest</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-03.png">https://coding4ever.files.wordpress.com/2016/07/220716-03.png</a>&#8221;></p>

<p>Project <a href="https://github.com/k4m4r82/DemoCoverageTesting/tree/master/src/KRSoftwareLib">KRSoftwareLib</a> mempunyai sebuah class yaitu <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLib/DayHelper.cs">DayHelper</a> dan mempunyai dua method <code>GetIndonesianDay</code> dan <code>Weekday</code> yang akan kita buatkan <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testingnya</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-04.png">https://coding4ever.files.wordpress.com/2016/07/220716-04.png</a>&#8221;></p>

<p>Nah ini <a href="https://github.com/k4m4r82/DemoCoverageTesting/blob/master/src/KRSoftwareLibUnitTest/DayHelperTest.cs">unit testing</a> dari method <code>GetIndonesianDay</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-05.png">https://coding4ever.files.wordpress.com/2016/07/220716-05.png</a>&#8221;></p>

<p>Setelah project <code>KRSoftwareLibUnitTest</code>-nya selesai, kemudian dilanjutkan dengan proses build project, baru kita jalankan prosedur coverage testing :</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ldquo;C:\CoverageTesting\opencover.4.6.519&rdquo;\OpenCover.Console.exe -target:&ldquo;C:\Program Files (x86)\NUnit 2.6.4\bin&rdquo;\nunit-console.exe -targetargs:&ldquo;/nologo /noshadow &rdquo;&ldquo;C:\CoverageTesting\KRSoftwareLibUnitTest\bin\Debug\KRSoftwareLibUnitTest.dll&rdquo;&ldquo;&rdquo; -filter:&ldquo;+["KRSoftwareLib&rdquo;]*&ldquo; -register:user -output:"CodeCoverageResult.xml&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-06.png">https://coding4ever.files.wordpress.com/2016/07/220716-06.png</a>&#8221;></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;2. echo menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ldquo;C:\CoverageTesting\ReportGenerator_2.4.5.0\bin&rdquo;\ReportGenerator.exe -reports:&ldquo;CodeCoverageResult.xml&rdquo; -targetdir:&ldquo;_CodeCoverageReport&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-07.png">https://coding4ever.files.wordpress.com/2016/07/220716-07.png</a>&#8221;></p>

<p>Dari proses coverage test di atas akan menghasilkan coverage test yang bagus, karena semua kondisi sudah dites. Berikut adalah hasil coverage testnya:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-08.png">https://coding4ever.files.wordpress.com/2016/07/220716-08.png</a>&#8221;></p>

<p>Coba perhatikan kolom <code>Line coverage</code> dan <code>Branch coverage</code> nilainya 100% (warna hijaunya penuh).</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-16.jpg">https://coding4ever.files.wordpress.com/2016/07/220716-16.jpg</a>&#8221;></p>

<p>Kita juga bisa melihat detail coverage test dari class DayHelper.cs :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-09.png">https://coding4ever.files.wordpress.com/2016/07/220716-09.png</a>&#8221;></p>

<p>Nah sekarang kita coba menonaktifkan beberapa baris kode tesnya untuk melihat perbedaan nilai kolom <code>Line coverage</code> dan <code>Branch coverage</code> seperti ini :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-10.png">https://coding4ever.files.wordpress.com/2016/07/220716-10.png</a>&#8221;></p>

<p>Hasil coverage testingnya jadi jelek alias gagal karena hanya dua kondisi yang di tes yaitu hari <code>Senin</code> dan <code>Selasa</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-11.png">https://coding4ever.files.wordpress.com/2016/07/220716-11.png</a>&#8221;></p>

<p>Dari detail coverage testnya class DayHelper.cs juga kelihatan baris/kondisi yang belum di tes:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-12.png">https://coding4ever.files.wordpress.com/2016/07/220716-12.png</a>&#8221;></p>

<p>Gampang bukan ? Dengan coverage testing ini, kita jadi mudah untuk mendeteksi tingkat keseriusan programmer dalam membuat <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>.</p>

<h3>Build Events</h3>

<p>Sebenarnya pembahasan <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testingnya</a> sudah selesai, tapi berhubungan prosedur <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas masih dijalankan secara manual via command prompt tentu akan menyulitkan kita untuk mengecek <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testingnya</a> setiap ada perubahan.
Salah satu solusinya adalah dengan memanfaatkan fasilitas <a href="/blog/categories/build-events/">Build Events</a> yang sudah disediakan oleh Visual Studio .NET.</p>

<p>Nah berikut skrip <a href="/blog/categories/build-events/">Build Events</a> yang harus kita buat untuk menjalankan prosedur <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> di atas secara otomatis, setiap kali project unit testingnya di build.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo &ldquo;set lokasi tool coverage testing&rdquo;
</span><span class='line'>set OpenCoverDir=&ldquo;C:\CoverageTesting\opencover.4.6.519&rdquo;
</span><span class='line'>set NUnitRunnerDir=&ldquo;C:\Program Files (x86)\NUnit 2.6.4\bin&rdquo;
</span><span class='line'>set ReportGeneratorDir=&ldquo;C:\CoverageTesting\ReportGenerator_2.4.5.0\bin&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>echo &ldquo;set coverage xml&rdquo;
</span><span class='line'>set CodeCoverageResult=&ldquo;CodeCoverageResult.xml&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>echo &ldquo;set target library yang mau dites, misal KRSoftwareLib&rdquo;
</span><span class='line'>set TargetLib=&ldquo;KRSoftwareLib&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>echo &ldquo;generate coverage result xml format&rdquo;
</span><span class='line'>call %OpenCoverDir%\OpenCover.Console.exe -target:%NUnitRunnerDir%\nunit-console.exe -targetargs:&ldquo;/nologo /noshadow $(TargetFileName)&rdquo; -filter:&ldquo;+[%TargetLib%]*&rdquo; -register:user -output:%CodeCoverageResult%&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>echo &ldquo;generate coverage result html format&rdquo;
</span><span class='line'>call %ReportGeneratorDir%\ReportGenerator.exe -reports:%CodeCoverageResult% -targetdir:_CodeCoverageReport</span></code></pre></td></tr></table></div></figure></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-13.png">https://coding4ever.files.wordpress.com/2016/07/220716-13.png</a>&#8221;></p>

<p>Jadi setiap kita melakukan build project, prosedur <a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">coverage testing</a> otomatis akan dijalankan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/220716-14.png">https://coding4ever.files.wordpress.com/2016/07/220716-14.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoCoverageTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">Nunit</a></li>
<li><a href="https://github.com/opencover/opencover">OpenCover</a></li>
<li><a href="https://github.com/danielpalme/ReportGenerator">Report Generator</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Menggunakan NUnit]]></title>
    <link href="http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/"/>
    <updated>2016-07-20T14:42:50+07:00</updated>
    <id>http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/07/nunit.png">https://coding4ever.files.wordpress.com/2016/07/nunit.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;57&#8221;>Testing merupakan salah satu fase penting yang harus dilakukan ketika membuat sebuah aplikasi. Testing biasanya dilakukan secara berbarengan pada saat menulis kode. Ada banyak <code>gaya</code> dalam melakukan testing dan yang paling favorit biasanya adalah gaya konvensional. Dengan menggunakan gaya ini programmer desktop akan menggunakan console/winform untuk melihat hasil tes dari sebuah unit (fungsi/method) sedangankan programmer web langsung menggunakan halaman web.</p>

<!-- more -->


<p>Ini adalah gaya lama yang kita pelajari dari jaman Majapahit <strong>#eh</strong>, maksudnya masa-masa kuliah dulu :-D, kan enggak keren banget udah jadi programmer pro (programmer yang udah kerja) tapi testingnya masih bergaya <code>mahasiswa</code> :-D</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-01.png">https://coding4ever.files.wordpress.com/2016/07/200716-01.png</a>&#8221;></p>

<p>Dengan testing gaya <code>jadul</code> ini, <code>kita</code> yang harus melakukan evaluasi terhadap hasil tesnya. Contoh tes di atas <code>5 + 2</code> kok hasilnya <code>10</code>. Bayangkan klo kita kurang teliti bakalan jadi bug di kemudian hari.</p>

<p>Jika Anda bosan dengan gaya ini (konvensional/jadul/mahasiswa) dan ingin naik level, kita bisa menggunakan tool yang memang dibuat khusus untuk melakukan unit testing seperti  <a href="http://www.nunit.org/">NUnit</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-02.png">https://coding4ever.files.wordpress.com/2016/07/200716-02.png</a>&#8221;></p>

<p>Dengan menggunakan tool unit testing, <code>komputer</code>-lah yang melakukan evaluasi terhadap hasil tesnya. Kita tinggal duduk manis he he :-)</p>

<h3>Jenis-jenis Testing</h3>

<p>Sebenarnya ada banyak jenis-jenis testing, tetapi karena keterbatasan waktu dan ilmu, saya hanya membahas jenis-jenis testing berikut :</p>

<ul>
<li><a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a></li>
<li><a href="/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/">Coverage Testing</a></li>
<li><a href="/blog/2016/07/28/integration-testing-menggunakan-nunit/">Integration Testing</a></li>
<li><a href="/blog/2015/10/20/performance-test-menggunakan-jmeter/">Performance Testing</a></li>
</ul>


<p>Jadi kita akan membahas <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a> terlebih dulu.</p>

<h3>Unit testing</h3>

<p>Unit testing adalah testing di level paling detail dari aplikasi. Artinya, testing di level method/function. Tes ini biasanya dilakukan oleh programmer dan bukan oleh tester, karena membutuhkan pengetahuan yang rinci tentang desain aplikasi dan kode yang ditulis.
Ada beberapa tool yg bisa digunakan untuk keperluan ini tergantung dari bahasa pemrograman yang kita gunakan. Misal di .NET (NUnit), Java (JUnit) dan PHP (PHPUnit).</p>

<p>Di postingan ini kita akan menggunakan <a href="http://nunit.org/">NUnit</a> sebagai tool untuk melakukan unit testing. <a href="http://www.nunit.org/">NUnit</a> adalah framework unit testing yang digunakan untuk bahasa pemrograman .NET. <a href="http://www.nunit.org/">NUnit</a> sendiri merupakan hasil portingan dari <a href="http://junit.org/">JUnit</a>.
Sebelum menggunakan NUnit tentunya harus kita <a href="http://www.nunit.org/index.php?p=download">download</a> dan kemudian menginstallnya.</p>

<h3>Membuat Project</h3>

<p>Untuk uji coba <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> ada dua project yang akan kita buat yaitu :</p>

<ol>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> – Ini adalah project target yang akan kita tes untuk setiap unitnya (fungsi/method).</p></li>
<li><p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> – Ini adalah project <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a> yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>.</p></li>
</ol>


<h3>Membuat Project CalculatorLib</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> adalah project yang akan kita buatkan unit testingnya, project ini bertipe <code>Class Library</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-03.png">https://coding4ever.files.wordpress.com/2016/07/200716-03.png</a>&#8221;></p>

<p>Nah di project ini, kita akan membuat class baru dengan nama <code>Calculator</code> kemudian menambahkan empat method yaitu <code>Tambah</code>, <code>Kurang</code>, <code>Kali</code> dan <code>Bagi</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-04.png">https://coding4ever.files.wordpress.com/2016/07/200716-04.png</a>&#8221;></p>

<p>Coba perhatikan gambar di atas, method <code>Tambah</code> sengaja dibuat salah dengan menggunakan operator kali (*), biar nanti keliatan efeknya ketika dites menggunakan <a href="http://www.nunit.org/">NUnit</a>.</p>

<p>Setelah project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a> selesai kita lanjut dengan membuat project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a>.</p>

<h3>Membuat Project CalculatorUnitTest</h3>

<p>Project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> adalah project unit testing yang digunakan untuk mengetes project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, project ini juga bertipe <code>Class Library</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-05.png">https://coding4ever.files.wordpress.com/2016/07/200716-05.png</a>&#8221;></p>

<p>Di project ini, kita akan menambahkan class baru dengan nama <code>CalculatorTest</code> yang mempunyai empat method yaitu <code>TambahTest</code>, <code>KurangTest</code>, <code>KaliTest</code> dan <code>BagiTest</code>. Jadi konvensi penamaannya adalah untuk nama class di tambah akhiran <code>Test</code>. Contoh class <code>Calculator</code> menjadi <code>CalculatorTest</code>. Untuk method juga sama, misal method <code>Tambah</code> menjadi <code>TambahTest</code>, method <code>Kurang</code> menjadi <code>KurangTest</code> begitu seterusnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-06.png">https://coding4ever.files.wordpress.com/2016/07/200716-06.png</a>&#8221;></p>

<p>Method-method yang ada di class unit testingnya, biasanya bersifat <code>independent</code> artinya masing-masing method ini bisa dijalankan/eksekusi secara mandiri (tidak tergantung dengan method yang lain) sehingga kita bisa menjalankan unit testing secara berulang.</p>

<h3>Menambahkan Referensi Project CalculatorLib</h3>

<p>Agar project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> bisa mengakses semua class dan method yang ada di project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorLib">CalculatorLib</a>, kita terlebih dulu harus menambahkan referensi CalculatorLib. Caranya seperti berikut :</p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-07.png">https://coding4ever.files.wordpress.com/2016/07/200716-07.png</a>&#8221;></p></li>
<li><p>Aktifkan panel Solution kemudian pilih project CalculatorLib</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-08.png">https://coding4ever.files.wordpress.com/2016/07/200716-08.png</a>&#8221;></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library CalculatorLib</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-09.png">https://coding4ever.files.wordpress.com/2016/07/200716-09.png</a>&#8221;></p></li>
</ol>


<p>Kemudian lengkapi kode class <a href="https://github.com/k4m4r82/DemoUnitTesting/blob/master/src/CalculatorUnitTest/CalculatorTest.cs">CalculatorTest</a>, seperti gambar di bawah ini.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-10.png">https://coding4ever.files.wordpress.com/2016/07/200716-10.png</a>&#8221;></p>

<h3>Menambahkan Library Unit Testing</h3>

<p>Seperti penjelasan saya di awal postingan, untuk contoh unit testing ini kita akan menggunakan <a href="http://www.nunit.org/">NUnit</a>. Berikut langkah-langkah menambahkan library <a href="http://www.nunit.org/">NUnit</a></p>

<ol>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-11.png">https://coding4ever.files.wordpress.com/2016/07/200716-11.png</a>&#8221;></p></li>
<li><p>Setelah tampil dialog Reference Manager, aktifkan panel Assemblies -> Extensions kemudian aktifkan pilihan nunit.framework</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-12.png">https://coding4ever.files.wordpress.com/2016/07/200716-12.png</a>&#8221;></p></li>
<li><p>Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library nunit.framework</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-13.png">https://coding4ever.files.wordpress.com/2016/07/200716-13.png</a>&#8221;></p></li>
</ol>


<h3>Menulis Unit Testing</h3>

<p>Setelah menambahkan library unit testing, project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> tidak otomatis langsung dikenali oleh  tool unit testing, ada hal-hal lainnya yang perlu kita
ketahui dalam menulis unit testing menggunakan <a href="http://www.nunit.org/">Nunit</a> yaitu :</p>

<ul>
<li><a href="http://www.nunit.org/index.php?p=attributes&amp;r=2.4">Attributes</a></li>
<li><a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.2.10">Assertions</a></li>
</ul>


<h4>Attributes</h4>

<p>Digunakan untuk memberi tag/penanda  class dan method yang akan dites. Ada dua attribut yang sering digunakan yaitu attribut <code>[TestFixture]</code> untuk menandai <code>class</code> dan attribut <code>[Test]</code> untuk menandai method. Contoh :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-14.png">https://coding4ever.files.wordpress.com/2016/07/200716-14.png</a>&#8221;></p>

<p>Selain itu ada attribut lain yang digunakan untuk menandai method yang berfungsi sebagai method inisialisasi yaitu attribut <code>[SetUp]</code>. Contoh :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-15.png">https://coding4ever.files.wordpress.com/2016/07/200716-15.png</a>&#8221;></p>

<p>Jadi method <code>Init</code> di atas akan dijalankan terlebih dulu sebelum tool <a href="http://www.nunit.org/">Nunit</a> menjalankan method-method lain yang ditandai dengan attribut <code>[Test]</code>.</p>

<h4>Assertions</h4>

<p>Merupakan sekumpulan method static yang digunakan untuk mengevaluasi method yang akan dites.  Jadi method-method assertions akan mengembalikan nilai boolean (true/false). Contoh :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-16.png">https://coding4ever.files.wordpress.com/2016/07/200716-16.png</a>&#8221;></p>

<p>Pada gambar di atas kita menggunakan salah satu method <code>Assertions</code> yaitu method <code>AreEqual</code> untuk membandingkan dua buah nilai, yaitu nilai yang di harapkan (expected) dan nilai aktual. Nilai expected  kita inputkan secara manual sedangkan nilai aktual dihasilkan dari pemanggilan method. Coba perhatikan potongan kode berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-17.png">https://coding4ever.files.wordpress.com/2016/07/200716-17.png</a>&#8221;></p>

<p>Dari hasil pemanggilan method Tambah(5, 2), jika menghasilkan nilai 7 maka method <code>AreEqual</code> akan mengembalikan nilai true yang artinya tes berhasil karena sesuai dengan nilai yang diharapkan yaitu <code>7</code> selain itu akan mengembalikan nilai false/gagal.</p>

<p>Untuk referensi method-method <code>Assertions</code> lainnya bisa dicek di<a href="http://www.nunit.org/index.php?p=assertions&amp;r=2.5.10">sini</a>.</p>

<h3>NUnit GUI Runner</h3>

<p>Merupakan tool GUI bawaan NUnit yang digunakan untuk menjalankan project unit testing. Tool ini membutuhkan file assembly (dll) dari project unit testing. Jadi project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> harus kita <code>build</code> terlebih dulu untuk menghasilkan file assembly(CalculatorUnitTest.dll), kemudian kita buka menggunakan tool <code>NUnit GUI Runner</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-18.png">https://coding4ever.files.wordpress.com/2016/07/200716-18.png</a>&#8221;></p>

<p>Caranya dari menu File -> Open Project kemudian cari hasil build project <a href="https://github.com/k4m4r82/DemoUnitTesting/tree/master/src/CalculatorUnitTest">CalculatorUnitTest</a> (CalculatorUnitTest.dll).</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-25.png">https://coding4ever.files.wordpress.com/2016/07/200716-25.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-19.png">https://coding4ever.files.wordpress.com/2016/07/200716-19.png</a>&#8221;></p>

<p>Untuk memulai tes, klik tombol <code>Run</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-20.png">https://coding4ever.files.wordpress.com/2016/07/200716-20.png</a>&#8221;></p>

<p>Dari gambar di atas hanya method <code>Tambah</code> yang gagal melewati unit testing, coba kita cek kode unit testnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-21.png">https://coding4ever.files.wordpress.com/2016/07/200716-21.png</a>&#8221;></p>

<p>Dari kode di atas <code>5 + 2</code> seharusnya menghasilkan nilai <code>7</code> (nilai expected/diharapkan), tetapi dari hasil unit testingnya malah menghasilkan nilai <code>10</code>, dari mana datangnya nilai <code>10</code> ini ?</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-22.png">https://coding4ever.files.wordpress.com/2016/07/200716-22.png</a>&#8221;></p>

<p>Dari sini kita sudah bisa menebak ada yang salah dengan method Tambahnya, coba kita cek lagi method Tambah dari class Calculator.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-23.png">https://coding4ever.files.wordpress.com/2016/07/200716-23.png</a>&#8221;></p>

<p>Ops!!! ternyata benar ada <code>kesalahan logic</code> yaitu salah operator di method Tambah yang seharusnya menggunakan operator tambah (+) malah menggunakan operator kali (*), sehingga wajar <code>5 * 2</code> menghasilkan nilai <code>10</code> bukannya <code>7</code>. Jadi harus kita benarin dulu operatornya kemudian build ulang.</p>

<p>Setelah itu kita cek lagi hasil unit testingnya</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/07/200716-24.png">https://coding4ever.files.wordpress.com/2016/07/200716-24.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUnitTesting">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.nunit.org/">NUnit</a></li>
<li><a href="http://nunit.org/index.php?p=quickStart&amp;r=2.6.4">NUnit Quick Start</a></li>
<li><a href="http://nunit.org/index.php?p=writingTests&amp;r=2.6.4">Writing Tests</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Test Menggunakan JMeter]]></title>
    <link href="http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/"/>
    <updated>2015-10-20T09:26:38+07:00</updated>
    <id>http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/10/apache-jmeter.png">https://coding4ever.files.wordpress.com/2015/10/apache-jmeter.png</a>&#8221; width=&#8221;100&#8221; height=&#8221;100&#8221;>Aktivitas saya di kantor akhir-akhir ini, lebih sering ngoding untuk backend/web service. Nah untuk membuat service ini, saya biasanya menggunakan teknologi <a href="/blog/categories/wcf/">WCF</a>, hanya saja untuk <code>kekinian</code> :-D saya juga menggunakan <a href="http://www.asp.net/web-api">ASP.NET Web Api</a>.</p>

<p>Untuk tahapan testing wajib yang saya lakukan adalah minimal <a href="https://en.wikipedia.org/wiki/Unit_testing">unit test</a>. <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit test</a> yang dilakukan biasanya di level DAL (Data Access Layer) dan Controller.</p>

<!-- more -->


<p><a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> ini merupakan bagian dari <code>white box testing</code> karena testing ini dieksekusi langsung oleh programmer. Sedangkan untuk <code>black box testing</code> bisa dilakukan menggunakan aplikasi sejenis <a href="http://www.telerik.com/fiddler">Fiddler</a> atau menggunakan add-ons yang dimiliki oleh browser-browser seperti Mozilla Firefox dan Google Chrome.</p>

<p>Karena service ini nantinya akan digunakan oleh banyak client dan user, tentu akan <code>ngeri-ngeri sedap</code>  :-D jika testingnya masih dilakukan secara manual. Jadi sebaiknya kita menggunakan <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> untuk proses ini.</p>

<p>Ada banyak <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> yang tersedia baik yang gratis maupun yang berbayar. Untuk postingan kali ini saya menggunakan <a href="http://jmeter.apache.org/">JMeter</a>.</p>

<p>Apa itu <a href="http://jmeter.apache.org/">JMeter</a> ?</p>

<blockquote><p>The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions</p></blockquote>

<p>Berikut langkah-langkah menggunakan <a href="http://jmeter.apache.org/">JMeter</a> :</p>

<h5>1. Download <a href="http://jmeter.apache.org/download_jmeter.cgi">JMeter</a> kemudian ekstrak, misal di drive C:\</h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-1.png">https://coding4ever.files.wordpress.com/2015/10/201015-1.png</a>&#8221;></p>

<h5>2. Untuk menjalankan <a href="http://jmeter.apache.org/">JMeter</a>, klik ganda file <code>jmeter.bat</code> yang ada di folder <code>bin</code></h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-2.png">https://coding4ever.files.wordpress.com/2015/10/201015-2.png</a>&#8221;></p>

<p>Tunggu beberapa saat sampai tampil, aplikasi <a href="http://jmeter.apache.org/">JMeter</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-3.png">https://coding4ever.files.wordpress.com/2015/10/201015-3.png</a>&#8221;></p>

<p>Kemudian ganti informasi Name, sesuai kebutuhan. Misal <code>Performance Test Web Service Presensi</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-4.png">https://coding4ever.files.wordpress.com/2015/10/201015-4.png</a>&#8221;></p>

<h5>3. Menambahkan User Defined Variables</h5>

<p>Di node ini kita akan menambahkan informasi global yang sering digunakan pada saat testing seperti informasi <code>host</code> dan <code>port</code>.</p>

<p>Untuk menambahkan node <code>User Defined Variables</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Config Element -> User Defined Variables.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-5.png">https://coding4ever.files.wordpress.com/2015/10/201015-5.png</a>&#8221;></p>

<p>Kemudian lakukan pengaturan <code>User Defined Variables</code> seperti gambar berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-6.png">https://coding4ever.files.wordpress.com/2015/10/201015-6.png</a>&#8221;></p>

<p>Pada gambar di atas kita menambahkan dua variabel yaitu <code>host</code> dan <code>port</code>. Nah variabel-variabel ini nantinya akan digunakan pada langkah-langkah berikutnya.</p>

<h5>4. Menambahkan HTTP Header Manager</h5>

<p>Setelah menambahkan node <code>User Defined Variables</code>, kita lanjutkan dengan menambahkan node <code>HTTP Header Manager</code>. Langkah-langkahnya sama seperti menambahkan node <code>User Defined Variables</code>, hanya saja yang dipilih adalah <code>HTTP Header Manager</code>.</p>

<p>Di node ini kita akan menambahkan informasi apa saja yang dikirimkan <a href="http://jmeter.apache.org/">JMeter</a> ke HTTP request header.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-7.png">https://coding4ever.files.wordpress.com/2015/10/201015-7.png</a>&#8221;></p>

<h5>5. Menambahkan HTTP Request Defaults</h5>

<p>Langkah berikutnya adalah menambahkan node <code>HTTP Request Defaults</code>, caranya juga sama seperti sebelumnya hanya saja yang dipilih node <code>HTTP Request Defaults</code>.</p>

<p>Di node ini kita cukup mengeset informasi nama server/ip address, port dan protocol.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-8.png">https://coding4ever.files.wordpress.com/2015/10/201015-8.png</a>&#8221;></p>

<p>Karena sebelumnya kita sudah mendefinisikan nama host dan port di node <code>User Defined Variables</code>, di node ini kita tinggal panggil variabel tersebut dengan format : ${<strong>NAMA_VARIABEL</strong>}.</p>

<h5>6. Menambahkan Thread Group</h5>

<p>Node ini digunakan untuk mengelompokan service yang akan di tes. Misal kita mempunyai service Mahasiswa dan Dosen, kedua service ini sebaiknya dibuatkan <code>Thread Group</code> masing-masing.</p>

<p>Untuk menambahkan node <code>Thread Group</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Threads (Users) -> Thread Group.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-9.png">https://coding4ever.files.wordpress.com/2015/10/201015-9.png</a>&#8221;></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-10.png">https://coding4ever.files.wordpress.com/2015/10/201015-10.png</a>&#8221;></p>

<p>Dari setting di atas, kita akan membuat skenario <code>performance test</code> seperti berikut :</p>

<ul>
<li>Jumlah user sebanyak 50 orang</li>
<li>Setiap 2 detik (100/50), akan mengirimkan 6 request ke server.</li>
<li>Total jumlah sample = 300 (50 x 6)</li>
</ul>


<p>Skenario <code>performance test</code> ini bisa diganti-ganti nilainya sesuai kebutuhan.</p>

<h5>7. Menambahkan HTTP Request</h5>

<p>Setelah menentukan skenario <code>performance test</code>, langkah berikutnya adalah menambahkan node <code>HTTP Request</code>. Di node inilah kita akan menentukan web service yang akan di tes. Misal web service mahasiswa mempunyai dua layanan yaitu <code>GetByID</code> dan <code>GetByName</code>. Nah dua layanan ini akan kita tambahkan sebagi bagian dari <code>HTTP Request</code>.</p>

<p>Untuk menambahkan node <code>HTTP Request</code> klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Sampler -> HTTP Request.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-11.png">https://coding4ever.files.wordpress.com/2015/10/201015-11.png</a>&#8221;></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-12.png">https://coding4ever.files.wordpress.com/2015/10/201015-12.png</a>&#8221;></p>

<p>Dari gambar di atas, informasi web servicenya sebagai berikut :</p>

<ul>
<li>Nama service : <code>GetById</code></li>
<li>Path/Url : <code>/Api/Mahasiswa/GetById</code></li>
<li>Service ini mempunyai satu parameter yaitu <code>id</code>, yang kita set nilainya <code>09.01.2488</code></li>
<li>Informasi server name/ip dan port number tidak perlu di set, karena sudah kita set nilainya di node <code>HTTP Request Defaults</code></li>
</ul>


<p>Ulangi langkah sebelumnya untuk menambahkan service yang lain.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-13.png">https://coding4ever.files.wordpress.com/2015/10/201015-13.png</a>&#8221;></p>

<h5>8. Menambahkan report untuk menampilkan hasil Performance test</h5>

<p>Ada beberapa format laporan yang digunakan untuk menampilkan hasil performance test yaitu :</p>

<ul>
<li>View Results in Table</li>
<li>View Results Tree</li>
<li>Response Times Over Time</li>
<li>Transactions per Second</li>
<li>Statistical Aggregate Report</li>
<li>Summary Report</li>
</ul>


<p>Untuk menambahkan semua format laporan di atas klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Listener -> Pilih jenis laporan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-14.png">https://coding4ever.files.wordpress.com/2015/10/201015-14.png</a>&#8221;></p>

<h5>9. Menjalankan Performance test</h5>

<p>Untuk menjalankan performance test, kita tinggal mengklik toolbar <code>Start</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-15.png">https://coding4ever.files.wordpress.com/2015/10/201015-15.png</a>&#8221;></p>

<p><code>Performance test</code> ini di jalankan menggunakan <code>Environment Test</code> sebagai berikut :</p>

<h5>Server Web Service :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2008 64 Bit</li>
<li>Web Server : IIS 7</li>
<li>Teknologi/framwork REST Service : ASP.NET Web API 2</li>
<li>Processor : Intel Xeon X5570 2.93 Ghz</li>
<li>RAM : 12 GB</li>
</ul>


<h5>Server Database :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2012 64 Bit</li>
<li>Database : SQL Server 2014</li>
<li>Processor : Intel Xeon E5-2620 v2 2.10 Ghz</li>
<li>RAM : 24 Gb</li>
</ul>


<h5>10. Contoh Hasil Performance Test</h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-16.png">https://coding4ever.files.wordpress.com/2015/10/201015-16.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-17.png">https://coding4ever.files.wordpress.com/2015/10/201015-17.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-18.png">https://coding4ever.files.wordpress.com/2015/10/201015-18.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-19.png">https://coding4ever.files.wordpress.com/2015/10/201015-19.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-20.png">https://coding4ever.files.wordpress.com/2015/10/201015-20.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-21.png">https://coding4ever.files.wordpress.com/2015/10/201015-21.png</a>&#8221;></p>

<p>Sebagai penutup saya belum menemukan referensi yang tepat bagaimana cara menganalisa hasil dari <code>performance test</code> di atas, tetapi biasanya yang saya jadikan acuan adalah hasil yang bisa dilihat melalui node <code>View Results in Table</code> kolom Status, dari node ini kelihatan apakah ada request service yang berstatus <code>Warning</code>. Jika ada mungkin ini bisa menjadi bahan acuan apakah service kita masih perlu di-<code>improve</code> lagi atau skenario <code>performance test</code> yang perlu diganti atau karena faktor lainnya seperti kondisi jaringan yang lagi <code>enggak fit</code> pada saat melakukan tes :-D.</p>

<p>Selamat mencoba :-)</p>
]]></content>
  </entry>
  
</feed>
