<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2017-08-22T16:03:33+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Otomatis Project Visual Basic 6 Menggunakan Jenkins]]></title>
    <link href="http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/"/>
    <updated>2016-12-26T10:02:21+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a> 109 106 %}Mas kalo di tempat saya masih menggunakan tool jadul seperti Visual Basic 6 untuk pengembangan aplikasinya, apakah masih bisa menggunakan <a href="https://jenkins.io/">Jenkins</a> sebagai software <a href="{{%20site.url%20}}/blog/categories/continuous-integration/">CInya</a> ? Jawabannya bisa, walaupun secara plugin, di <a href="https://jenkins.io/">Jenkins</a> belum ada plugin khusus untuk keperluan &ldquo;build otomatis project Visual Basic 6&rdquo; seperti halnya di .NET yang sudah tersedia <a href="https://wiki.jenkins-ci.org/display/JENKINS/MSBuild+Plugin">plugin MSBuild</a>. Sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a>  yang ditulis menggunakan bahasa <a href="https://en.wikipedia.org/wiki/PowerShell">PowerShell</a>. Kalo masih bingung dengan skrip <a href="https://github.com/psake/psake">psake</a>, skrip ini mirip dengan skrip rake yang dibuat menggunakan bahasa Ruby.</p>

<!-- more -->


<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>Source/version control Git</li>
<li>Server Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Library (dll/ocx) pihak ketiga</li>
<li>Skrip <a href="https://github.com/psake/psake">psake</a> - psake is a build automation tool written in PowerShell</li>
<li><a href="https://upx.github.io/">UPX</a> - UPX is a free, portable, extendable, high-performance executable packer for several executable formats</li>
</ul>


<h3>PC/Laptop Development</h3>

<ul>
<li>Microsoft Visual Studio/Basic 6.0</li>
<li>Source/version control Git</li>
<li>TortoiseGit</li>
</ul>


<h3>Skrip Build Otomatis Project Visual Basic 6</h3>

<p>Secara plugin di <a href="https://jenkins.io/">Jenkins</a> memang belum tersedia plugin khusus untuk keperluan &ldquo;build project Visual Basic 6&rdquo; tapi sebagai solusinya kita bisa menggunakan skrip <a href="https://github.com/psake/psake">psake</a> untuk keperluan ini. Contoh skrip  <a href="https://github.com/psake/psake">psake</a> untuk keperluan <a href="{{%20site.url%20}}/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/">build otomatis project Visual Basic 6</a> bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">sini</a>.</p>

<p>Berikut contoh skripnya:</p>

<p>{% codeblock lang:rb %}</p>

<h1>This build assumes the following directory structure</h1>

<h1>Script assumes all directories exists, initialized by a parent script</h1>

<p>#</p>

<h1>\build_artifact - This folder is created if it is missing and contains output of the build</h1>

<h1>\build_log      - This folder is created if it is missing and contains log of the build</h1>

<h1>\src            - This folder contains the source code or project you want to build</h1>

<h1>run : .\psake.ps1 build.ps1</h1>

<h1>properties that is used by the script</h1>

<p>properties {                  <br/>
    $vb6bin = &ldquo;C:\Program Files (x86)\Microsoft Visual Studio\VB98\VB6.EXE&rdquo;</p>

<pre><code>$build_dir = Split-Path $psake.build_script_file        
$src_dir = "$build_dir\src"
$build_artifact_dir = "$build_dir\build_artifact"
$build_log_dir = "$build_dir\build_log"

$project_name = "Northwind.vbp"
$project = "$src_dir\$project_name"             
$logfile = "$build_log_dir\$project_name.log"
</code></pre>

<p>}</p>

<p>function NormalizeOutDir($outdir) {
    if (-not ($outdir.EndsWith(&ldquo;\&rdquo;))) {
        $outdir += &lsquo;\&rsquo;
    }</p>

<pre><code>if ($outdir.Contains(" ")) {
    $outdir = $outdir + "\"
}

return $outdir
</code></pre>

<p>}</p>

<p>function HasFailed($logFile) {
    return ((Select-String &ldquo;failed&rdquo; $logfile -Quiet) -or (Select-String &ldquo;not found&rdquo; $logfile -Quiet))
}</p>

<p>function HasSucceeded($logFile) {
    return (Select-String &ldquo;succeeded&rdquo; $logFile -Quiet)
}</p>

<p>FormatTaskName ((&ldquo;-&rdquo;<em>25) + &ldquo;[{0}]&rdquo; + (&ldquo;-&rdquo;</em>25))</p>

<p>Task Default -Depends Build</p>

<p>Task Build -Depends CreateLogFile {           <br/>
    $outdir = NormalizeOutDir(&ldquo;$build_artifact_dir&rdquo;)
    $failed = $false
    $retries = 0
    $succeeded = $false</p>

<pre><code>Write-Host "Building $name" -ForegroundColor Green

try {
    Exec {&amp; $vb6bin /m $project /out $logfile /outdir $outdir}
} catch {
    $failed = $true
}

while (!($failed -or $succeeded)) {
    Write-Host -NoNewline "."
    Start-Sleep -s 1
    $failed = HasFailed($logfile)
    $succeeded = HasSucceeded($logfile)
    $retries = $retries + 1
    $failed = ($failed -or ($retries -eq 60)) -and !$succeeded
}

if ($failed)
{
    Type $logfile
    throw "Unable to build $name"
}
Type $logfile
</code></pre>

<p>}</p>

<p>Task CreateLogFile {
    If (!(Test-Path $build_artifact_dir))
    {
        New-Item -Path $build_artifact_dir -ItemType Directory
    }</p>

<pre><code>If (!(Test-Path $build_log_dir)) 
{
    New-Item -Path $build_log_dir -ItemType Directory
}

Write-host  ("Build dir : {0}" -f $build_dir)
Write-host  ("Src dir : {0}" -f $src_dir)
Write-host  ("Artifact dir : {0}" -f $build_artifact_dir)   
Write-host  ("Log dir : {0}" -f $logfile)

if (Test-Path $logfile)
{
    Remove-Item $logfile
}

$path = [IO.Path]::GetFullPath($logfile)
New-Item -ItemType file  $path
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Kemudian skrip di atas disimpan di lokasi yang sama dengan folder <code>src</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-01.png">https://coding4ever.files.wordpress.com/2016/12/261226-01.png</a> %}</p>

<p>Untuk contoh project Visual Basic 6-nya bisa Anda download di <a href="https://github.com/k4m4r82/NorthwindVB6">sini</a>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-02.png">https://coding4ever.files.wordpress.com/2016/12/261226-02.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-03.png">https://coding4ever.files.wordpress.com/2016/12/261226-03.png</a> %}</p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya sudah tidak lagi menjelaskan lagi secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan
<a href="{{%20site.url%20}}/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya :</p>

<p><strong>Langkah 1</strong>: Buat job/project baru, misal dengan nama <code>northwind-vb6-build</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-04.png">https://coding4ever.files.wordpress.com/2016/12/261226-04.png</a> %}</p>

<p><strong>Langkah 2</strong>: Setting repository git</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-05.png">https://coding4ever.files.wordpress.com/2016/12/261226-05.png</a> %}</p>

<p><strong>Langkah 3</strong>: Setting Execute Windows batch command untuk menjalankan skrip <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-06.png">https://coding4ever.files.wordpress.com/2016/12/261226-06.png</a> %}</p>

<p>Skrip di atas akan menjalankan file <a href="https://github.com/k4m4r82/NorthwindVB6/blob/master/build.ps1">build.ps1</a> yang akan menghasilkan file exe dari project <a href="https://github.com/k4m4r82/NorthwindVB6">Visual Basic 6</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-09.png">https://coding4ever.files.wordpress.com/2016/12/261226-09.png</a> %}</p>

<p>Hasil <code>compile</code> Visual Basic 6 biasanya ukuran filenya belum dioptimasi, sehingga kita bisa menambahkan skrip untuk melakukan compress menggunakan tool <a href="https://upx.github.io/">UPX</a>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-07.png">https://coding4ever.files.wordpress.com/2016/12/261226-07.png</a> %}</p>

<p>Lumayan hasil compressnya bisa mencapai 30%-an sendiri.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-111.png">https://coding4ever.files.wordpress.com/2016/12/261226-111.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-101.png">https://coding4ever.files.wordpress.com/2016/12/261226-101.png</a> %}</p>

<p>Kita juga bisa menambahkan skrip <a href="http://www.jrsoftware.org/">Inno Setup</a> untuk membuat paket installer secara otomatis setelah proses <code>build</code> selesai, caranya gimana bisa Anda cek di <a href="{{%20site.url%20}}/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/">sini</a>.</p>

<p><strong>Langkah 4</strong>: Terakhir tes build</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-08.png">https://coding4ever.files.wordpress.com/2016/12/261226-08.png</a> %}</p>

<p>Jika proses build selesai, kita tinggal cek hasilnya compilenya di folder job</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261226-09.png">https://coding4ever.files.wordpress.com/2016/12/261226-09.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindVB6">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #4]]></title>
    <link href="http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4/"/>
    <updated>2016-12-14T06:44:25+07:00</updated>
    <id>http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a> 109 106 %}Masih membahas tentang  manfaat dari <a href="{{%20site.url%20}}/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a> untuk kemudahan dalam melakukan proses <code>build</code> dan <code>deploy</code> secara terpusat. Jika dipostingan <a href="{{%20site.url%20}}/blog/categories/jenkins/">sebelumnya</a> saya menggunakan contoh <a href="https://github.com/k4m4r82/Northwind">aplikasi desktop</a> maka kali ini kita akan membahas proses build dan deploy untuk aplikasi berbasis web seperti ASP.NET, ASP.NET MVC dan <a href="https://github.com/k4m4r82/NorthwindWebApi">ASP.NET  WEB API</a>.</p>

<!-- more -->


<p>Untuk kemudahan proses deploy ke web server IIS, Microsoft sudah menyediakan tool khusus untuk melakukan ini yaitu <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Tool ini akan kita kombinasikan dengan tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build</a>.</p>

<h3>Environment Test</h3>

<p>Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:</p>

<h5>Server CI (Continuous Integration)</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Software CI (Continuous Integration) menggunakan <a href="https://jenkins.io/">Jenkins</a></li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li>Repository Git menggunakan <a href="https://bonobogitserver.com/">Bonobo Git Server</a></li>
<li><a href="https://www.nuget.org/">NuGet</a></li>
</ul>


<h5>Server Development/Production</h5>

<ul>
<li>Windows Server 2008 R2</li>
<li>Web Server IIS 7</li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy 3.6</a></li>
</ul>


<h5>PC/Laptop Development</h5>

<ul>
<li>Visual Studio .NET 2013 <a href="https://www.visualstudio.com/vs/community/">Community Edition</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a></li>
</ul>


<h3>Konfigurasi Server Development/Production</h3>

<p>Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1</strong>: Aktifkan role Management Service (Server Manager -> Role -> Web Server (IIS))</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-01.png">https://coding4ever.files.wordpress.com/2016/12/261213-01.png</a> %}</p>

<p>Setelah selesai dilanjutkan dengan pembuatan user windows/local user.</p>

<p><strong>Langkah 2</strong>: Menambahkan user windows/local non-admin untuk keperluan deploy (Server Manager -> Configuration -> Local Users and Groups -> Users</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-02.png">https://coding4ever.files.wordpress.com/2016/12/261213-02.png</a> %}</p>

<p><strong>Langkah 3</strong>: <a href="https://www.iis.net/downloads/microsoft/web-deploy">Download</a> dan Install <a href="https://www.iis.net/downloads/microsoft/web-deploy">Web Deploy</a>. Pada saat instalasi pilih custome kemudian aktifkan semua pilihan.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-03.png">https://coding4ever.files.wordpress.com/2016/12/261213-03.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-04.png">https://coding4ever.files.wordpress.com/2016/12/261213-04.png</a> %}</p>

<p><strong>Langkah 4</strong>: Konfigurasi Web Deploy Publishing (IIS Manager -> Site -> Deploy -> Configure Web Deploy Publishing …)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-05.png">https://coding4ever.files.wordpress.com/2016/12/261213-05.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-06.png">https://coding4ever.files.wordpress.com/2016/12/261213-06.png</a> %}</p>

<p><code>tukang_deploy</code> di atas adalah user windows/local <code>non-admin</code> yang sudah kita buat pada langkah sebelumnya.</p>

<p><strong>Langkah 5</strong>: Selesai</p>

<h3>Konfigurasi PC/Laptop Development</h3>

<p>Untuk konfigurasi pc/laptop development dilakukan dengan cara membuat <code>publish profile</code>.  Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Aktifkan project Visual Studio.net, sebagai contoh bisa didownload di <a href="https://github.com/k4m4r82/NorthwindWebApi">sini</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-07.png">https://coding4ever.files.wordpress.com/2016/12/261213-07.png</a> %}</p>

<p><strong>Langkah 2:</strong> Klik kanan project Web API -> Publish&hellip;, setelah itu akan tampil dialog publish web</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-08.png">https://coding4ever.files.wordpress.com/2016/12/261213-08.png</a> %}</p>

<p><strong>Langkah 3:</strong> Kemudian pada tab Profile pilih Custome</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-09.png">https://coding4ever.files.wordpress.com/2016/12/261213-09.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-101.png">https://coding4ever.files.wordpress.com/2016/12/261213-101.png</a> %}</p>

<p>Isikan nama profile</p>

<p><strong>Langkah 4:</strong> Pada tab Connection isikan konfigurasinya seperti berikut</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-112.png">https://coding4ever.files.wordpress.com/2016/12/261213-112.png</a> %}</p>

<p>Contoh konfigurasi di atas menggunakan ip <code>192.168.56.2</code> untuk server development, jadi nilainya tinggal disesuaikan. Untuk user dan password dikosongkan dulu aja, nanti kita set pada saat proses <code>build</code> dan <code>deploy</code> di job/project jenkins.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-122.png">https://coding4ever.files.wordpress.com/2016/12/261213-122.png</a> %}</p>

<p><strong>Langkah 5:</strong> Selanjutnya tinggal di Next aja</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-13.png">https://coding4ever.files.wordpress.com/2016/12/261213-13.png</a> %}</p>

<p><strong>Langkah 6:</strong> Terakhir klik tombol Close</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-14.png">https://coding4ever.files.wordpress.com/2016/12/261213-14.png</a> %}</p>

<p>Setelah proses ini selesai akan dibuatkan file <code>PublishProfiles</code> yang tersimpan di node <code>Properties</code> -> <code>PublishProfiles</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-221.png">https://coding4ever.files.wordpress.com/2016/12/261213-221.png</a> %}</p>

<p>File <code>PublishProfiles</code> ini nantinya akan kita gunakan pada saat proses <code>build</code> dan <code>deploy</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-23.png">https://coding4ever.files.wordpress.com/2016/12/261213-23.png</a> %}</p>

<h3>Konfigurasi Server CI (Continuous Integration)</h3>

<p>Dipostingan kali ini saya tidak lagi menjelaskan secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan <a href="{{%20site.url%20}}/blog/categories/jenkins/">sebelumnya</a>. Berikut langkah-langkahnya:</p>

<p><strong>Langkah 1:</strong> Buat job/project baru, misal dengan nama <code>northwind-web-api-deploy</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-15.png">https://coding4ever.files.wordpress.com/2016/12/261213-15.png</a> %}</p>

<p><strong>Langkah 2:</strong> Setting repository git</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-16.png">https://coding4ever.files.wordpress.com/2016/12/261213-16.png</a> %}</p>

<p><strong>Langkah 3:</strong> Setting restore nuget package</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-17.png">https://coding4ever.files.wordpress.com/2016/12/261213-17.png</a> %}</p>

<p><strong>Langkah 4:</strong> Setting MSBuild</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-181.png">https://coding4ever.files.wordpress.com/2016/12/261213-181.png</a> %}</p>

<p><strong>Langkah 5:</strong> Terakhir tes build dan deploy</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-19.png">https://coding4ever.files.wordpress.com/2016/12/261213-19.png</a> %}</p>

<p>Jika proses <code>build</code> dan <code>deploy</code> selesai, kita tinggal cek hasilnya di IIS Manager</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-201.png">https://coding4ever.files.wordpress.com/2016/12/261213-201.png</a> %}</p>

<p>Setelah itu kita juga bisa langsung mencoba web servicenya menggunakan web browser.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/12/261213-21.png">https://coding4ever.files.wordpress.com/2016/12/261213-21.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/NorthwindWebApi">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #3]]></title>
    <link href="http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3/"/>
    <updated>2016-11-07T09:44:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a> 109 106 %}Melanjutkan pembahasan tentang <a href="{{%20site.url%20}}/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a>. Kita sudah berhasil membuat project/job untuk melakukan proses <code>build</code> dan <code>deploy</code> secara otomatis dan terpusat di satu server. Hanya saja, ada sedikit yang kurang yaitu project/job ini harus kita jalankan/eksekusi secara manual setelah proses <code>push</code> source code ke server repository kita lakukan, dan tentunya akan sangat merepotkan jika harus bolak-balik mengeksekusi project/job setiap selesai melakukan proses <code>push</code>.</p>

<!-- more -->


<p>Nah untuk solusi masalah ini, kita akan menambahkan sedikit skrip agar proses eksekusi project/job ini bisa berjalan secara otomatis setelah selesai melakukan proses <code>push</code>. Skrip ini dikenal dengan nama <code>hook script</code>. Jadi source control seperti Git, mempunyai sekumpulan skrip (hook script ) dengan nama tertentu yang akan di eksekusi oleh git sebelum atau sesudah event-event tertentu, seperti: commit, push, receive dan event-event lainnya. <code>Hook script</code> ini disimpan di folder <code>hooks</code> masing-masing folder repository.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-01.png">https://coding4ever.files.wordpress.com/2016/11/261107-01.png</a> %}</p>

<p>Pada gambar di atas, saya menambahkan file <a href="https://git-scm.com/docs/githooks">hook script</a> dengan nama <code>post-receive</code>, file ini akan dieksekusi secara otomatis seteleh proses <code>push</code> selesai. Berikut contoh isi dari file <code>post-receive</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-021.png">https://coding4ever.files.wordpress.com/2016/11/261107-021.png</a> %}</p>

<p>Skrip <code>post-receive</code> di atas akan mengakses URL/alamat yang di gunakan untuk proses <code>build</code> dan <code>deploy</code> yaitu :</p>

<p>{% codeblock %}
JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME
{% endcodeblock %}</p>

<ul>
<li><code>JENKINS_URL</code> diisi dengan alamat dari server jenkins misal <code>http://localhost:8080</code></li>
<li><code>JOB_NAME</code> diisi dengan nama project/job jenkins misal  <code>northwind-build</code></li>
<li><code>TOKEN_NAME</code> diisi dengan sembarang nilai token, misal <code>cnwlhaUq6g5Uwzvg6ePI</code></li>
</ul>


<p>Selain itu untuk mengakses URL ini juga dibutuhkan informasi user dan APInya, misal menggunakan user <code>admin</code> dengan apinya <code>94a0428ca9d8d1d6c2e229fe1183f98</code>. Selain menggunakan user API kita juga bisa menggunakan langsung password dari user tapi tentunya cara yang kedua ini tidak disarankan.</p>

<h3>Mendapatkan Informasi User API</h3>

<p>Informasi user API bisa diakses melalui menu <code>Manage Jenkins</code> -> <code>Manage Users</code> -> <code>Configure</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-03.png">https://coding4ever.files.wordpress.com/2016/11/261107-03.png</a> %}</p>

<p>Kemudian klik tombol <code>Show API Token…</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-04.png">https://coding4ever.files.wordpress.com/2016/11/261107-04.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-05.png">https://coding4ever.files.wordpress.com/2016/11/261107-05.png</a> %}</p>

<h3>Mengaktifkan Project/Job Authentication Token</h3>

<p>Untuk bisa mengakses URL  <strong>JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME</strong> selain membutuhkan <code>User</code> dan <code>User API</code>, kita juga perlu mengaktifkan project/job Authentication Token melalui link <code>Project</code> -> <code>Configure</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-06.png">https://coding4ever.files.wordpress.com/2016/11/261107-06.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-07.png">https://coding4ever.files.wordpress.com/2016/11/261107-07.png</a> %}</p>

<p>Kemudian aktifkan pilihan <code>Trigger builds remotely</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-08.png">https://coding4ever.files.wordpress.com/2016/11/261107-08.png</a> %}</p>

<p>Untuk nilai <code>Authentication Token</code> diisi sesuai keinginan, kalo saya biasanya menggunakan tool <a href="{{%20site.url%20}}/blog/2014/05/21/manajemen-password-menggunakan-keepass/">KeePass</a> untuk mengenerate nilai tokennya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-091.png">https://coding4ever.files.wordpress.com/2016/11/261107-091.png</a> %}</p>

<h3>Testing Build Otomatis</h3>

<p>Setelah menyelesaikan konfigurasi di atas, saatnya melakukan pengetesan apakah konfigurasinya sudah benar atau belum. Berikut langkah-langkahnya :</p>

<ul>
<li>Aktifkan project <a href="https://github.com/k4m4r82/Northwind">Northwind</a></li>
<li><p>Tambahkan method abstract baru di interface <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Api/IProductRepository.cs">IProductRepository</a>, misal dengan nama <code>GetByCategoryName</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-10.png">https://coding4ever.files.wordpress.com/2016/11/261107-10.png</a> %}</p></li>
<li><p>Kemudian lengkapi implementasinya method abstractnya di class <a href="https://github.com/k4m4r82/Northwind/blob/master/src/Northwind.Repository.Service/ProductRepositoryDapper.cs">ProductRepositoryDapper</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-11.png">https://coding4ever.files.wordpress.com/2016/11/261107-11.png</a> %}</p></li>
<li><p>Terakhir lakukan <code>commit</code> dan <code>push</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-12.png">https://coding4ever.files.wordpress.com/2016/11/261107-12.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-13.png">https://coding4ever.files.wordpress.com/2016/11/261107-13.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-14.png">https://coding4ever.files.wordpress.com/2016/11/261107-14.png</a> %}</p></li>
<li><p>Dan secara otomatis proses <code>build</code> dan <code>deploy</code> di server CI akan dijalankan</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/11/261107-15.png">https://coding4ever.files.wordpress.com/2016/11/261107-15.png</a> %}</p></li>
</ul>


<h3>Kesimpulan</h3>

<p>Dengan memanfaatkan <code>hook script</code> proses <code>build</code> dan <code>deploy</code> bisa dibuat otomatis pada event- event-event tertentu, seperti: commit, push, receive dan event-event lainnya.</p>

<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/"/>
    <updated>2016-10-01T22:35:57+07:00</updated>
    <id>http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a> 109 106 %}Pada <a href="{{%20site.url%20}}/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/">postingan</a> sebelumnya kita sudah membuat project/job sederhana menggunakan <a href="https://jenkins.io/">Jenkins</a> untuk melakukan proses build, dan untuk postingan kali ini kita akan menambahkan proses deploy. Kalo masih bingung dengan istilah <code>deploy</code> di sini, anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai histori hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<!-- more -->


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-01.png">https://coding4ever.files.wordpress.com/2016/10/261001-01.png</a> %}</p>

<h3>Inno Setup</h3>

<p><a href="http://jrsoftware.org/">Inno Setup</a> adalah tool untuk membuat <a href="{{%20site.url%20}}/blog/categories/tools-installer/">paket installer</a> yang gratis dan open source. Selain itu kita juga bisa menggunakan <a href="{{%20site.url%20}}/blog/categories/tools-installer/">tool installer</a> lainnya seperti <a href="http://nsis.sourceforge.net/">NSIS</a>. Untuk informasi lebih lanjut tentang <a href="http://jrsoftware.org/">Inno Setup</a> dan <a href="http://nsis.sourceforge.net/">NSIS</a> bisa langsung ke <a href="{{%20site.url%20}}/blog/categories/inno-setup/">sini</a> dan <a href="{{%20site.url%20}}/blog/categories/nsis/">sini</a>.</p>

<p>Jadi di postingan kali ini kita akan menggunakan <a href="http://jrsoftware.org/">Inno Setup</a> untuk keperluan proses <code>deploy</code>. Sebagai contoh berikut adalah skrip <a href="http://jrsoftware.org/">Inno Setup</a> untuk project <a href="https://github.com/k4m4r82/Northwind">Northwind</a> yang kita gunakan sebagai contoh project.</p>

<p>{% codeblock %}</p>

<h1>define AppName &lsquo;Northwind App&rsquo;</h1>

<h1>define AppDir &lsquo;Northwind&rsquo;</h1>

<h1>define AppExeName &lsquo;Northwind.WinFormApp.exe&rsquo;</h1>

<h1>define AppVendorName &lsquo;KR Software&rsquo;</h1>

<h1>define AppCopyright &lsquo;Copyright © 2016. &rsquo; + AppVendorName</h1>

<h1>define AppURL &lsquo;{{ site.url }}/&rsquo;</h1>

<h1>define AppVersion GetFileVersion(&lsquo;bin\&rsquo; + AppExeName)</h1>

<h1>define AppMainIcon &lsquo;mainIcon.ico&rsquo;</h1>

<p>[Setup]
AppName={#AppName}
AppVerName={#AppName} Versi {#AppVersion}
AppPublisher={#AppVendorName}
AppVersion={#AppVersion}
AllowCancelDuringInstall = yes
DefaultDirName={pf}{#AppVendorName}{#AppDir}
DefaultGroupName={#AppVendorName}
Compression = lzma
SolidCompression = yes
OutputDir=new-release
OutputBaseFilename=Setup-v{#AppVersion}
AllowNoIcons = yes
AlwaysRestart = no
AlwaysShowComponentsList = no
DisableProgramGroupPage = yes
AppendDefaultDirName = yes
CreateUninstallRegKey = yes
DisableStartupPrompt = yes
LanguageDetectionMethod=none
ShowLanguageDialog=no
UsePreviousLanguage=no
Uninstallable = yes
UninstallFilesDir={app}\uninst
UninstallDisplayIcon={app}{#AppExeName},0
UninstallDisplayName={#AppName}
WindowVisible = no
AppCopyright={#AppCopyright}
FlatComponentsList = yes
PrivilegesRequired = admin
VersionInfoVersion={#AppVersion}</p>

<p>[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked</p>

<p>[Files]
;My Application Runtime
Source: bin*.exe; DestDir: {app}; Flags: ignoreversion
Source: bin*.dll; DestDir: {app}; Flags: ignoreversion</p>

<p>[Icons]
Name: {group}{#AppName}; Filename: {app}{#AppExeName}; WorkingDir: {app}; IconFilename: {app}{#AppMainIcon}
Name: {userdesktop}{#AppName}; Filename: {app}{#AppExeName}; WorkingDir: {app}; IconFilename: {app}{#AppMainIcon}; Tasks: desktopicon</p>

<p>[Code]
procedure AboutButtonOnClick(Sender: TObject);
begin
  MsgBox(&lsquo;{#AppName}&rsquo; #13#13 &lsquo;{#AppCopyright}&rsquo; #13 &lsquo;{#AppURL}&rsquo;, mbInformation, mb_Ok);
end;</p>

<p>procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton);
var
  AboutButton: TNewButton;
begin
  AboutButton := TNewButton.Create(ParentForm);
  AboutButton.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := &lsquo;&amp;About&hellip;&rsquo;;
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := ParentForm;<br/>
end;</p>

<p>procedure InitializeWizard();
begin
  CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);<br/>
end;
{% endcodeblock %}</p>

<p>Kemudian simpan skrip di atas di folder <code>workspace\deploy</code>. Workspace adalah folder di mana project atau job disimpan.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-02.png">https://coding4ever.files.wordpress.com/2016/10/261001-02.png</a> %}</p>

<h3>Menambahkan Proses Deploy</h3>

<ul>
<li>Akses link : <a href="http://localhost:8080/,">http://localhost:8080/,</a> kemudian login</li>
<li><p>Klik link project <code>northwind-build</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-03.png">https://coding4ever.files.wordpress.com/2016/10/261001-03.png</a> %}</p></li>
<li><p>Di halaman project <code>northwind-build</code>, klik link <code>Configure</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-04.png">https://coding4ever.files.wordpress.com/2016/10/261001-04.png</a> %}</p></li>
<li><p>Berikutnya aktifkan tab <code>Build</code>, klik <code>Add build step</code> kemudian pilih <code>Execute Windows batch command</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-051.png">https://coding4ever.files.wordpress.com/2016/10/261001-051.png</a> %}</p>

<p>Kemudian isikan skripnya seperti berikut</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-06.png">https://coding4ever.files.wordpress.com/2016/10/261001-06.png</a> %}</p>

<p>Tidak ada yang aneh dengan skrip di atas, hanya sekumpulan <a href="http://www.robvanderwoude.com/batchcommands.php">batch commands</a> yang tentunya Anda dan Saya sudah familiar dengannya. Coba perhatikan lagi skrip di atas, di sana ada variabel <code>%WORKSPACE%</code> yang merupakan variabel built-innya Jenkins, dan jika mengacu pada project <code>northwind-build</code>  di atas maka isinya adalah “C:\Program Files (x86)\Jenkins\workspace\northwind-build”.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-07.png">https://coding4ever.files.wordpress.com/2016/10/261001-07.png</a> %}</p></li>
</ul>


<h3>Menambahkan Artifact</h3>

<p>Artifact adalah output dari proses build, bisa berupa file exe, dll atau file dengan ekstensi lainnya. File-file artifact ini nantinya akan tersedia untuk di download di halaman project. Berikut langkah-langkah untuk menambahkan artifact :</p>

<ul>
<li><p>Masih di halaman <code>Configure</code>, aktifkan tab <code>Post-build Actions</code> klik <code>Add post-build action</code> kemudian pilih <code>Archive the artifacts</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-08.png">https://coding4ever.files.wordpress.com/2016/10/261001-08.png</a> %}</p></li>
<li><p>Isikan nama-nama file artifact yang perlu di arsipkan, misal kita hanya mengarsipkan file Setup.exe</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-09.png">https://coding4ever.files.wordpress.com/2016/10/261001-09.png</a> %}</p>

<p>Jika file artifactnya lebih dari satu pisahkan dengan tanda koma, contoh : <code>deploy\new-release\Setup*.exe</code>, <code>deploy\help\file_bantuan.chm</code>, <code>deploy\help\video_tutorial.avi</code>.</p></li>
<li><p>Terakhir klik Save</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-10.png">https://coding4ever.files.wordpress.com/2016/10/261001-10.png</a> %}</p></li>
</ul>


<h3>Testing Build dan Deploy</h3>

<p>Setelah menyelesaikan tambahan konfigurasi <code>deploy</code>, saatnya melakukan pengetesan apakah konfigurasinya sudah benar. Berikut langkah-langkahnya :</p>

<ul>
<li><p>Kembali ke halaman project <code>northwind-build</code>, kemudian klik link <code>Build Now</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-11.png">https://coding4ever.files.wordpress.com/2016/10/261001-11.png</a> %}</p></li>
<li><p>Di informasi <code>Build History</code> akan terlihat progress build dengan nama #1, #2, &hellip; dst</p>

<p> {% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-12.png">https://coding4ever.files.wordpress.com/2016/10/261001-12.png</a> %}</p></li>
<li><p>Jika proses build-nya sukses penanda bulat-nya berwarna biru, jika warna merah berarti gagal</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-13.png">https://coding4ever.files.wordpress.com/2016/10/261001-13.png</a> %}</p></li>
<li><p>Setelah build selesai, di halaman project <code>northwind-build</code> akan tersedia link download file artifact</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/10/261001-14.png">https://coding4ever.files.wordpress.com/2016/10/261001-14.png</a> %}</p></li>
</ul>


<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membangun Server CI (Continuous Integration) Di Windows Untuk Platform .NET Menggunakan Jenkins Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/"/>
    <updated>2016-09-29T14:46:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png">https://coding4ever.files.wordpress.com/2016/09/logo-ci1.png</a> 109 106 %}Melanjutkan pembahasan tentang <a href="{{%20site.url%20}}/blog/categories/continuous-integration/">Server CI (Continuous Integration)</a>, di mana persiapan awal sudah saya bahas di postingan saya yang berjudul &ldquo;Persiapan Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET&rdquo; bagian <a href="{{%20site.url%20}}/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">satu</a> dan <a href="{{%20site.url%20}}/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/">dua</a>.</p>

<p><a href="{{%20site.url%20}}/blog/categories/continuous-integration/">Continuous Integration</a>, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.</p>

<!-- more -->


<p>Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses <code>build</code> untuk memastikan tidak ada kode yang merusak/membuat proses <code>build</code> gagal. Jadi semakin cepat kegagalan <code>build</code> ini diketahui semakin cepat pula kita meresponnya.  Dan jika proses <code>build</code>-nya berhasil akan dilanjutkan dengan proses <code>deploy</code>. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan <a href="{{%20site.url%20}}/blog/2016/07/20/unit-testing-menggunakan-nunit/">unit testing</a>, <a href="{{%20site.url%20}}/blog/2016/07/28/integration-testing-menggunakan-nunit/">integration testing</a> dan <a href="{{%20site.url%20}}/blog/categories/software-testing/">testing otomatis</a> lainnya.</p>

<p>Sebagai .NET developer kita sudah biasa melakukan proses <code>build</code> dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh <code>deploy</code> anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil <code>build</code> dan <code>deploy</code> dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.</p>

<p>Proses <code>build</code> ini selain bisa dibuat otomatis setiap kita mem-<code>push</code> source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak <code>build</code> pas jam makan siang enggak boleh makan siang sampai proses <code>build</code>-nya berhasil atau yang merusak <code>build</code> pas jam pulang kantor enggak boleh pulang sampai proses <code>build</code>-nya  berhasil :-D</p>

<p>Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :</p>

<ul>
<li>Menulis kode, build dan tes di komputer masing-masing (seperti biasa).</li>
<li>Commit dan push kode ke server repository/source control seperti GIT atau SVN.
Di masing-masing repository kita pasang <code>hook script</code> untuk memanggil job/project yang sudah kita buat dan konfigurasi di server CI.</li>
<li>Server CI akan meng-clone repository kemudian melakukan build, menjalankan <a href="{{%20site.url%20}}/blog/categories/software-testing/">tes otomatis</a> (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama</li>
</ul>


<p>Cukup ya intronya, berikutnya akan kita bahas tool/software yang bisa kita gunakan untuk mengimplementasikan CI, salah satunya adalah <a href="https://jenkins.io">Jenkins</a>.</p>

<p><a href="https://jenkins.io">Jenkins</a> adalah salah satu software continuous integration (CI) open source yang dibuat menggunakan Java. Untuk sejarah <a href="https://jenkins.io">Jenkins</a> silahkan digoogle sendiri ya :-)</p>

<p>Selain <a href="https://jenkins.io">Jenkins</a>, ada tool-tool lain yang harus kita siapkan agar implementasi CI menggunakan <a href="https://jenkins.io">Jenkins</a> ini bisa berhasil. Berikut daftar lengkapnya :</p>

<ul>
<li><a href="https://jenkins.io">Jenkins</a></li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">MSBuild</a> – untuk keperluan proses build</li>
<li><a href="https://dist.nuget.org/index.html">NuGet</a> – untuk merestore package nuget sebelum proses build dijalankan</li>
<li>Source Control menggunakan <a href="https://git-scm.com/downloads">Git</a>, Anda bisa juga menggunakan <a href="https://subversion.apache.org/download.cgi">SVN</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a> – aplikasi git client</li>
<li><a href="https://bonobogitserver.com/">Bonobo Git Server</a> (server Git gratis berbasis Windows/IIS)</li>
<li><a href="http://www.jrsoftware.org/">Inno Setup</a> atau <a href="http://nsis.sourceforge.net/">NSIS</a> – untuk keperluan proses deploy/pembuatan paket installer</li>
</ul>


<p>Tool-tool di atas selain perlu disiapkan juga harus tau cara penggunaannya, klo belum ya silahkan mampir dulu ke <a href="{{%20site.url%20}}/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">sini</a> dan <a href="{{%20site.url%20}}/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/">sini</a>.</p>

<p>Sebelum kita lanjut ke pembahasan, kita lihat tool/software untuk <code>Environment Test</code> yang saya gunakan baik di sisi server (Server CI) dan client (developer).</p>

<h3>Environment Test Server</h3>

<ul>
<li>Windows Server 2008 R2</li>
<li>Automation server <a href="https://jenkins.io/">Jenkins</a></li>
<li>.NET Framework 4.0, 4.5.x</li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159">Microsoft Build 2015</a></li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://bonobogitserver.com/">Server Repository Git</a></li>
<li>Package Installer <a href="{{%20site.url%20}}/blog/categories/inno-setup/">Inno Setup</a></li>
<li><a href="https://dist.nuget.org/index.html">NuGet</a></li>
</ul>


<h3>Environment Test Client</h3>

<ul>
<li>Visual Studio .NET 2013 Community Edition</li>
<li>Source/version control <a href="https://git-scm.com/">Git</a></li>
<li><a href="https://tortoisegit.org/">TortoiseGit</a></li>
</ul>


<h3>Fokus Pembahasan</h3>

<p>Untuk postingan pertama ini, kita akan membahas:</p>

<ul>
<li>Konfigurasi <a href="https://jenkins.io">Jenkins</a></li>
<li>Plugin tambahan yang perlu diinstall</li>
<li>Pembuatan Project (Job)</li>
<li>Tes clone repository, restore library nuget dan  build dalam satu langkah/klik</li>
</ul>


<h3>Instalasi Jenkins</h3>

<p>Download dan install Jenkins di <a href="https://jenkins-ci.org/">sini</a>, setelah instalasi <a href="https://jenkins-ci.org/">Jenkins</a> bisa diakses di link <a href="http://localhost:8080">http://localhost:8080</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-01.png">https://coding4ever.files.wordpress.com/2016/09/260929-01.png</a> %}</p>

<h3>Konfigurasi Jenkins</h3>

<p><a href="https://jenkins.io">Jenkins</a> mempunyai banyak plugin yang mudah dikonfigurasi seperti plugin Git, MSBuild dan lainnya. Berikut adalah daftar plugin yang akan kita install.</p>

<ul>
<li>Git plugin</li>
<li>MSBuild plugin</li>
<li>NUnit plugin</li>
<li>Cobertura plugin</li>
<li>PowerShell plugin</li>
</ul>


<p>Sebagai contoh kita akan menginstall plugin Git dan MSBuild, berikut langkah-langkahnya :</p>

<h5>Menginstall plugin Git</h5>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link Manage Jenkins, pilih Manage Plugins</li>
<li>Aktifkan tab <code>Available</code>, ketik <code>Git plugin</code> di filter box, dari daftar pilihan plugin yang tersedia pilih <code>Git plugin</code></li>
<li>Klik tombol <code>Install without restart</code></li>
</ul>


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-02.png">https://coding4ever.files.wordpress.com/2016/09/260929-02.png</a> %}</p>

<h5>Menginstall plugin MSBuild</h5>

<p>Masih sama dengan langkah-langkah sebelumnya, hanya saja kali ini plugin yang perlu difilter adalah <code>MSBuild</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-03.png">https://coding4ever.files.wordpress.com/2016/09/260929-03.png</a> %}</p>

<p>Ulangi langkah-langkah di atas untuk menginstall plugin lainnya seperti NUnit, Cobertura dan PowerShell.</p>

<h5>Konfigurasi Git dan MSBuild</h5>

<p>Setelah instalasi plugin Git dan MSBuild, kita perlu menambahkan konfigurasinya di halaman <code>Global Tool Configuration</code>, berikut langkah-langkahnya :</p>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link Manage Jenkins, pilih Global Tool Configuration</li>
<li><p>Scroll ke bawah sampai menemukan tulisan <code>Git/Git installations</code>, untuk isian <code>Path to Git executable</code> isikan lokasi instalasi git secara absolute</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-04.png">https://coding4ever.files.wordpress.com/2016/09/260929-04.png</a> %}</p>

<p>Untuk lokasi Git disesuaikan dengan lokasi instalasi Git di mesin Anda.</p></li>
<li>Kemudian scroll kebawah lagi sampai menemukan tulisan <code>MSBuild</code>, kemudian klik tombol <code>Add MSBuild</code></li>
<li><p>Isikan konfigurasinya seperti gambar berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-05.png">https://coding4ever.files.wordpress.com/2016/09/260929-05.png</a> %}</p>

<p>Untuk lokasi MSBuild juga disesuaikan dengan lokasi instalasi MSBuild di mesin Anda. Terakhir klik tombol Save.</p></li>
</ul>


<h3>Pembuatan Project (Job)</h3>

<p>Berikutnya kita akan membuat project sederhana untuk mencoba proses build, berikut langkah-langkahnya:</p>

<ul>
<li>Akses link : <a href="http://localhost:8080/">http://localhost:8080/</a></li>
<li>Klik link New Item</li>
<li>Isikan nama project, misal northwind-build</li>
<li>Pilih Freestyle project</li>
<li><p>Pilih Ok</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-06.png">https://coding4ever.files.wordpress.com/2016/09/260929-06.png</a> %}</p></li>
<li><p>Aktifkan tab <code>Source Code Management</code>, kemudian pilih <code>Git</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-07.png">https://coding4ever.files.wordpress.com/2016/09/260929-07.png</a> %}</p></li>
<li><p>Kemudian lengkapi isian <code>Repository URL</code> dan <code>Credentials</code> seperti contoh berikut:</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-08.png">https://coding4ever.files.wordpress.com/2016/09/260929-08.png</a> %}</p>

<p>Untuk contoh di atas dengan asumsi instalasi <a href="https://jenkins.io">Jenkins</a> dan <a href="{{%20site.url%20}}/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/">server repository Git</a> di mesin yang sama.</p>

<p><a href="https://jenkins.io">Jenkins</a> selalu bekerja dengan <code>branch</code> dan secara default menggunakan branch <code>master</code>.</p></li>
<li><p>Berikutnya aktifkan tab <code>Build</code>, klik <code>Add build step</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-09.png">https://coding4ever.files.wordpress.com/2016/09/260929-09.png</a> %}</p></li>
<li><p>Pilih <code>Build a Visual Studio project or solution using MSBuild</code></p>

<p>Disini kita perlu mengisikan beberapa nilai:</p>

<ul>
<li>MSBuild Version diisi dengan <code>MSBuild</code> (yang sudah kita konfigurasi pada langkah sebelumnya)</li>
<li>MSBuild Build File diisi dengan nama solution atau project</li>
<li>Command Line Arguments (optional) diisi dengan parameter MSBuild
{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-10.png">https://coding4ever.files.wordpress.com/2016/09/260929-10.png</a> %}</li>
</ul>
</li>
<li><p>Karena project kita menggunakan library NuGet, kita juga perlu menambahkan konfigurasi untuk me-restore library NuGet. Masih di tab Build, klik <code>Add build step</code> kemudian pilih <code>Execute Windows batch command</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-11.png">https://coding4ever.files.wordpress.com/2016/09/260929-11.png</a> %}</p>

<p>Untuk isian <code>Command</code> isikan perintah/skrip seperti berikut:</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-12.png">https://coding4ever.files.wordpress.com/2016/09/260929-12.png</a> %}</p>

<p>Perintah/skrip di atas dengan asumsi Anda sudah mendownload tool <a href="https://dist.nuget.org/index.html">NuGet</a> dan menyimpannya di folder <code>D:\Development Tools</code>.</p>

<p>Seperti yang sudah pernah saya bahas di postingan <a href="xx">Persiapan Membangun Server CI Bagian #2</a>, proses <code>build</code> dilakukan setelah me-restore library nuget. Jadi kita harus merubah urutan prioritas agar konfigurasi &ldquo;Execute Windows batch command&rdquo; dijalankan terlebih dulu sebelum konfigurasi &ldquo;Build a Visual Studio project or solution using MSBuild&rdquo; dengan cara men-drag-nya ke atas.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-13.png">https://coding4ever.files.wordpress.com/2016/09/260929-13.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-14.png">https://coding4ever.files.wordpress.com/2016/09/260929-14.png</a> %}</p>

<p>Pada gambar di atas terlihat konfigurasi &ldquo;Execute Windows batch command&rdquo; dan &ldquo;Build a Visual Studio project or solution using MSBuild&rdquo; sudah berganti posisi. Terakhir klik tombol Save</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-15.png">https://coding4ever.files.wordpress.com/2016/09/260929-15.png</a> %}</p></li>
</ul>


<h3>Testing Build</h3>

<p>Setelah menyelesaikan beberapa konfigurasi, saatnya melakukan pengetesan apakah konfigurasi sebelumnya sudah benar. Berikut langkah-langkahnya :</p>

<ul>
<li><p>Klik link project <code>northwind-build</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-16.png">https://coding4ever.files.wordpress.com/2016/09/260929-16.png</a> %}</p></li>
<li><p>Di halaman project <code>northwind-build</code>, klik link <code>Build Now</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-17.png">https://coding4ever.files.wordpress.com/2016/09/260929-17.png</a> %}</p></li>
<li><p>Di informasi <code>Build History</code> akan terlihat progress build dengan nama <code>#1</code>, <code>#2</code>,&hellip; dst</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-18.png">https://coding4ever.files.wordpress.com/2016/09/260929-18.png</a> %}</p></li>
<li><p>Jika proses build-nya sukses penanda <code>bulat</code>-nya berwarna biru, jika warna merah berarti gagal</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-19.png">https://coding4ever.files.wordpress.com/2016/09/260929-19.png</a> %}</p></li>
<li><p>Untuk melihat detil <code>build</code>, klik link build number, misal <code>#1</code>, <code>#2</code>,&hellip; dst</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-20.png">https://coding4ever.files.wordpress.com/2016/09/260929-20.png</a> %}</p></li>
<li><p>Kemudian klik link <code>Console Output</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-211.png">https://coding4ever.files.wordpress.com/2016/09/260929-211.png</a> %}</p>

<p>Catatan penting dari <code>output</code> di atas adalah lokasi dari <code>workspace</code> di mana source code/hasil clone dari repository dan proses build dilakukan. Informasi ini tentu akan sangat membantu kita dalam melakukan <code>debuging</code> konfigurasi/setup CI.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/09/260929-22.png">https://coding4ever.files.wordpress.com/2016/09/260929-22.png</a> %}</p></li>
</ul>


<p>Kesimpulan dari proses build di atas dan tentunya berdasarkan konfigurasi yang kita lakukan, jenkins melakukan hal-hal berikut :</p>

<ol>
<li>Meng-clone repository git</li>
<li>Me-restore library nuget</li>
<li>Melakukan proses build</li>
</ol>


<p>Selamat Mencoba :-)</p>
]]></content>
  </entry>
  
</feed>
