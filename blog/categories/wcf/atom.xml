<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wcf | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/wcf/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2015-05-10T20:26:39+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial WCF Service Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2015/05/09/tutorial-wcf-service-bagian-number-2/"/>
    <updated>2015-05-09T09:34:34+07:00</updated>
    <id>http://coding4ever.net/blog/2015/05/09/tutorial-wcf-service-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-16.png">https://coding4ever.files.wordpress.com/2015/05/020515-16.png</a>&#8221; width=&#8221;100&#8221; height=&#8221;100&#8221;>Melanjutkan pembahasan <a href="/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/">postingan</a> sebelumnya yaitu tentang pembuatan web service menggunakan teknologi <a href="/blog/categories/wcf/">WCF</a>.</p>

<p>Kita sudah menyelesaikan project pertama yaitu pembuatan project <a href="/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/">CalculatorLib</a> dan kita lanjutkan dengan pembuatan project CalculatorServer.</p>

<!-- more -->


<p>Sebagai review CalculatorServer adalah project yang akan mengimplementasikan semua method abstract yang ada pada interface ICalculator (project <a href="https://github.com/k4m4r82/Calculator">CalculatorLib</a> selain itu project CalculatorServer juga akan kita <code>hostkan</code> sehingga bisa menjadi web service. Apa yang dimaksud dengan <code>host</code> disini, silahkan baca postingan <a href="/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/">Tutorial WCF Service Bagian #1</a>.</p>

<p>Aktifkan kembali solution <a href="https://github.com/k4m4r82/Calculator">Calculator</a> yang di dalamnya sudah ada project CalculatorLib.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-02.png">https://coding4ever.files.wordpress.com/2015/05/020515-02.png</a>&#8221;></p>

<p>Kita akan menambahkan project CalculatorServer masih di solution yang sama</p>

<h3>Menambahkan Project CalculatorServer</h3>

<ol>
<li><p>Klik kanan Solution Calculator -> Add -> New Project</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-01.png">https://coding4ever.files.wordpress.com/2015/05/090515-01.png</a>&#8221;></p></li>
<li><p>Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pilih Templates Class Library</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-02.png">https://coding4ever.files.wordpress.com/2015/05/090515-02.png</a>&#8221;></p>

<p>Pada isian Name isikan CalculatorServer untuk isian Location dibiarkan saja setelah itu klik Ok. Jika langkah sebelumnya berhasil maka pada solution Calculator akan ketambahan 1 project baru yaitu CalculatorServer.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-03.png">https://coding4ever.files.wordpress.com/2015/05/090515-03.png</a>&#8221;></p>

<p>Kemudian hapus class <code>Class1</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-04.png">https://coding4ever.files.wordpress.com/2015/05/090515-04.png</a>&#8221;></p></li>
</ol>


<h3>Menambahkan Class Calculator</h3>

<p>Class Calculator adalah class yang akan mengimplementasikan semua method abstract dari interface ICalculator yang sudah kita buat pada project sebelumnya (<a href="/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/">CalculatorLib</a>).</p>

<ol>
<li><p>Klik kanan project CalculatorServer -> Add -> Class…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-05.png">https://coding4ever.files.wordpress.com/2015/05/090515-05.png</a>&#8221;></p>

<p>Pada isian Name diisi <code>Calculator</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-06.png">https://coding4ever.files.wordpress.com/2015/05/090515-06.png</a>&#8221;></p>

<p>Setelah itu akan tampil editor code class Calculator</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-07.png">https://coding4ever.files.wordpress.com/2015/05/090515-07.png</a>&#8221;></p>

<p>Jangan lupa untuk menambahkan access modifier <code>public</code>.</p>

<p>Sebelum kita melengkapi kode class Calculator di atas, terlebih dulu kita harus menambahkan referensi <a href="https://github.com/k4m4r82/Calculator">CalculatorLib</a> yang sudah kita buat pada project sebelumnya, tujuannya adalah agar class Calculator bisa mengakses interface ICalculator dan mengimplementasikan semua method abstractnya.</p></li>
<li><p>Klik kanan node References -> Add Reference…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-08.png">https://coding4ever.files.wordpress.com/2015/05/090515-08.png</a>&#8221;></p></li>
<li><p>Aktifkan panel Solution kemudian pilih project CalculatorLib</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-09.png">https://coding4ever.files.wordpress.com/2015/05/090515-09.png</a>&#8221;></p>

<p>Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama CalculatorLib pada node References</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-10.png">https://coding4ever.files.wordpress.com/2015/05/090515-10.png</a>&#8221;></p>

<p>Selanjutnya kita lengkapi kode class Calculator di atas, seperti di bawah ini.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-11.png">https://coding4ever.files.wordpress.com/2015/05/090515-11.png</a>&#8221;></p>

<p>Sampai disini kita sudah bisa mencoba untuk meng-compile project CalculatorServer dengan cara klik kanan project <code>CalculatorServer</code> -> <code>Build</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-12.png">https://coding4ever.files.wordpress.com/2015/05/090515-12.png</a>&#8221;></p>

<p>Apa yang terjadi ??? Masih error bukan ?</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-13.png">https://coding4ever.files.wordpress.com/2015/05/090515-13.png</a>&#8221;></p>

<p>Error ini terjadi karena class Calculator mengimplementasikan interface ICalculator sedangkan method-method abstractnya (Penambahan, Pengurangan, Perkalian dan Pembagian) belum kita definisikan ulang / override di class Calculator.</p></li>
</ol>


<h3>Mengimplementasikan Method Abastract Interface ICalculator secara Otomatis</h3>

<p>Untuk mengatasi error pada langkah sebelumnya kita tinggal klik kanan pada tulisan interface ICalculator ->Implement Interface -> Implement Interface</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-14.png">https://coding4ever.files.wordpress.com/2015/05/090515-14.png</a>&#8221;></p>

<p>Kemudian secara otomatis semua implementasi method abstract dari interface ICalculator akan ditambahkan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-15.png">https://coding4ever.files.wordpress.com/2015/05/090515-15.png</a>&#8221;></p>

<p>Setelah itu kita tinggal melengkapi kode untuk masing-masing method diatas.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-16.png">https://coding4ever.files.wordpress.com/2015/05/090515-16.png</a>&#8221;></p>

<p>Sekarang kita coba lagi untuk meng-compile ulang project CalculatorServer dengan cara klik kanan project <code>CalculatorServer</code> -> <code>Build</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-12.png">https://coding4ever.files.wordpress.com/2015/05/090515-12.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-17.png">https://coding4ever.files.wordpress.com/2015/05/090515-17.png</a>&#8221;></p>

<h3>WCF Service Behavior</h3>

<p>WCF service behavior digunakan untuk mengatur behavior atau prilaku WCF service ketika menangani request atau permintaan dari klien.</p>

<p>Jika kita mempunyai behavior atau tingkah laku yang baik, otomatis kita juga bisa menjadi orang yang lebih baik, benar atau tidak ? :-D</p>

<p>Begitu juga dengan WCF Service Behavior, dengan attribut ini kita bisa mengatur hal-hal yang berhubungan dengan :</p>

<ul>
<li>Concurrency</li>
<li>Throttling</li>
<li>Transaction</li>
<li>Instance Context/Session Management</li>
<li>Thread Behavior</li>
</ul>


<p>Untuk informasi yang lebih lengkap tentang WCF Service Behavior, silahkan baca artikel <a href="http://www.codeproject.com/Articles/443576/Implementing-WCF-Service-Behaviors">Implementing WCF Service Behaviors</a> dan <a href="http://www.codeproject.com/Articles/89858/WCF-Concurrency-Single-Multiple-and-Reentrant-and">WCF Concurrency (Single, Multiple, and Reentrant) and Throttling</a>.</p>

<p>Sebagi contoh kita akan mengeset behavior untuk <code>Concurrency</code> dan <code>Instance Context</code> dengan model Concurrency = Single dan Instance Context = Per Call via attribute WCF service behavior.</p>

<p>Untuk menggunakan attribute WCF service behavior, tambahkan terlebih dulu referensi <code>System.ServiceModel</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-18.png">https://coding4ever.files.wordpress.com/2015/05/090515-18.png</a>&#8221;></p>

<p>Kemudian tambahkan juga di bagian <code>using</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-19.png">https://coding4ever.files.wordpress.com/2015/05/090515-19.png</a>&#8221;></p>

<p>Setelah itu revisi class Calculator menjadi seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/090515-20.png">https://coding4ever.files.wordpress.com/2015/05/090515-20.png</a>&#8221;></p>

<p>Yuph sampai disini saja untuk postingan kali ini, insyaAlloh akan kita lanjutkan pada kesempatan berikutnya.</p>

<p>Selamat <a href="https://github.com/k4m4r82/Calculator">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial WCF Service Bagian #1]]></title>
    <link href="http://coding4ever.net/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/"/>
    <updated>2015-05-02T10:15:26+07:00</updated>
    <id>http://coding4ever.net/blog/2015/05/02/tutorial-wcf-service-bagian-number-1</id>
    <content type="html"><![CDATA[<h3>Apa itu WCF</h3>

<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-16.png">https://coding4ever.files.wordpress.com/2015/05/020515-16.png</a>&#8221; width=&#8221;100&#8221; height=&#8221;100&#8221;>WCF singkatan dari Windows Communication Foundation, merupakan salah satu teknologi Microsoft untuk membangun aplikasi berbasis layanan (service-oriented applications). Dengan kata lain WCF itu merupakan salah satu alternatif untuk membangun <a href="http://www.techopedia.com/definition/1622/web-service-net">web service</a> dan <a href="http://en.wikipedia.org/wiki/Distributed_computing">sistem terdistribusi</a> lainnya menggunakan teknologi Microsoft .NET.</p>

<blockquote><p>Dalam tutorial ini kita akan lebih banyak membahas hal-hal teknis untuk membuat web service menggunakan WCF. Untuk referensi lebih lanjut mengenai WCF bisa langsung Anda cari menggunakan layanan search engine favorit Anda :-)</p></blockquote>

<!-- more -->


<p>WCF merupakan gabungan dari beberapa teknologi <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a> lainnya seperti Web Service, <a href="/blog/categories/dot-net-remoting/">.NET Remoting</a>, MSMQ dan COM+</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-01.png">https://coding4ever.files.wordpress.com/2015/05/020515-01.png</a>&#8221;></p>

<p style="text-align:center">Sumber - <a href="http://wcftutorial.net/Introduction-to-WCF.aspx" target="_blank">WCF Tutorial</a></p>


<p>Sebagai langkah awal kita akan membuat aplikasi sederhana yang akan menerapkan teknologi WCF. Aplikasi yang akan kita buat yaitu Calculator, walaupun sederhana tetapi aplikasi ini membutuhkan 3 project untuk membuatnya.</p>

<ol>
<li><p><code>CalculatorLib</code> – Project CalculatorLib dibuat dengan memanfaatkan project bertipe Class Library yang isinya hanya berupa interface ICalculator dengan 4 buah method abstract yaitu : <code>Penambahan</code>, <code>Pengurangan</code>, <code>Perkalian</code> dan <code>Pembagian</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-02.png">https://coding4ever.files.wordpress.com/2015/05/020515-02.png</a>&#8221;></p>

<p>Project ini nantinya akan dicompile menjadi file dengan ekstensi .dll (CalculatorLib.dll), file CalculatorLib.dll ini akan dishare atau ditambahkan sebagai referensi untuk aplikasi CalculatorServer dan CalculatorClient.</p>

<p>Teknik ini dikenal dengan istilah <code>Shared Assembly</code> tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.</p></li>
<li><p><code>CalculatorServer</code> – Project CalculatorServer dibuat dengan memanfaatkan project bertipe Class Library. Project ini akan dicompile menjadi file dengan ekstensi .dll (CalculatorServer.dll).</p>

<p>Project ini nantinya akan mengimplementasikan semua method-method abstract dari project CalculatorLib.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-03.png">https://coding4ever.files.wordpress.com/2015/05/020515-03.png</a>&#8221;></p>

<p>Agar class ini (CalculatorServer.dll) bisa dikenali sebagai WCF service, kita perlu meng-host-kannya terlebih dulu dengan beberapa cara yaitu :</p>

<ul>
<li>Hosting in Internet Information Services(IIS)</li>
<li>Hosting in Windows Activation Services(WAS)</li>
<li>Hosting in a Console or Desktop application(Self hosting)</li>
<li>Hosting in a Windows Service <br/>
<br></li>
</ul>
</li>
<li><p><code>CalculatorClient</code> – Project CalculatorClient dibuat dengan memanfaatkan project bertipe Windows Application, aplikasi ini hanya memanggil method-method abstract dari project CalculatorLib dengan memanfaatkan objek proxy sehingga method tersebut akan dieksekusi secara remote (dijalankan di sisi server).</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-04.png">https://coding4ever.files.wordpress.com/2015/05/020515-04.png</a>&#8221;></p>

<p><p style="text-align:center">Sumber - <a href="http://www.topwcftutorials.net/2014/06/3-ways-generate-proxy-wcf-service.html" target="_blank">Top WCF Tutorial</a></p></p>

<p>Berikut gambaran lengkap project yang akan kita buat</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-05.png">https://coding4ever.files.wordpress.com/2015/05/020515-05.png</a>&#8221;></p></li>
</ol>


<p>Oke kita sudahi dulu obrolannya dan kita langsung saja mulai dengan pembuatan project CalculatorLib, jangan lupa untuk mengaktifkan terlebih dulu Visual Studio .NET Anda.</p>

<h3>Membuat Project CalculatorLib</h3>

<ol>
<li><p>Klik menu File ->New -> Project …</p></li>
<li><p>Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-06.png">https://coding4ever.files.wordpress.com/2015/05/020515-06.png</a>&#8221;></p>

<p>Pada isian Name isikan CalculatorLib, setelah itu klik tombol Ok.</p>

<p>Secara default pada saat pembuatan project sudah otomatis disediakan 1 buah class kosong dengan nama Class1, karena kita akan menambahkan class baru jadi class ini dihapus saja.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-07.png">https://coding4ever.files.wordpress.com/2015/05/020515-07.png</a>&#8221;></p></li>
</ol>


<h3>Menambahkan Interface ICalculator</h3>

<ol>
<li><p>Klik kanan project CalculatorLib -> Add -> New Item…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-08.png">https://coding4ever.files.wordpress.com/2015/05/020515-08.png</a>&#8221;></p></li>
<li><p>Pada dialog add new item, pilih Interface dan untuk isian Name diisi ICalculator</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-09.png">https://coding4ever.files.wordpress.com/2015/05/020515-09.png</a>&#8221;></p>

<p>Setelah itu akan tampil editor code interface ICalculator</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-10.png">https://coding4ever.files.wordpress.com/2015/05/020515-10.png</a>&#8221;></p>

<p>Jangan lupa untuk menambahkan access modifier <code>public</code>.</p>

<p>Selanjutnya kita tinggal menambahkan 4 method abstractnya yaitu <code>Penambahan</code>, <code>Pengurangan</code>, <code>Perkalian</code> dan <code>Pembagian</code>.</p>

<p>Berikut kode lengkapnya :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-11.png">https://coding4ever.files.wordpress.com/2015/05/020515-11.png</a>&#8221;></p>

<p>Jika kita perhatikan kode di atas, ada tambahan attribute <code>ServiceContract</code> dan <code>OperationContract</code> pada nama interface dan method abstractnya.</p>

<p><code>ServiceContract</code> memberikan informasi service/layanan apa saja yang tersedia untuk bisa diakses sedangkan <code>OperationContract</code>  digunakan untuk memberikan tanda bahwa method tersebut merupakan operasi atau bagian dari <code>ServiceContract</code>.</p>

<p>Bagaimana jika kita lupa menambahkan attribut <code>ServiceContract</code> dan <code>OperationContract</code> ? Ya otomatis interface ICalculator berikut method tidak bisa diakses oleh client.</p>

<p>Untuk menambahkan attribut <code>ServiceContract</code> dan <code>OperationContract</code> kita perlu menambahkan referensi <code>System.ServiceModel</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-12.png">https://coding4ever.files.wordpress.com/2015/05/020515-12.png</a>&#8221;></p>

<p>Kemudian mendaftarkannya di bagian using</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-13.png">https://coding4ever.files.wordpress.com/2015/05/020515-13.png</a>&#8221;></p></li>
</ol>


<h3>Mengcompile project CalculatorLib</h3>

<p>Tujuannya adalah agar project CalculatorLib ini bisa digunakan sebagai referensi oleh aplikasi CalculatorServer dan CalculatorClient</p>

<ol>
<li><p>Klik kanan project CalculatorLib -> Build</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-14.png">https://coding4ever.files.wordpress.com/2015/05/020515-14.png</a>&#8221;></p>

<p>Setelah itu akan tampil hasil output dari proses Build</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/05/020515-15.png">https://coding4ever.files.wordpress.com/2015/05/020515-15.png</a>&#8221;></p></li>
</ol>


<p>Yuph cukup sampai disini, insya Alloh akan kita lanjutkan pada kesempatan berikutnya.</p>

<p>Selamat <a href="https://github.com/k4m4r82/Calculator">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
