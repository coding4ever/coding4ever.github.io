<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visual C# | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/visual-c-number/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2019-08-31T09:41:02+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Membuat Service SMS Gateway Untuk Engine Gammu]]></title>
    <link href="http://coding4ever.net/blog/2017/08/22/membuat-service-sms-gateway-untuk-engine-gammu/"/>
    <updated>2017-08-22T15:59:07+07:00</updated>
    <id>http://coding4ever.net/blog/2017/08/22/membuat-service-sms-gateway-untuk-engine-gammu</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2017/08/gammu.png">https://coding4ever.files.wordpress.com/2017/08/gammu.png</a>&#8221; width=&#8221;100&#8221; height=&#8221;100&#8221;>Pasti udah pada tau kan apa itu <a href="https://wammu.eu/gammu/">Gammu</a> ? Klo enggak ya keterlaluan he he. Itu loh engine yang biasa digunakan untuk mengirim dan menerima sms dan biasanya sering digunakan untuk membuat sms gateway.</p>

<p>Di postingan ini saya tidak akan membahas bagaimana cara instalasi <a href="https://wammu.eu/gammu/">Gammu</a>, konfigurasi dan database yang digunakan. Jadi saya mengasumsikan bahwa service Gammu Anda (GammuSMSD) sudah berjalan dengan baik, dengan kata lain jika ada sms masuk ke nomor yang Anda gunakan sebagai sms center, maka service <a href="https://wammu.eu/gammu/">Gammu</a> otomatis akan meng-INSERT-kan sms tersebut ke tabel inbox.</p>

<!-- more -->


<h3>Struktur Tabel Gammu</h3>

<p>Sebelum kita lanjut bagaimana membuat windows service untuk engine <a href="https://wammu.eu/gammu/">Gammu</a> ada baiknya kita melihat dulu struktur tabel <a href="https://wammu.eu/gammu/">Gammu</a> secara menyeluruh.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-01.png">https://coding4ever.files.wordpress.com/2017/08/20170822-01.png</a>&#8221;></p>

<p>Dari keenam tabel di atas, kita cukup fokus di 3 tabel utama yaitu <code>inbox</code>, <code>outbox</code> dan <code>outbox_multipart</code>. Tabel inbox otomatis terisi, jika ada sama masuk tentunya dengan syarat service Gammu Anda (GammuSMSD) sudah berjalan dengan baik. Di tabel inbox ini juga sudah ada field dengan nama Processed yang bisa kita gunakan sebagai flag/penanda sms yang sudah diproses.</p>

<p>Nah jika ada sms yang mau dikirim, tinggal kita INSERT-kan datanya secara manual ke tabel outbox. Dan jika smsnya panjang (lebih dari 160 karakter), smsnya harus kita pecah menjadi 2, 3, dst sesuai dengan jumlah karakter yang mau dikirim. Setelah dipecah, sms pertama masuk ke tabel outbox, dan sisanya masuk ke tabel outbox_multipart.</p>

<p>Untuk informasi lebih lanjut tentang struktur database <a href="https://wammu.eu/gammu/">Gammu</a> bisa Anda cek di <a href="https://wammu.eu/docs/manual/smsd/tables.html">sini</a>.</p>

<h3>Konfigurasi Gammu</h3>

<p>Untuk konfigurasi gammu ada dua file yang harus kita edit nilainya yaitu file <code>smsdrc</code> dan <code>gammurc</code>. File ini biasanya ada di folder <code>Instalasi Gammu\share\doc\gammu\examples\config</code> trus kita copykan ke folder <code>Instalasi Gammu\bin</code>. Berikut adalah contoh konfigurasi gammu yang saya gunakan.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>konfigurasi file gammurc&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>[gammu]
</span><span class='line'>device = com3:
</span><span class='line'>connection = at115200</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>konfigurasi file smsdrc&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>[gammu]
</span><span class='line'>device = com3:
</span><span class='line'>connection = at115200&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[smsd]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>SMSD service to use, one of FILES, MYSQL, PGSQL, DBI&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>service = SQL&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>File (or stderr, syslog, eventlog) where information will be logged&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>logfile = C:\gammu\log\gammu.log&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Amount of information being logged, each bit mean one level&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>debuglevel = 255&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>How many seconds should SMSD wait after there is no message in outbox before scanning it again. Default is 30.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>commtimeout = 1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Shows how many seconds SMSD should wait for network answer during sending sms. If nothing happen during this time, sms will be resent. Default is 30.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>sendtimeout = 10&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Phone communication settings&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>checksecurity = 0
</span><span class='line'>CheckBattery = 0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Database backends congfiguration&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>user = root
</span><span class='line'>password = rahasia
</span><span class='line'>host = gammuodbc&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>pc can also contain port or socket path after colon (eg. localhost:/path/to/socket)&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>database = db_gammu&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>DBI configuration&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>driver = odbc&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Possible values: mysql, pgsql, sqlite, mssql (Microsoft SQL Server), access (Microsoft Access), oracle&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>ref: &lt;a href="https://wammu.eu/docs/manual/smsd/config.html#gammu-smsdrc">https://wammu.eu/docs/manual/smsd/config.html#gammu-smsdrc&lt;/a>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>sql = mysql</span></code></pre></td></tr></table></div></figure></p>

<p>Coba perhatikan konfigurasi pada file <code>smsdrc</code> di atas terutama di bagian <code>host</code>, nilainya kita isikan dengan nama ODBC yang terhubung ke database gammu, dan untuk membuat ODBCnya kita gunakan fasilitas ODBC Data Source.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-02.png">https://coding4ever.files.wordpress.com/2017/08/20170822-02.png</a>&#8221;></p>

<p>Untuk menambahkan ODBC di atas, sebelumnya kita harus menginstall terlebih dulu MySQL Connector/ODBC.</p>

<h3>Environment Testing dan Development Tool yang Digunakan</h3>

<ul>
<li>Windows 7 Pro 64 bit</li>
<li>Visual Studio Community 2013 – untuk bahasa yang digunakan C#</li>
<li>Tipe aplikasi – Windows Service</li>
<li>Micro ORM <a href="/blog/categories/dapper-net/">Dapper.NET</a></li>
<li>Gammu-1.38.4-Windows-64bit</li>
<li>Database SQLite – untuk menyimpan data siswa, mata pelajaran dan nilai</li>
<li>Database MySQL v5.5.45 – untuk menyimpan data gammu</li>
<li>MySQL Connector/ODBC v5.3.9</li>
<li>Modem Wavecom M1306B</li>
</ul>


<p>Kok menggunakan Connector/ODBC ? Iya karena Gammu v1.38.4 sudah mendukung koneksi menggunakan ODBC. Jadi selain MySQL, dengan menggunakan ODBC dukungan databasenya jadi lebih banyak seperti PostgreSQL, SQLite, Oracle, MS SQL Server dan MS Access.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-03.png">https://coding4ever.files.wordpress.com/2017/08/20170822-03.png</a>&#8221;></p>

<h3>Contoh Kasus</h3>

<p>Untuk contoh kasusnya kita akan membuat service sms gateway untuk request data yang berhubungan dengan siswa seperti data pribadi, mata pelajaran dan nilai. Service sms gateway ini akan terhubung ke dua database yaitu database gammu yang tersimpan di MySQL dan database nilai yang tersimpan di SQLite. Sms gateway ini mempunyai beberapa format request data yaitu:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CEKMP                 # request data mata pelajaran
</span><span class='line'>CEKSISWA#NIS           # request data siswa
</span><span class='line'>CEKNILAI#NIS#&lt;KODE MP> # request data nilai, kode mp optional</span></code></pre></td></tr></table></div></figure></p>

<p>Untuk data siswa, mata pelajaran dan nilainya disimpan menggunakan database SQLite.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-04.png">https://coding4ever.files.wordpress.com/2017/08/20170822-04.png</a>&#8221;></p>

<h3>Project SMS Gateway</h3>

<p>Project SMS Gateway ini dibangun dengan menggunakan <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">konsep separation  of  concern</a> atau pemisahan kode program berdasarkan fungsinya. Semua kode untuk akses database harus dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop, dengan mudah digunakan untuk aplikasi lainnya seperti web, console atau windows service. Selain itu penerapan konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a> secara disiplin, dapat menghasilkan kode program yang dapat dites secara otomatis menggunakan tool <a href="/blog/2016/07/20/unit-testing-menggunakan-nunit/">Unit Testing</a>.</p>

<p>Untuk urusan kode akses database, project ini menggunakan pattern/pola <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a> yang berisi semua kode untuk mengakses database. Semua kode yang sepesifik terhadap implementasi akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana akses database diterapkan, apakah menggunakan ADO.NET murni (raw ADO.NET) atau menggunakan tool ORM/Micro ORM seperti <a href="/blog/categories/dapper-net/">Dapper.NET</a>, <a href="/blog/categories/entity-framework/">Entity Framework</a> atau NHibernate. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-05.png">https://coding4ever.files.wordpress.com/2017/08/20170822-05.png</a>&#8221;></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut:</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-06.png">https://coding4ever.files.wordpress.com/2017/08/20170822-06.png</a>&#8221;></p>

<p>Nah untuk contoh project SMS Gateway ini menggunakan arsitektur yang kedua.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-07.png">https://coding4ever.files.wordpress.com/2017/08/20170822-07.png</a>&#8221;></p>

<p>Yang pertama adalah project <code>WindowsServiceGammu.Model</code>. Project ini bertipe <code>Class Library</code> yang berisi class model/entity yang merupakan representasi dari sebuah table. Jadi kalo kita ingin menerapkan konsep OOP dalam pemrograman database maka class-class model/entity ini wajib kita gunakan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-08.png">https://coding4ever.files.wordpress.com/2017/08/20170822-08.png</a>&#8221;></p>

<p>Berikutnya adalah project <code>WindowsServiceGammu.Repository</code>. Project ini bertipe <code>Class Library</code> yang berisi class-class repository yang bertugas untuk menangani operasi CRUD. Biasanya untuk masing-masing class model/entity kita buatkan class repositorynya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-09.png">https://coding4ever.files.wordpress.com/2017/08/20170822-09.png</a>&#8221;></p>

<p>Pada gambar di atas saya menggunakan dua class context yaitu <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/Context/MySqlContext.cs">MySqlContext</a> dan <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/Context/SQLiteContext.cs">SQLiteContext</a>. Class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertugas untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function. Selain class context juga ada class-class repository yang bertugas untuk menangani operasi CRUD. Berikut adalah contoh class repository untuk class <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/SiswaRepository.cs">SiswaRepository</a> dan <a href="https://github.com/k4m4r82/gammu-sms-gateway/blob/master/src/WindowsServiceGammu.Repository/GammuRepository.cs">GammuRepository</a>.</p>

<p><div><script src='https://gist.github.com/6398e259ef86dcf1a3386a2e3cd55215.js'></script>
<noscript><pre><code>using Dapper;
using log4net;
using WindowsServiceGammu.Model;

namespace WindowsServiceGammu.Repository
{
    public interface ISiswaRepository
    {
        Siswa GetByNIS(string nis);
    }

    public class SiswaRepository : ISiswaRepository
    {
        private IDapperContext _context;
        private ILog _log;

        public SiswaRepository(IDapperContext context, ILog log)
        {
            this._context = context;
            this._log = log;
        }

        public Siswa GetByNIS(string nis)
        {
            Siswa siswa = null;

            try
            {
                var sql = @&quot;select nis, nama 
                            from siswa 
                            where nis = @nis&quot;;

                siswa = _context.db.QuerySingleOrDefault&lt;Siswa&gt;(sql, new { nis });
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return siswa;   
        }
    }
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/e7f4273deeec9753254b46b8a830fa5d.js'></script>
<noscript><pre><code>using Dapper;
using log4net;
using WindowsServiceGammu.Model.Gammu;

namespace WindowsServiceGammu.Repository
{
    public interface IGammuRepository
    {
        /// &lt;summary&gt;
        /// Method untuk membaca data sms di tabel inbox yang belum diproses
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        IList&lt;Inbox&gt; ReadInbox();

        /// &lt;summary&gt;
        /// Method untuk mengupdate status inbox menjadi sudah diproses
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;inboxId&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int UpdateInbox(int inboxId);

        /// &lt;summary&gt;
        /// Method untuk menyimpan data sms yang akan dikirim ke tabel outbox
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int SaveOutbox(Outbox obj);

        /// &lt;summary&gt;
        /// Method untuk menyimpan data sms ke 2, 3, dst ke tabel outbox_multipart, jika data sms lebih dari 160 karakter
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int SaveOutboxMultipart(OutboxMultipart obj);
    }

    public class GammuRepository : IGammuRepository
    {
        private IDapperContext _context;
        private ILog _log;

        public GammuRepository(IDapperContext context, ILog log)
        {
            this._context = context;
            this._log = log;
        }

        public IList&lt;Inbox&gt; ReadInbox()
        {
            IList&lt;Inbox&gt; listOfSMS = new List&lt;Inbox&gt;();

            try
            {
                var sql = @&quot;SELECT `ID`, `UDH`, `SenderNumber`, `TextDecoded`, `ReceivingDateTime`
                            FROM inbox 
                            WHERE Processed = &#39;false&#39;
                            ORDER BY ReceivingDateTime&quot;;

                listOfSMS = _context.db.Query&lt;Inbox&gt;(sql)
                                              .ToList();

            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return listOfSMS;
        }

        public int UpdateInbox(int inboxId)
        {
            var result = 0;

            try
            {
                var sql = @&quot;UPDATE inbox SET Processed = &#39;true&#39; 
                            WHERE id = @inboxId&quot;;
                result = _context.db.Execute(sql, new { inboxId });
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }

        public int SaveOutbox(Outbox obj)
        {
            var result = 0;

            try
            {
                var sql = @&quot;INSERT INTO outbox (DestinationNumber, UDH, TextDecoded, MultiPart, CreatorID)
                            VALUES (@DestinationNumber, @UDH, @TextDecoded, @MultiPart, &#39;Gammu&#39;)&quot;;
                result = _context.db.Execute(sql, obj);

                if (result &gt; 0)
                {
                    sql = @&quot;SELECT CONVERT(LAST_INSERT_ID(), SIGNED INTEGER) AS ID&quot;;
                    obj.Id = _context.db.QuerySingleOrDefault&lt;int&gt;(sql);
                }
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }

        public int SaveOutboxMultipart(OutboxMultipart obj)
        {
            var result = 0;

            try
            {
                var sql = @&quot;INSERT INTO outbox_multipart(ID, UDH, TextDecoded, SequencePosition)
                            VALUES (@ID, @UDH, @TextDecoded, SequencePosition)&quot;;
                result = _context.db.Execute(sql, obj);
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
            }

            return result;
        }
    }
}</code></pre></noscript></div>
</p>

<p>Untuk class repository lainnya bisa Anda cek di <a href="https://github.com/k4m4r82/gammu-sms-gateway/tree/master/src/WindowsServiceGammu.Repository">sini</a>.</p>

<p>Dan yang terakhir adalah project <code>WindowsServiceGammu.Service</code> yang bertipe <code>Windows Service</code>. Project ini tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-10.png">https://coding4ever.files.wordpress.com/2017/08/20170822-10.png</a>&#8221;></p>

<p>Project ini hanya memanggil class-class model atau repository yang sudah ada.</p>

<p>Ada dua class utama yang digunakan oleh project ini yang pertama yaitu class <code>MainService</code> yang merupakan turunan dari class ServiceBase. Class ServiceBase adalah class bawaan .NET Framework yang merupakan class dasar agar sebuah aplikasi bisa di register/menjadi bagian dari aplikasi service (Windows Service).</p>

<p><div><script src='https://gist.github.com/1713b5f3b53013a0cf2e0e5c199875cf.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;

using log4net;

namespace WindowsServiceGammu.Service
{
    public partial class MainService : ServiceBase
    {
        private readonly List&lt;TaskBase&gt; _listOfTask;
        private readonly ILog _log;
        private const int RefreshInterval = 1000; // In milliseconds

        public MainService()
        {
            InitializeComponent();
            _log = Program.log;

            // Add in this list the tasks to run periodically.
            // Tasks frequencies are set in the corresponding classes.
            _listOfTask = new List&lt;TaskBase&gt;
            {
                new SMSGatewayTask(RefreshInterval, _log)
            };
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _log.Info(&quot;Services started ...&quot;);
                _listOfTask.ForEach(t =&gt; t.StartService());
            }
            catch (Exception ex)
            {
                _log.Error(&quot;Error:&quot;, ex);
                Stop();
            }
        }

        protected override void OnStop()
        {
            _log.Info(&quot;Services stoped ...&quot;);
            _listOfTask.ForEach(t =&gt; t.StopService());
        }
    }
}</code></pre></noscript></div>
</p>

<p>Berikutnya adalah class <code>SMSGatewayTask</code> yang bertugas untuk membaca tabel inbox-nya gammu, memvalidasi perintah yang ada dan mengenerate pesan balasan dan kemudian menyimpannya ke tabel outbox. Semua aktivitas membaca dan menyimpan kembali ke database ini dibantu oleh class-class repository.</p>

<p><div><script src='https://gist.github.com/5d25b7f4ab056635fc915bb1404cf909.js'></script>
<noscript><pre><code>using log4net;
using WindowsServiceGammu.Model;
using WindowsServiceGammu.Model.Gammu;
using WindowsServiceGammu.Repository;

namespace WindowsServiceGammu.Service
{
    public class SMSGatewayTask : TaskBase
    {
        private ILog _log;

        public SMSGatewayTask(int refreshInterval, ILog log)
            : base(refreshInterval) // In milliseconds
        {
            _log = log;
        }        

        protected override void ExecTask()
        {
            using (IDapperContext mysqlContext = new MySqlContext())
            {
                IGammuRepository gammuRepo = new GammuRepository(mysqlContext, _log);
                var listOfInbox = gammuRepo.ReadInbox();

                foreach (var inbox in listOfInbox)
                {                    
                    var phoneNumber = inbox.SenderNumber;

                    if (phoneNumber.Substring(0, 3) == &quot;+62&quot;)
                    {
                        var keyword = inbox.TextDecoded;
                        var prefix = keyword;
                        var msg = string.Empty;

                        if (keyword.IndexOf(&quot;#&quot;) &gt;= 0) // karakter # -&gt; separator keyword
                        {
                            var nis = string.Empty;
                            var kodeMP = string.Empty;

                            var arrKeyword = keyword.Split(&#39;#&#39;);
                            prefix = arrKeyword[0];

                            switch (prefix.ToUpper())
                            {
                                case &quot;CEKSISWA&quot;: // FORMAT PERINTAH: CEKSISWA#NIS
                                    nis = arrKeyword[1]; // nis di ambil dari parameter pertama
                                    msg = GetBalasanCekSiswa(nis);

                                    break;

                                case &quot;CEKNILAI&quot;: // FORMAT PERINTAH: CEKNILAI#NIS#&lt;OPTIONAL KODE MP&gt;
                                    nis = arrKeyword[1]; // nis di ambil dari parameter pertama
                                    kodeMP = arrKeyword.Count() &gt; 2 ? arrKeyword[2] : string.Empty;

                                    msg = GetBalasanCekNilai(nis, kodeMP);
                                    break;

                                default:
                                    break;
                            }
                        }
                        else
                        {
                            // FORMAT PERINTAH: CEKMP
                            if (keyword.ToUpper() == &quot;CEKMP&quot;)
                            {
                                msg = GetBalasanCekMP();
                            }
                            else // keyword tidak valid
                            {
                                msg = string.Format(&quot;Keyword {0} tidak terdaftar&quot;, keyword.ToUpper());
                            }
                        }

                        SaveOutbox(msg, inbox, gammuRepo);
                    }                    
                }
            }
        }

        /// &lt;summary&gt;
        /// Method untuk menyimpan pesan yang akan dikirim ke tabel outbox
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;msg&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;inbox&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;gammuRepo&quot;&gt;&lt;/param&gt;
        private void SaveOutbox(string msg, Inbox inbox, IGammuRepository gammuRepo)
        {
            var result = 0;

            // insert ke tabel outbox
            var jumlahSMS = (int)Math.Ceiling((double)msg.Length / 160);

            if (jumlahSMS &gt; 1) // balasan sms &gt; 160 karakter, sms dipecah sebelum dikirim
            {
                var listSms = msg.SplitByLength(153)
                                 .ToList();

                var smsKe = 1;
                var outboxID = 0;
                foreach (var sms in listSms)
                {
                    var udh = inbox.UDH;

                    if (udh.Length == 0)
                    {
                        udh = string.Format(&quot;050003A7{0:00}{1:00}&quot;, listSms.Count, smsKe);
                    }
                    else
                    {
                        udh = inbox.UDH.Substring(0, inbox.UDH.Length - 4);
                        udh = string.Format(&quot;{0}{1:00}{2:00}&quot;, udh, listSms.Count, smsKe);
                    }

                    if (smsKe == 1)
                    {
                        var outbox = new Outbox
                        {
                            DestinationNumber = inbox.SenderNumber,
                            UDH = udh,
                            TextDecoded = sms,
                            MultiPart = &quot;true&quot;
                        };

                        result = gammuRepo.SaveOutbox(outbox);
                        if (result &gt; 0)
                        {
                            outboxID = outbox.Id;
                        }
                    }
                    else // sms ke 2, 3, dst, simpan ke tabel outbox_multipart
                    {
                        var outboxMultipart = new OutboxMultipart
                        {
                            Id = outboxID,
                            UDH = udh,
                            TextDecoded = sms,
                            SequencePosition = smsKe
                        };

                        result = gammuRepo.SaveOutboxMultipart(outboxMultipart);
                    }

                    smsKe++;
                }
            }
            else // balasan sms &lt;= 160 karakter
            {
                var outbox = new Outbox
                {
                    DestinationNumber = inbox.SenderNumber,
                    UDH = string.Empty,
                    TextDecoded = msg,
                    MultiPart = &quot;false&quot;
                };

                result = gammuRepo.SaveOutbox(outbox);
            }

            if (result &gt; 0)
            {
                // update status pesan di inbox menjadi sudah diproses
                result = gammuRepo.UpdateInbox(inbox.Id);
            }
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKSISWA#NIS
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;nis&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekSiswa(string nis)
        {
            var msg = string.Empty;

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                ISiswaRepository siswaRepo = new SiswaRepository(sqliteContext, _log);
                var siswa = siswaRepo.GetByNIS(nis);

                if (siswa == null)
                {
                    msg = string.Format(&quot;NIS: {0} tidak ditemukan&quot;, nis);
                }
                else
                {
                    msg = string.Format(&quot;NIS: {0}\nNAMA: {1}&quot;, siswa.nis, siswa.nama);
                }
            }

            return msg;
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKNILAI#NIS#&lt;OPTIONAL KODE MP&gt;
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;nis&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;kodeMP&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekNilai(string nis, string kodeMP)
        {
            var msg = string.Empty;

            IList&lt;Nilai&gt; listOfNilai = new List&lt;Nilai&gt;();

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                ISiswaRepository siswaRepo = new SiswaRepository(sqliteContext, _log);
                var siswa = siswaRepo.GetByNIS(nis);

                if (siswa == null)
                {
                    msg = string.Format(&quot;NIS: {0} tidak ditemukan&quot;, nis);
                }
                else
                {
                    INilaiRepository nilaiRepo = new NilaiRepository(sqliteContext, _log);

                    if (nis.Length &gt; 0 &amp;&amp; kodeMP.Length &gt; 0)
                    {
                        var nilai = nilaiRepo.GetByNIS(nis, kodeMP);
                        listOfNilai.Add(nilai);
                    }
                    else
                    {
                        listOfNilai = nilaiRepo.GetByNIS(nis);
                    }

                    msg = string.Format(&quot;NIS: {0}\nNAMA: {1}\n&quot;, siswa.nis, siswa.nama);
                    msg += &quot;Nilai:\n&quot;;

                    foreach (var nilai in listOfNilai)
                    {
                        msg += string.Format(&quot;{0}: {1}\n&quot;, nilai.kode, nilai.nilai);
                    }
                }
            }

            return msg;
        }

        /// &lt;summary&gt;
        /// Method untuk mengenerate pesan balasan untuk keyword: CEKMP
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private string GetBalasanCekMP()
        {
            var msg = string.Empty;

            using (IDapperContext sqliteContext = new SQLiteContext())
            {
                IMataPelajaranRepository mataPelajaranRepo = new MataPelajaranRepository(sqliteContext, _log);
                var listOfMataPelajaran = mataPelajaranRepo.GetAll();

                msg = string.Empty;
                msg = &quot;kode mata pelajaran:\n&quot;;

                foreach (var mataPelajaran in listOfMataPelajaran)
                {
                    msg += string.Format(&quot;{0}: {1}\n&quot;, mataPelajaran.kode, mataPelajaran.deskripsi);
                }
            }

            return msg;
        }
    }
}</code></pre></noscript></div>
</p>

<h3>Instalasi Windows Service</h3>

<p>Seperti yang sudah saya jelaskan di atas, project dengan tipe Windows Service tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service. Untuk mendaftarkannya kita gunakan tool bawaan .NET Framework yaitu InstallUtil.exe.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>install service&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>%WINDIR%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe WindowsServiceGammu.Service.exe&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>uninstall service&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>%WINDIR%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe WindowsServiceGammu.Service.exe /u</span></code></pre></td></tr></table></div></figure></p>

<p>Jika berhasil seharusnya service sms gateway yang sudah kita buat akan terdaftar di Windows Service.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2017/08/20170822-11.png">https://coding4ever.files.wordpress.com/2017/08/20170822-11.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/gammu-sms-gateway">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/"/>
    <updated>2016-06-28T12:54:38+07:00</updated>
    <id>http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a>&#8221; width=&#8221;130&#8221; height=&#8221;130&#8221;>Melanjutkan pembahasan <a href="/blog/categories/repository-pattern/">Repository Pattern</a>, kali ini kita akan membahas salah satu manfaat menggunakan <a href="/blog/categories/repository-pattern/">Repository Pattern</a>. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<!-- more -->


<p>Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository<T> generic/umum sebagai berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-01.png">https://coding4ever.files.wordpress.com/2016/06/280616-01.png</a>&#8221;></p>

<p>Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository<T>. Contoh interface ICategoryRepository dan IProductRepository.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-02.png">https://coding4ever.files.wordpress.com/2016/06/280616-02.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-03.png">https://coding4ever.files.wordpress.com/2016/06/280616-03.png</a>&#8221;></p>

<p>Sebagai contoh kita akan membuat aplikasi menggunakan database <a href="https://northwinddatabase.codeplex.com/">Northwind</a>, dengan menggunakan <a href="/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.</p>

<p><div><script src='https://gist.github.com/3ce54c2191c532665f2e19c09abd901b.js'></script>
<noscript><pre><code>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using System.Data.Entity;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public CategoryRepository()
        {
        }

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    category = context.Categories.Where(f =&gt; f.CategoryID == categoryId)
                                      .SingleOrDefault();
                }                
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .Where(f =&gt; f.CategoryName.ToLower().Contains(categoryName.ToLower()))
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                using (IEFContext context = new EFContext())
                {
                    listOfCategory = context.Categories
                                            .OrderBy(f =&gt; f.CategoryName)
                                            .ToList();
                }                
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Added;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Modified;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;            

            try
            {
                using (IEFContext context = new EFContext())
                {
                    context.Entry(obj).State = EntityState.Deleted;
                    context.SaveChanges();
                }                

                result = 1;
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>
</p>

<p>Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-04.png">https://coding4ever.files.wordpress.com/2016/06/280616-04.png</a>&#8221;></p>

<p>Pada gambar di atas deklarsi objek <code>categoryRepository</code> tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep <a href="http://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to interfaces</a>), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.</p>

<p>Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepository.cs">CategoryRepository</a> di atas menggunakan <a href="/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti <a href="/blog/categories/entity-framework/">Entity Framework</a> dengan <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> lain yang lebih ringan misal <a href="/blog/categories/dapper-net/">Dapper .NET</a>. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepositoryDapper.cs">CategoryRepositoryDapper</a> kemudian mengganti implementasi classnya di sisi client. Mudah bukan :-)</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-05.png">https://coding4ever.files.wordpress.com/2016/06/280616-05.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-061.png">https://coding4ever.files.wordpress.com/2016/06/280616-061.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-07.png">https://coding4ever.files.wordpress.com/2016/06/280616-07.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-08.png">https://coding4ever.files.wordpress.com/2016/06/280616-08.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/06/280616-09.png">https://coding4ever.files.wordpress.com/2016/06/280616-09.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat User Function Library Pada Crystal Report .NET]]></title>
    <link href="http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net/"/>
    <updated>2016-03-26T12:45:06+07:00</updated>
    <id>http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg">https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg</a>&#8221; width=&#8221;120&#8221; height=&#8221;100&#8221;>Crystal Report .NET selain memudahkan kita dalam mendesain report/laporan juga menyediakan puluhan fungsi yang siap pakai (built-in function) yang bisa mempercepat dalam pembuatan report/laporan. Tetapi ada waktunya ketika kita membutuhkan fungsi khusus yang tidak disediakan oleh Crystal Report .NET, dan kabar baiknya Crystal Report .NET juga menyediakan fasilitas untuk membuat fungsi tambahan yang dikenal dengan istilah <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a>.</p>

<!-- more -->


<p><a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> adalah class library .NET yang dibuat dengan beberapa aturan sebagai berikut :</p>

<ol>
<li>Nama project harus di beri prefix <code>CRUFL</code>. Misal kita ingin membuat project dengan nama CrystalReportHelper, nama project ini harus kita tambahkan prefix <code>CRUFL</code>, sehingga nama projectnya menjadi <strong>CRUFL</strong>CrystalReportHelper.</li>
<li>Project harus terdiri dari interface dan class konkret</li>
<li>Setiap interface harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code></li>
<li>Begitu juga class konkret harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code></li>
<li>Mengaktifkan pilihan <code>Register for COM interop</code> (Project -> Properties -> Build)</li>
<li>Menginstall hasil build ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a></li>
</ol>


<p>Oke kita langsung saja, kita awali dengan membuat User Function Library Class Library.</p>

<h5>Membuat UFL Class Library</h5>

<ol>
<li><p>Klik menu File ->New -> Project …</p></li>
<li><p>Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-01.png">https://coding4ever.files.wordpress.com/2016/03/260316-01.png</a>&#8221;></p>

<p>Nama project harus diberi prefix <code>CRUFL</code></p></li>
<li><p>Setelah project berhasil dibuat, klik kanan nama project -> properties</p></li>
<li><p>Klik tab Build, kemudian aktifkan pilihan <code>Register for COM interop</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-02.png">https://coding4ever.files.wordpress.com/2016/03/260316-02.png</a>&#8221;></p>

<p>Mengaktifkan pilihan <code>Register for COM interop</code> akan menyebabkan assembly secara otomatis diregister oleh utility regasm.exe, ketika project dibuild/compile. Jadi, kita tidak perlu menjalankan regasm.exe secara manual via command prompt.</p></li>
</ol>


<p>Setelah project berhasil dibuat, kita akan menambahkan interface dan class konkretnya. Untuk contoh kali ini kita akan membuat fungsi terbilang yang biasanya digunakan dalam pembuatan aplikasi ritel.</p>

<p>Kita akan mulai dengan interface terlebih dulu.</p>

<h5>Membuat Interface dengan Attribut COM</h5>

<ol>
<li><p>Hapus class default (Class1)</p></li>
<li><p>Tambahkan sebuah interface dengan nama ITerbilang, kemudian tambahkan juga method abstractnya dengan nama TerbilangIndonesia</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-03.png">https://coding4ever.files.wordpress.com/2016/03/260316-03.png</a>&#8221;></p></li>
<li><p>Kemudian tambahkan attribut COM</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-04.png">https://coding4ever.files.wordpress.com/2016/03/260316-04.png</a>&#8221;></p>

<p>Attribut COM untuk interface terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code>. Attribut ini perlu kita tambahkan agar class library yang kita buat bisa dikenali oleh Crystal Report.</p>

<p>Untuk mendapatkan nilai GUID, bisa menggunakan tool GUID yang sudah disediakan oleh Visual Studio .NET. Tool ini bisa diaktifkan melalui menu <code>Tools -&gt; Create GUID</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-05.png">https://coding4ever.files.wordpress.com/2016/03/260316-05.png</a>&#8221;></p></li>
</ol>


<p>Setelah menyelesaikan pembuatan interface ITerbilang, kita lanjutkan dengan pembuatan class konkretnya.</p>

<h5>Membuat Class dengan Attribut COM</h5>

<ol>
<li><p>Tambahkan sebuah class dengan nama Terbilang. Class harus mengimplementasikan interface ITerbilang.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-06.png">https://coding4ever.files.wordpress.com/2016/03/260316-06.png</a>&#8221;></p>

<p>Karena class Terbilang mengimplementasikan interface ITerbilang, maka class Terbilang wajib mendefinisikan ulang (override) method TerbilangIndonesia.</p></li>
<li><p>Kemudian tambahkan Attribut COM</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-07.png">https://coding4ever.files.wordpress.com/2016/03/260316-07.png</a>&#8221;></p>

<p>Attribut COM untuk class  terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code>. Setelah itu lengkapi kode method TerbilangIndonesia seperti berikut :</p>

<p><div><script src='https://gist.github.com/34337e1baec374270fb4.js'></script>
<noscript><pre><code>[ComVisible(true), ClassInterface(ClassInterfaceType.None), Guid(&quot;BA626A6E-0AA9-45C9-AA47-2E9674406A75&quot;)]
public class Terbilang : ITerbilang
{
    public string TerbilangIndonesia(int nominal)
    {
        string strTot = string.Empty;
        string urai = string.Empty;
        string strJmlHuruf = string.Empty;
        string bil1 = string.Empty;
        string bil2 = string.Empty;

        int y = 0;
        int x = 0;
        int z = 0;

        strJmlHuruf = Convert.ToString(nominal);

        urai = string.Empty;
        while (x &lt; strJmlHuruf.Length)
        {
            x++;
            strTot = strJmlHuruf.Substring(x - 1, 1);
            y = y + Convert.ToInt32(strTot);
            z = strJmlHuruf.Length - x + 1;
            switch (Convert.ToInt32(strTot))
            {
                case 1:
                    if ((z == 1 | z == 7 | z == 10 | z == 13))
                    {
                        bil1 = &quot;SATU &quot;;
                    }
                    else if ((z == 4))
                    {
                        if ((x == 1))
                        {
                            bil1 = &quot;SE&quot;;
                        }
                        else
                        {
                            bil1 = &quot;SATU &quot;;
                        }
                    }
                    else if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
                    {
                        x = x + 1;
                        strTot = strJmlHuruf.Substring(x - 1, 1);
                        z = strJmlHuruf.Length - x + 1;
                        bil2 = string.Empty;
                        switch (Convert.ToInt32(strTot))
                        {
                            case 0:
                                bil1 = &quot;SEPULUH &quot;;
                                break;
                            case 1:
                                bil1 = &quot;SEBELAS &quot;;
                                break;
                            case 2:
                                bil1 = &quot;DUA BELAS &quot;;
                                break;
                            case 3:
                                bil1 = &quot;TIGA BELAS &quot;;
                                break;
                            case 4:
                                bil1 = &quot;EMPAT BELAS &quot;;
                                break;
                            case 5:
                                bil1 = &quot;LIMA BELAS &quot;;
                                break;
                            case 6:
                                bil1 = &quot;ENAM BELAS &quot;;
                                break;
                            case 7:
                                bil1 = &quot;TUJUH BELAS &quot;;
                                break;
                            case 8:
                                bil1 = &quot;DELAPAN BELAS &quot;;
                                break;
                            case 9:
                                bil1 = &quot;SEMBILAN BELAS &quot;;
                                break;
                        }
                    }
                    else
                    {
                        bil1 = &quot;SE&quot;;
                    }
                    break;
                case 2:
                    bil1 = &quot;DUA &quot;;
                    break;
                case 3:
                    bil1 = &quot;TIGA &quot;;
                    break;
                case 4:
                    bil1 = &quot;EMPAT &quot;;
                    break;
                case 5:
                    bil1 = &quot;LIMA &quot;;
                    break;
                case 6:
                    bil1 = &quot;ENAM &quot;;
                    break;
                case 7:
                    bil1 = &quot;TUJUH &quot;;
                    break;
                case 8:
                    bil1 = &quot;DELAPAN &quot;;
                    break;
                case 9:
                    bil1 = &quot;SEMBILAN &quot;;
                    break;
                default:
                    bil1 = string.Empty;
                    break;
            }

            if ((Convert.ToInt32(strTot) &gt; 0))
            {
                if ((z == 2 | z == 5 | z == 8 | z == 11 | z == 14))
                {
                    bil2 = &quot;PULUH &quot;;
                }
                else if ((z == 3 | z == 6 | z == 9 | z == 12 | z == 15))
                {
                    bil2 = &quot;RATUS &quot;;
                }
                else
                {
                    bil2 = string.Empty;
                }
            }
            else
            {
                bil2 = string.Empty;
            }

            if ((y &gt; 0))
            {
                switch (z)
                {
                    case 4:
                        bil2 = bil2 + &quot;RIBU &quot;;
                        y = 0;
                        break;
                    case 7:
                        bil2 = bil2 + &quot;JUTA &quot;;
                        y = 0;
                        break;
                    case 10:
                        bil2 = bil2 + &quot;MILYAR &quot;;
                        y = 0;
                        break;
                    case 13:
                        bil2 = bil2 + &quot;TRILYUN &quot;;
                        y = 0;
                        break;
                }
            }
            urai = urai + bil1 + bil2;
        }

        return urai.ToLower() + &quot;rupiah&quot;;
    }
}</code></pre></noscript></div>
</p></li>
</ol>


<p>Langkah berikutnya adalah mengeset Strong-Name key, ini adalah peraturan berikutnya yang harus kita ikuti agar class <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> yang sudah kita buat bisa di daftarkan ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>.</p>

<h5>Mengeset Strong-Name key</h5>

<ol>
<li><p>Klik kanan project -> Properties</p></li>
<li><p>Aktifkan tab signing, kemudian aktifkan pilihan <code>Sign the assembly</code></p></li>
<li><p>Pada pilihan combo <code>Choose a string name key file</code>, pilih &lt;New…> setelah itu akan tampil dialog <code>Create Strong Name Key</code> kemudian isikan nilai input key file name, misal dengan nama <code>CRUFLCrystalReportHelperKey</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-08.png">https://coding4ever.files.wordpress.com/2016/03/260316-08.png</a>&#8221;></p></li>
<li><p>Terakhir lakukan proses Build/Compile, melalui menu Build -> Build Solution</p></li>
</ol>


<h5>Mendaftarkan Assembly ke GAC(Global Assembly Cache)</h5>

<p>Hasil build/compile dari project <code>CRUFLCrystalReportHelper</code>, akan menghasilkan file dengan ekstensi .dll atau yang dikenal dengan istilah file Assembly. File ini harus kita daftarkan terlebih dulu ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> agar bisa dikenali oleh Crystal Report.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-22.png">https://coding4ever.files.wordpress.com/2016/03/260316-22.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-23.png">https://coding4ever.files.wordpress.com/2016/03/260316-23.png</a>&#8221;></p>

<p>Berikut langkah-langkah untuk mendaftarkan file Assembly ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> :</p>

<ol>
<li><p>Aktifkan Visual Studio Command Prompt sesuai dengan versi Visual Studio .NET Anda</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-09.png">https://coding4ever.files.wordpress.com/2016/03/260316-09.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-10.png">https://coding4ever.files.wordpress.com/2016/03/260316-10.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-11.png">https://coding4ever.files.wordpress.com/2016/03/260316-11.png</a>&#8221;></p></li>
<li><p>Gunakan tool <code>gacutil</code>, dengan format perintah seperti berikut</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if &lt;Assembly Name></span></code></pre></td></tr></table></div></figure></p>

<p>contoh :</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gacutil -if CRUFLCrystalReportHelper.dll</span></code></pre></td></tr></table></div></figure></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-12.png">https://coding4ever.files.wordpress.com/2016/03/260316-12.png</a>&#8221;></p>

<p>Jika berhasil akan tampil pesan <code>Assembly successfully added to the cache</code>.</p></li>
</ol>


<h5>Testing User Function Library</h5>

<p>Setelah menyelesaikan project CRUFLCrystalReportHelper dan mendaftarkannya ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>, kita akan menambahkan project baru dengan tipe WinForm Application.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-13.png">https://coding4ever.files.wordpress.com/2016/03/260316-13.png</a>&#8221;></p>

<p>Setelah itu tambahkan juga item Crystal Report.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-14.png">https://coding4ever.files.wordpress.com/2016/03/260316-14.png</a>&#8221;></p>

<p>Kemudian desain reportnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-15.png">https://coding4ever.files.wordpress.com/2016/03/260316-15.png</a>&#8221;></p>

<p>Selanjutnya kita akan menambahkan formula baru dengan nama <code>terbilang</code>, caranya dengan mengklik kanan <code>Formula Fields</code> -> New …</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-16.png">https://coding4ever.files.wordpress.com/2016/03/260316-16.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-17.png">https://coding4ever.files.wordpress.com/2016/03/260316-17.png</a>&#8221;></p>

<p>Setelah itu akan tampil dialog Formula Workshop</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-18.png">https://coding4ever.files.wordpress.com/2016/03/260316-18.png</a>&#8221;></p>

<p>Fungsi terbilang <code>TerbilangIndonesia</code> yang sudah kita buat masuk ke dalam kelompok <code>Additional Functions</code> -> <code>COM and .NET UFLs (u212com.dll)</code>. Fungsi ini membutuhkan parameter nominal yang nilainya kita isi dengan field total dari tabel Jual.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-19.png">https://coding4ever.files.wordpress.com/2016/03/260316-19.png</a>&#8221;></p>

<p>Kemudian tambahkan formula <code>terbilang</code> ke dalam report.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-20.png">https://coding4ever.files.wordpress.com/2016/03/260316-20.png</a>&#8221;></p>

<p>Terakhir kita running project, dan lihat hasil dari formula terbilangnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/03/260316-21.png">https://coding4ever.files.wordpress.com/2016/03/260316-21.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUFLforCR">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit of Work Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/"/>
    <updated>2016-02-24T10:24:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a>&#8221; width=&#8221;130&#8221; height=&#8221;130&#8221;>Kalau sudah membahas <a href="/blog/categories/repository-pattern/">Repository Pattern</a> rasanya kurang <code>manteb</code> jika tidak membahas <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work Pattern</a>, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak <em>&ldquo;ibarat sop ayam tanpa garam,  rasanya hambar&rdquo;</em> he he :D</p>

<p><a href="/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan.
Jadi cara kerja <a href="/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> ini mirip dengan salah satu fitur andalan <a href="https://en.wikipedia.org/wiki/Category:Database_management_systems">DBMS</a> yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</p>

<!-- more -->


<p><a href="/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> sendiri merupakan salah satu pattern <code>kesukaan</code> Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu <a href="/blog/categories/entity-framework/">Entity Framework</a>. Bagi Anda yang sudah pernah mencoba <a href="/blog/categories/entity-framework/">Entity Framework</a> mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan <a href="/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a>.</p>

<h5>Membuat Interface dan Class Konkret Unit of Work</h5>

<p>Sama seperti pembahasan <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, impelmentasi <a href="/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> juga disarankan menggunakan <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>.</p>

<p>Berdasarkan contoh project <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita akan menambahkan interface baru dengan nama <code>IUnitOfWork</code>. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/240216-01.png">https://coding4ever.files.wordpress.com/2016/02/240216-01.png</a>&#8221;></p>

<p>Setelah itu kita buatkan class konkretnya dengan nama <code>UnitOfWork</code>, dan ingat class ini harus mengimplementasikan interface <code>IUnitOfWork</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/240216-02.png">https://coding4ever.files.wordpress.com/2016/02/240216-02.png</a>&#8221;></p>

<p>Terakhir kita lengkapi kode class UnitOfWork seperti berikut :</p>

<p><div><script src='https://gist.github.com/c21f5beec8837a044f37.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Repository.Api;
using System.Data;

namespace Northwind.Repository.Service
{
    public class UnitOfWork : IUnitOfWork
    {
        private IDapperContext _context;
        private IDbTransaction _transaction;
        private ICategoryRepository _categoryRepository;
        private IProductRepository _productRepository;

        public UnitOfWork(IDapperContext context)
        {
            this._context = context;            
        }

        public ICategoryRepository CategoryRepository
        {
            get { return _categoryRepository ?? (_categoryRepository = new CategoryRepository(_transaction, _context)); }
        }

        public IProductRepository ProductRepository
        {
            get { return _productRepository ?? (_productRepository = new ProductRepository(_transaction, _context)); }
        }

        public void BeginTransaction()
        {
            if (_transaction != null)
                throw new NullReferenceException(&quot;Not finished previous transaction&quot;);

            _transaction = _context.db.BeginTransaction();
        }

        public void Commit()
        {
            if (_transaction == null)
                throw new NullReferenceException(&quot;Tryed commit not opened transaction&quot;);

            _transaction.Commit();
        }
    }
}</code></pre></noscript></div>
</p>

<h5>Testing Class Unit of Work</h5>

<p>Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> menggunakan <a href="">Unit of Work Pattern</a>.</p>

<p><div><script src='https://gist.github.com/af692dd1962816fab878.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class UnitOfWorkTest
    {
        static void Main(string[] args)
        {
            using (IDapperContext context = new DapperContext())
            {
                // buat objek unit of work
                IUnitOfWork uow = new UnitOfWork(context);

                var result = 0;

                uow.BeginTransaction(); // mulai transaction

                // buat objek category
                var category = new Category
                {
                    CategoryName = &quot;Condiments&quot;,
                    Description = &quot;Sweet and savory sauces, relishes, and seasonings&quot;
                };
                result = uow.CategoryRepository.Save(category); // simpan data category
                Console.WriteLine(&quot;Tambah data category {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                // buat objek product
                var product = new Product
                {
                    CategoryID = category.CategoryID,
                    ProductName = &quot;Genen Shouyu&quot;,
                    QuantityPerUnit = &quot;24 - 250 ml bottles&quot;,
                    UnitPrice = 15.5,
                    UnitsInStock = 50
                };
                result = uow.ProductRepository.Save(product); // simpan data product
                Console.WriteLine(&quot;Tambah data product {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);

                uow.Commit(); // commit, simpan data secara permanen ke database
            }

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }        
    }
}</code></pre></noscript></div>
</p>

<p>Selamat <a href="https://github.com/k4m4r82/UnitOfWorkPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a>&#8221; width=&#8221;130&#8221; height=&#8221;130&#8221;>Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="/blog/categories/dapper-net/">Dapper.NET</a>, <a href="/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-01.png">https://coding4ever.files.wordpress.com/2016/02/210216-01.png</a>&#8221;></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-021.png">https://coding4ever.files.wordpress.com/2016/02/210216-021.png</a>&#8221;></p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-101.png">https://coding4ever.files.wordpress.com/2016/02/210216-101.png</a>&#8221;></p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-03.png">https://coding4ever.files.wordpress.com/2016/02/210216-03.png</a>&#8221;></p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<p><div><script src='https://gist.github.com/bd6bbf861f46082851c7.js'></script>
<noscript><pre><code>namespace Northwind.Model
{
    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }
        public string Description { get; set; }
    }
}</code></pre></noscript></div>
</p>

<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-04.png">https://coding4ever.files.wordpress.com/2016/02/210216-04.png</a>&#8221;></p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-05.png">https://coding4ever.files.wordpress.com/2016/02/210216-05.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-061.png">https://coding4ever.files.wordpress.com/2016/02/210216-061.png</a>&#8221;></p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<p><div><script src='https://gist.github.com/05123acda602dd1bdc47.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public Category GetByID(int categoryId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            throw new NotImplementedException();
        }

        public int Save(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Category obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/d876476ffa10fa9855d2.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        public Product GetByID(int productId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetByName(string productName)
        {
            throw new NotImplementedException();
        }

        public int Save(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Product obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>
</p>

<p>Kemudian lengkapi kodenya seperti berikut :</p>

<p><div><script src='https://gist.github.com/4513c85d1541f0321204.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        private IDapperContext _context;
        private string _sql;

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description
                         FROM Categories
                         WHERE CategoryID = @categoryId&quot;;
                
                category = _context.db.Query&lt;Category&gt;(_sql, new { categoryId })
                                   .SingleOrDefault();
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         WHERE CategoryName LIKE @categoryName
                         ORDER BY CategoryName&quot;;
                
                categoryName = string.Format(&quot;%{0}%&quot;, categoryName);
                listOfCategory = _context.db.Query&lt;Category&gt;(_sql, new { categoryName })
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         ORDER BY CategoryName&quot;;

                listOfCategory = _context.db.Query&lt;Category&gt;(_sql)
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Categories (CategoryID, CategoryName, Description)
                         VALUES (@CategoryID, @CategoryName, @Description)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Categories SET CategoryName = @CategoryName, Description = @Description)
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Categories
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/87ba9b6fe43275c1f59c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        private IDapperContext _context;
        private string _sql;

        private Product MappingRecordToObj(string sql, object param = null)
        {
            var product = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).SingleOrDefault();

            return product;
        }

        private IList&lt;Product&gt; MappingRecordToList(string sql, object param = null)
        {
            var listOfProduct = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).ToList();

            return listOfProduct;
        }

        public Product GetByID(int productId)
        {
            Product product = null;

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductID = @productId&quot;;

                product = MappingRecordToObj(_sql, new { productId });
            }
            catch
            {
            }

            return product;
        }        

        public IList&lt;Product&gt; GetByName(string productName)
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductName LIKE @productName
                         ORDER BY Products.ProductName&quot;;

                productName = string.Format(&quot;%{0}%&quot;, productName);
                listOfProduct = MappingRecordToList(_sql, new { productName });
            }
            catch
            {
            }

            return listOfProduct;
        }

        public IList&lt;Product&gt; GetAll()
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         ORDER BY Products.ProductName&quot;;

                listOfProduct = MappingRecordToList(_sql);
            }
            catch
            {
            }

            return listOfProduct;
        }

        public int Save(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Products (ProductID, ProductName, QuantityPerUnit, UnitPrice, UnitsInStock)
                         VALUES (@ProductID, @ProductName, @QuantityPerUnit, @UnitPrice, @UnitsInStock)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Products SET ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, 
                         UnitPrice = @UnitPrice, UnitsInStock = @UnitsInStock
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Products
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>
</p>

<h5>Membuat Class Context</h5>

<p>Di dalam <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-07.png">https://coding4ever.files.wordpress.com/2016/02/210216-07.png</a>&#8221;></p>

<p><div><script src='https://gist.github.com/207b5c995e267c01d5c4.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Data;
using System.Data.Common;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class DapperContext : IDapperContext
    {
        private readonly string _providerName;
        private readonly string _connectionString;
        private IDbConnection _db;

        public DapperContext()
        {
            var dbName = System.IO.Directory.GetCurrentDirectory() + &quot;\\Northwind.db&quot;;

            _providerName = &quot;System.Data.SQLite&quot;;
            _connectionString = &quot;Data Source=&quot; + dbName;
        }

        private IDbConnection GetOpenConnection(string providerName, string connectionString)
        {
            DbConnection conn = null;

            try
            {
                DbProviderFactory provider = DbProviderFactories.GetFactory(providerName);
                conn = provider.CreateConnection();
                conn.ConnectionString = connectionString;
                conn.Open();
            }
            catch
            {
            }

            return conn;
        }

        public IDbConnection db
        {
            get { return _db ?? (_db = GetOpenConnection(_providerName, _connectionString)); }
        }

        public void Dispose()
        {
            if (_db != null)
            {
                try
                {
                    if (_db.State != ConnectionState.Closed)
                        _db.Close();
                }
                finally
                {
                    _db.Dispose();
                }
            }

            GC.SuppressFinalize(this);
        }
    }
}</code></pre></noscript></div>
</p>

<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-08.png">https://coding4ever.files.wordpress.com/2016/02/210216-08.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-09.png">https://coding4ever.files.wordpress.com/2016/02/210216-09.png</a>&#8221;></p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<p><div><script src='https://gist.github.com/ac5519310e9154830f1c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class CategoryRepositoryTest
    {
        // deklarsi objek repository
        static ICategoryRepository _repository;

        static void Main(string[] args)
        {
            // buat objek context
            IDapperContext context = new DapperContext();

            // buat objek repository
            _repository = new CategoryRepository(context);

            GetAllTest();
            SaveTest();
            UpdateTest();
            DeleteTest();

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }

        static void GetAllTest()
        {
            var listOfCategory = _repository.GetAll();
            foreach (var category in listOfCategory)
            {
                Console.WriteLine(&quot;{0}, {1}, {2}&quot;, category.CategoryID, category.CategoryName, category.Description);
            }
        }

        static void SaveTest()
        {
            var category = new Category
            {
                CategoryName = &quot;Seafood&quot;,
                Description = &quot;Seaweed and fish&quot;
            };

            var result = _repository.Save(category);
            Console.WriteLine(&quot;Tambah data baru {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void UpdateTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            category.CategoryName = &quot;Seaweed and fish&quot;;
            category.Description = &quot;Seafood&quot;;

            var result = _repository.Update(category);
            Console.WriteLine(&quot;Update data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void DeleteTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            var result = _repository.Delete(category);
            Console.WriteLine(&quot;Menghapus data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }        
    }
}</code></pre></noscript></div>
</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
