<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visual C# | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/visual-c-number/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-02-23T06:10:57+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a>&#8221; width=&#8221;130&#8221; height=&#8221;130&#8221;>Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="/blog/categories/dapper-net/">Dapper.NET</a>, <a href="/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-01.png">https://coding4ever.files.wordpress.com/2016/02/210216-01.png</a>&#8221;></p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-021.png">https://coding4ever.files.wordpress.com/2016/02/210216-021.png</a>&#8221;></p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-101.png">https://coding4ever.files.wordpress.com/2016/02/210216-101.png</a>&#8221;></p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-03.png">https://coding4ever.files.wordpress.com/2016/02/210216-03.png</a>&#8221;></p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<p><div><script src='https://gist.github.com/bd6bbf861f46082851c7.js'></script>
<noscript><pre><code>namespace Northwind.Model
{
    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }
        public string Description { get; set; }
    }
}</code></pre></noscript></div>
</p>

<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-04.png">https://coding4ever.files.wordpress.com/2016/02/210216-04.png</a>&#8221;></p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-05.png">https://coding4ever.files.wordpress.com/2016/02/210216-05.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-061.png">https://coding4ever.files.wordpress.com/2016/02/210216-061.png</a>&#8221;></p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<p><div><script src='https://gist.github.com/05123acda602dd1bdc47.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        public Category GetByID(int categoryId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            throw new NotImplementedException();
        }

        public int Save(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Category obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Category obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Category&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/d876476ffa10fa9855d2.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        public Product GetByID(int productId)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetByName(string productName)
        {
            throw new NotImplementedException();
        }

        public int Save(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Update(Product obj)
        {
            throw new NotImplementedException();
        }

        public int Delete(Product obj)
        {
            throw new NotImplementedException();
        }

        public IList&lt;Product&gt; GetAll()
        {
            throw new NotImplementedException();
        }
    }
}</code></pre></noscript></div>
</p>

<p>Kemudian lengkapi kodenya seperti berikut :</p>

<p><div><script src='https://gist.github.com/4513c85d1541f0321204.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class CategoryRepository : ICategoryRepository
    {
        private IDapperContext _context;
        private string _sql;

        public Category GetByID(int categoryId)
        {
            Category category = null;

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description
                         FROM Categories
                         WHERE CategoryID = @categoryId&quot;;
                
                category = _context.db.Query&lt;Category&gt;(_sql, new { categoryId })
                                   .SingleOrDefault();
            }
            catch
            {
            }

            return category;
        }

        public IList&lt;Category&gt; GetByName(string categoryName)
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         WHERE CategoryName LIKE @categoryName
                         ORDER BY CategoryName&quot;;
                
                categoryName = string.Format(&quot;%{0}%&quot;, categoryName);
                listOfCategory = _context.db.Query&lt;Category&gt;(_sql, new { categoryName })
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public IList&lt;Category&gt; GetAll()
        {
            IList&lt;Category&gt; listOfCategory = new List&lt;Category&gt;();

            try
            {
                _sql = @&quot;SELECT CategoryID, CategoryName, Description 
                         FROM Categories
                         ORDER BY CategoryName&quot;;

                listOfCategory = _context.db.Query&lt;Category&gt;(_sql)
                                         .ToList();
            }
            catch
            {
            }

            return listOfCategory;
        }

        public int Save(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Categories (CategoryID, CategoryName, Description)
                         VALUES (@CategoryID, @CategoryName, @Description)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Categories SET CategoryName = @CategoryName, Description = @Description)
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Category obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Categories
                         WHERE CategoryID = @CategoryID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/87ba9b6fe43275c1f59c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Dapper;

namespace Northwind.Repository.Service
{
    public class ProductRepository : IProductRepository
    {
        private IDapperContext _context;
        private string _sql;

        private Product MappingRecordToObj(string sql, object param = null)
        {
            var product = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).SingleOrDefault();

            return product;
        }

        private IList&lt;Product&gt; MappingRecordToList(string sql, object param = null)
        {
            var listOfProduct = _context.db.Query&lt;Product, Category, Product&gt;(_sql, (p, c) =&gt;
            {
                p.CategoryID = c.CategoryID; p.Category = c;
                return p;
            }, param, splitOn: &quot;CategoryID&quot;).ToList();

            return listOfProduct;
        }

        public Product GetByID(int productId)
        {
            Product product = null;

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductID = @productId&quot;;

                product = MappingRecordToObj(_sql, new { productId });
            }
            catch
            {
            }

            return product;
        }        

        public IList&lt;Product&gt; GetByName(string productName)
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         WHERE Products.ProductName LIKE @productName
                         ORDER BY Products.ProductName&quot;;

                productName = string.Format(&quot;%{0}%&quot;, productName);
                listOfProduct = MappingRecordToList(_sql, new { productName });
            }
            catch
            {
            }

            return listOfProduct;
        }

        public IList&lt;Product&gt; GetAll()
        {
            IList&lt;Product&gt; listOfProduct = new List&lt;Product&gt;();

            try
            {
                _sql = @&quot;SELECT Products.ProductID, Products.ProductName, Products.QuantityPerUnit, 
                         Products.UnitPrice, Products.UnitsInStock,
                         Categories.CategoryID, Categories.CategoryName, Categories.Description
                         FROM Products INNER JOIN Categories ON Categories.CategoryId = Products.CategoryId 
                         ORDER BY Products.ProductName&quot;;

                listOfProduct = MappingRecordToList(_sql);
            }
            catch
            {
            }

            return listOfProduct;
        }

        public int Save(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;INSERT INTO Products (ProductID, ProductName, QuantityPerUnit, UnitPrice, UnitsInStock)
                         VALUES (@ProductID, @ProductName, @QuantityPerUnit, @UnitPrice, @UnitsInStock)&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Update(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;UPDATE Products SET ProductName = @ProductName, QuantityPerUnit = @QuantityPerUnit, 
                         UnitPrice = @UnitPrice, UnitsInStock = @UnitsInStock
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }

        public int Delete(Product obj)
        {
            var result = 0;

            try
            {
                _sql = @&quot;DELETE FROM Products
                         WHERE ProductID = @ProductID&quot;;
                result = _context.db.Execute(_sql, obj);
            }
            catch
            {
            }

            return result;
        }        
    }
}</code></pre></noscript></div>
</p>

<h5>Membuat Class Context</h5>

<p>Di dalam <a href="/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-07.png">https://coding4ever.files.wordpress.com/2016/02/210216-07.png</a>&#8221;></p>

<p><div><script src='https://gist.github.com/207b5c995e267c01d5c4.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Data;
using System.Data.Common;
using Northwind.Repository.Api;

namespace Northwind.Repository.Service
{
    public class DapperContext : IDapperContext
    {
        private readonly string _providerName;
        private readonly string _connectionString;
        private IDbConnection _db;

        public DapperContext()
        {
            var dbName = System.IO.Directory.GetCurrentDirectory() + &quot;\\Northwind.db&quot;;

            _providerName = &quot;System.Data.SQLite&quot;;
            _connectionString = &quot;Data Source=&quot; + dbName;
        }

        private IDbConnection GetOpenConnection(string providerName, string connectionString)
        {
            DbConnection conn = null;

            try
            {
                DbProviderFactory provider = DbProviderFactories.GetFactory(providerName);
                conn = provider.CreateConnection();
                conn.ConnectionString = connectionString;
                conn.Open();
            }
            catch
            {
            }

            return conn;
        }

        public IDbConnection db
        {
            get { return _db ?? (_db = GetOpenConnection(_providerName, _connectionString)); }
        }

        public void Dispose()
        {
            if (_db != null)
            {
                try
                {
                    if (_db.State != ConnectionState.Closed)
                        _db.Close();
                }
                finally
                {
                    _db.Dispose();
                }
            }

            GC.SuppressFinalize(this);
        }
    }
}</code></pre></noscript></div>
</p>

<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-08.png">https://coding4ever.files.wordpress.com/2016/02/210216-08.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/210216-09.png">https://coding4ever.files.wordpress.com/2016/02/210216-09.png</a>&#8221;></p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<p><div><script src='https://gist.github.com/ac5519310e9154830f1c.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Northwind.Model;
using Northwind.Repository.Api;
using Northwind.Repository.Service;

namespace Northwind.ConsoleApp
{
    class CategoryRepositoryTest
    {
        // deklarsi objek repository
        static ICategoryRepository _repository;

        static void Main(string[] args)
        {
            // buat objek context
            IDapperContext context = new DapperContext();

            // buat objek repository
            _repository = new CategoryRepository(context);

            GetAllTest();
            SaveTest();
            UpdateTest();
            DeleteTest();

            Console.WriteLine(&quot;\nPress any key to exit ...&quot;);
            Console.ReadKey();
        }

        static void GetAllTest()
        {
            var listOfCategory = _repository.GetAll();
            foreach (var category in listOfCategory)
            {
                Console.WriteLine(&quot;{0}, {1}, {2}&quot;, category.CategoryID, category.CategoryName, category.Description);
            }
        }

        static void SaveTest()
        {
            var category = new Category
            {
                CategoryName = &quot;Seafood&quot;,
                Description = &quot;Seaweed and fish&quot;
            };

            var result = _repository.Save(category);
            Console.WriteLine(&quot;Tambah data baru {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void UpdateTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            category.CategoryName = &quot;Seaweed and fish&quot;;
            category.Description = &quot;Seafood&quot;;

            var result = _repository.Update(category);
            Console.WriteLine(&quot;Update data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }

        static void DeleteTest()
        {
            var categoryId = 20;
            var category = _repository.GetByID(categoryId);

            var result = _repository.Delete(category);
            Console.WriteLine(&quot;Menghapus data {0}&quot;, result &gt; 0 ? &quot;berhasil&quot; : &quot;gagal&quot;);
        }        
    }
}</code></pre></noscript></div>
</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengembangan Aplikasi Real-time Menggunakan SignalR Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/"/>
    <updated>2016-02-15T07:49:15+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/signalr.png">https://coding4ever.files.wordpress.com/2016/02/signalr.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;100&#8221;>Dasar-dasar penggunaan <a href="http://signalr.net/">SignalR</a>, sudah saya bahas dipostingan <a href="/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/">pertama</a>. Jadi dipostingan <a href="/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">kedua</a> ini saya hanya ingin berbagai source code lain contoh penggunaan <a href="http://signalr.net/">SignalR</a> yaitu source code untuk aplikasi pemesanan <a href="/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">tiket real-time</a>.</p>

<p>Cara kerja aplikasi ini masih sederhana sekali yaitu hanya mengirimkan informasi nomor kursi yang dipilih oleh user ke server, kemudian server akan melakukan pengiriman (push) nomor kursi yang dipesan kepada semua client yang sudah terkoneksi ke server.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/150216-01.png">https://coding4ever.files.wordpress.com/2016/02/150216-01.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoSignalR2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengembangan Aplikasi Real-time Menggunakan SignalR]]></title>
    <link href="http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/"/>
    <updated>2016-02-09T11:17:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2016/02/signalr.png">https://coding4ever.files.wordpress.com/2016/02/signalr.png</a>&#8221; width=&#8221;120&#8221; height=&#8221;100&#8221;><a href="http://signalr.net/">ASP.NET  SignalR</a> atau  dapat  disingkat  menjadi  <a href="http://signalr.net/">SignalR</a>  adalah  library yang memudahkan kita untuk menambahkan fungsi komunikasi <code>real-time</code> pada aplikasi yang kita kembangkan. Fungsi <code>real-time</code> di sini adalah kemampuan server melakukan pengiriman (push) konten atau data kepada client yang  sudah  terkoneksi  ke  server, sehingga  server  tidak  perlu  menunggu  client  untuk melakukan permintaan (request) data terbaru.</p>

<p><a href="http://signalr.net/">SignalR</a> selain digunakan untuk pengembangan aplikasi web, juga bisa digunakan untuk platform lainnya seperti desktop (console dan windows form) ataupun mobile (windows phone, android dan iOS).</p>

<!-- more -->


<p><a href="http://signalr.net/">SignalR</a> menyediakan API yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau pun sebaliknya. Proses memanggil method secara remote ini dikenal dengan istilah <code>remote procedure call (RPC)</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-01.png">https://coding4ever.files.wordpress.com/2016/02/090216-01.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-02.png">https://coding4ever.files.wordpress.com/2016/02/090216-02.png</a>&#8221;></p>

<p style="text-align:center">Sumber - <a href=" http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr" target="_blank">Introduction to SignalR</a></p>


<p>Pada gambar di atas Hub merupakan class turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code> yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Sedangkan Hub Proxy merupakan objek proxy dari class Hub yang ada di server, sehingga method yang dipanggil melalui objek proxy ini otomatis akan dieksekusi secara remote (dijalankan di sisi server).</p>

<p>Sebagai contoh penggunaan SignalR, kita akan membuat aplikasi sederhana tanpa database. Di contoh ini kita akan melihat bagaimana cara server dan client berbagi data secara <code>real-time</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-03.png">https://coding4ever.files.wordpress.com/2016/02/090216-03.png</a>&#8221;></p>

<p>Aplikasi di atas terdiri dari tiga project yaitu :</p>

<h5>1. DemoSignalR.WinFormServer</h5>

<p>Project ini bertipe Windows Application yang berfungsi sebagai Server dari SignalR</p>

<h5>2. DemoSignalR.WinFormClient</h5>

<p>Project ini juga bertipe Windows Application yang berfungsi sebagai aplikasi Client</p>

<h5>3. DemoSignalR.Model</h5>

<p>Terakhir adalah project DemoSignalR.Model, project ini bertipe Class Library yang isinya hanya berupa class model. Objek dari class model inilah nantinya akan dishare secara <code>real-time</code> dari server ke client atau sebaliknya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-04.png">https://coding4ever.files.wordpress.com/2016/02/090216-04.png</a>&#8221;></p>

<p>Berikutnya kita akan bahas satu persatu ketiga project di atas.</p>

<h5>1. DemoSignalR.WinFormServer</h5>

<p>Project ini berfungsi sebagai server dari SignalR. Untuk menggunakan SignalR kita perlu menambahkan beberapa library yang bisa kita install via <a href="/blog/2014/03/11/nuget/">NuGet</a>.</p>

<p>Berikut adalah daftar paket <a href="/blog/2014/03/11/nuget/">NuGet</a> yang perlu kita tambahkan untuk project server.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-05.png">https://coding4ever.files.wordpress.com/2016/02/090216-05.png</a>&#8221;></p>

<h6>SignalR Hubs API</h6>

<p>SignalR Hubs API memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Proses memanggil method secara remote ini dikenal dengan istilah <code>remote procedure call (RPC)</code>.</p>

<p>Di server kita mendefinisikan method yang bisa langsung dipanggil oleh client, kemudian di dalam method ini akan memanggil method yang dijalankan oleh client. Contoh :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-06.png">https://coding4ever.files.wordpress.com/2016/02/090216-06.png</a>&#8221;></p>

<p>Coba perhatikan kode di atas, method <code>AddCustomer</code> adalah method server yang kita definisikan dan bisa langsung dipanggil oleh client. Nah di dalam method ini juga ada perintah <code>Clients.All.RefreshData(customer)</code>. Method <code>RefreshData</code> setelah property <code>All</code> adalah <code>dynamic method</code>, sehingga kita bebas menentukan sendiri nama methodnya. Dan jangan lupa method <code>RefreshData</code> ini juga harus kita definisikan ulang di bagian client.</p>

<p>Untuk menggunakan fitur SignalR Hubs API kita cukup membuat sebuah class yang merupakan turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code>. Misal kita membuat sebuah class dengan nama <code>ServerHub</code>, class ini harus turunan dari class <code>Microsoft.AspNet.SignalR.Hub</code>. Untuk kode lengkapnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-07.png">https://coding4ever.files.wordpress.com/2016/02/090216-07.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-08.png">https://coding4ever.files.wordpress.com/2016/02/090216-08.png</a>&#8221;></p>

<h6>Mendaftarkan SignalR</h6>

<p><a href="http://signalr.net/">SignalR</a> itu seperti parasit, tidak bisa hidup mandiri sehingga membutuhkan sebuah wadah (host) untuk kelangsungan hidupnya.
Ada beberapa cara yang bisa digunakan untuk menempatkan SignalR ke dalam wadahnya (host) yaitu :</p>

<ul>
<li>Hosting in Internet Information Services (IIS)</li>
<li>Hosting in a Console or Desktop application (Self hosting)</li>
<li>Hosting in a Windows Service (Self hosting)</li>
</ul>


<p>Karena contoh Server SignalR yang kita buat di atas bertipe Windows Application, berarti kita menggunakan cara <code>Self hosting</code> untuk meng-hostkan SignalR. Untuk mengaktifkan fitur <code>Self hosting</code> kita perlu menambahkan library <code>Microsoft.AspNet.SignalR.SelfHost</code> dan <code>Microsoft.AspNet.Cors</code>, kemudian kita buat class baru dengan nama <code>Startup</code>. Untuk kode lengkapnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-09.png">https://coding4ever.files.wordpress.com/2016/02/090216-09.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-10.png">https://coding4ever.files.wordpress.com/2016/02/090216-10.png</a>&#8221;></p>

<p>Setelah membuat class <code>ServerHub</code> dan <code>Startup</code> kita lanjutkan dengan form utama (FrmServer). Untuk desain UInya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-11.png">https://coding4ever.files.wordpress.com/2016/02/090216-11.png</a>&#8221;></p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<p><div><script src='https://gist.github.com/63391d8f511049303b20.js'></script>
<noscript><pre><code>using Microsoft.Owin.Hosting;

namespace DemoSignalR.WinFormServer
{
    public partial class FrmServer : Form
    {
        private IDisposable signalR { get; set; }
        private const string SERVER_URL = &quot;http://192.168.56.1:8282&quot;;

        public FrmServer()
        {
            InitializeComponent();
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            WriteToConsole(&quot;Starting server...&quot;);

            btnStart.Enabled = false;
            Task.Run(() =&gt; StartServer());
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// &lt;summary&gt;
        /// Starts the server and checks for error thrown when another server is already 
        /// running. This method is called asynchronously from Button_Start.
        /// &lt;/summary&gt;
        private void StartServer()
        {
            try
            {
                signalR = WebApp.Start(SERVER_URL);
            }
            catch (TargetInvocationException)
            {
                WriteToConsole(&quot;Server failed to start. A server is already running on &quot; + SERVER_URL);

                //Re-enable button to let user try to start server again
                this.Invoke((Action)(() =&gt; btnStart.Enabled = true));
                return;
            }

            this.Invoke((Action)(() =&gt; btnStop.Enabled = true));
            WriteToConsole(&quot;Server started at &quot; + SERVER_URL);
        }

        /// &lt;summary&gt;
        /// This method adds a line to the RichTextBoxConsole control, using Invoke if used
        /// from a SignalR hub thread rather than the UI thread.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;message&quot;&gt;&lt;/param&gt;
        internal void WriteToConsole(String message)
        {
            if (lstConsole.InvokeRequired)
            {
                this.Invoke((Action)(() =&gt;
                    WriteToConsole(message)
                ));

                return;
            }

            lstConsole.Items.Add(message);
        }       

        private void FrmServer_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (signalR != null)
            {
                signalR.Dispose();
            }
        }
    }
}
</code></pre></noscript></div>
</p>

<p>Setelah menyelesaikan project Server (DemoSignalR.WinFormServer) kita lanjutkan dengan project DemoSignalR.Model.</p>

<h5>2. DemoSignalR.Model</h5>

<p>Project ini hanya berisi class-class model. Data atau objek dari class-class model inilah yang nantinya akan dishare oleh server dan client secara <code>real-time</code>. Sebagai contoh di project ini kita hanya menambahkan satu class model yaitu <code>Customer</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-12.png">https://coding4ever.files.wordpress.com/2016/02/090216-12.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-13.png">https://coding4ever.files.wordpress.com/2016/02/090216-13.png</a>&#8221;></p>

<p>Class Customer di atas masuk dalam kategori  <code>complex types</code> sehingga objek dari class Customer tersebut tidak bisa langsung dikirim dari client ke server atau sebaliknya. Perlu diketahui untuk tipe-tipe data primitif seperti integer, long, boolean termasuk string (pengecualian untuk string bukan tipe data primitif) bisa langsung dikirim dari client ke server atau sebaliknya. Khusus untuk objek dari <code>complex types</code> perlu kita konversi terlebih dulu datanya dalam format json.</p>

<p>Ada dua cara yang bisa kita gunakan yaitu :</p>

<ul>
<li><p>Menambahkan atribut <code>JsonProperty</code> pada property class
<img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-14.png">https://coding4ever.files.wordpress.com/2016/02/090216-14.png</a>&#8221;></p></li>
<li><p>Atau mengkonversi secara langsung objek class ke dalam format json<br/>
<img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-15.png">https://coding4ever.files.wordpress.com/2016/02/090216-15.png</a>&#8221;></p></li>
</ul>


<p>Jadi terserah Anda mau menggunakan cara yang mana.</p>

<h5>3. DemoSignalR.WinFormClient</h5>

<p>Project terakhir yang akan kita bahas adalah <code>DemoSignalR.WinFormClient</code> ini adalah project untuk Client SignalR, tipenya juga sama seperti project Server SignalR yaitu Windows Application.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-16.png">https://coding4ever.files.wordpress.com/2016/02/090216-16.png</a>&#8221;></p>

<p>Untuk menggunakan SignalR di sisi client kita perlu menambahkan beberapa library yang bisa kita install via <a href="/blog/2014/03/11/nuget/">NuGet</a>.</p>

<p>Berikut adalah daftar paket <a href="/blog/2014/03/11/nuget/">NuGet</a> yang perlu kita tambahkan di project client.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-17.png">https://coding4ever.files.wordpress.com/2016/02/090216-17.png</a>&#8221;></p>

<p>Untuk kode lengkapnya seperti berikut :</p>

<p><div><script src='https://gist.github.com/ded6ca2911696e0b752e.js'></script>
<noscript><pre><code>using Microsoft.AspNet.SignalR.Client;
using DemoSignalR.Model;

namespace DemoSignalR.WinFormClient
{
    public partial class FrmClient : Form
    {
        private const string SERVER_URL = &quot;http://192.168.56.1:8282&quot;;

        private HubConnection hubConnection;
        private IHubProxy hubProxy;

        public FrmClient()
        {
            InitializeComponent();

            InisialisasiListView();

            hubConnection = new HubConnection(SERVER_URL);
            
            // membuat objek proxy dari class hub yang ada di server
            hubProxy = hubConnection.CreateHubProxy(&quot;ServerHub&quot;);

            // set mode listen untuk method RefreshData
            // method RefreshData sebelumnya harus didefinisikan di server
            hubProxy.On&lt;Customer&gt;(&quot;RefreshData&quot;, (customer) =&gt; RefreshData(customer));
            ConnectAsync();
        }

        private void RefreshData(Customer customer)
        {
            lvwCustomer.Invoke(new MethodInvoker(() =&gt; FillToListView(customer)));
        }

        /// &lt;summary&gt;
        /// Creates and connects the hub connection and hub proxy.
        /// &lt;/summary&gt;
        private async void ConnectAsync()
        {
            try
            {
                await hubConnection.Start();
                btnSave.Enabled = true;
            }
            catch
            {
                MessageBox.Show(&quot;Unable to connect to server: Start server before connecting clients.&quot;);
                return;
            }

        }

        // pengaturan propery listview
        private void InisialisasiListView()
        {
            lvwCustomer.View = System.Windows.Forms.View.Details;
            lvwCustomer.FullRowSelect = true;
            lvwCustomer.GridLines = true;

            lvwCustomer.Columns.Add(&quot;No.&quot;, 30, HorizontalAlignment.Center);
            lvwCustomer.Columns.Add(&quot;Customer Id&quot;, 70, HorizontalAlignment.Left);
            lvwCustomer.Columns.Add(&quot;Company Name&quot;, 150, HorizontalAlignment.Left);
            lvwCustomer.Columns.Add(&quot;Contact Name&quot;, 155, HorizontalAlignment.Left);
        }

        // method untuk menampilkan data customer ke listview
        private void FillToListView(Customer customer)
        {
            int noUrut = lvwCustomer.Items.Count + 1;

            ListViewItem item = new ListViewItem(noUrut.ToString());
            item.SubItems.Add(customer.CustomerId);
            item.SubItems.Add(customer.CompanyName);
            item.SubItems.Add(customer.ContactName);

            lvwCustomer.Items.Add(item);
        }

        private void FrmClient_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (hubConnection != null)
            {
                hubConnection.Stop();
                hubConnection.Dispose();
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            var customer = new Customer
            {
                CustomerId = txtCustomerId.Text,
                CompanyName = txtCompanyName.Text,
                ContactName = txtContactName.Text
            };

            // invoking a server function: 
            hubProxy.Invoke(&quot;AddCustomer&quot;, customer);
        }
    }
}
</code></pre></noscript></div>
</p>

<p>Dan hasilnya adalah seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/02/090216-03.png">https://coding4ever.files.wordpress.com/2016/02/090216-03.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoSignalR">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr">Introduction to SignalR</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/tutorial-getting-started-with-signalr">Getting Started with SignalR 2</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/tutorial-high-frequency-realtime-with-signalr">High-Frequency Realtime with SignalR 2</a></li>
<li><a href="http://www.asp.net/signalr">Learn About ASP.NET SignalR</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menghilangkan Tab Main Report Pada CrystalReportViewer]]></title>
    <link href="http://coding4ever.net/blog/2016/01/27/menghilangkan-tab-main-report-pada-crystalreportviewer/"/>
    <updated>2016-01-27T15:00:58+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/27/menghilangkan-tab-main-report-pada-crystalreportviewer</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg">https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg</a>&#8221; width=&#8221;120&#8221; height=&#8221;100&#8221;>Bagi Anda penggemar Crystal Reports .NET tentu sudah tidak asing lagi dengan tab <code>Main Report</code> yang tampil pada saat menampilkan laporan. Bagi sebagian orang seperti saya <em>tab</em> ini lumayan mengganggu karena biasanya report yang kita buat adalah report tunggal (report yang tidak me-link kehalaman yang lain).</p>

<p>Masih bingung ? Coba lihat gambar berikut.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-01.png">https://coding4ever.files.wordpress.com/2016/01/270116-01.png</a>&#8221;></p>

<p>Ada beberapa cara untuk menghilangkan tab tersebut, bisa dengan membuat sebuah <em>method biasa</em> atau dengan membuat <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx"><em>extension method</em></a>.</p>

<h5>Method biasa</h5>

<p>Nah cara pertama adalah dengan membuat sebuah method, misal dengan nama <code>RemoveMainTab</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-02.png">https://coding4ever.files.wordpress.com/2016/01/270116-02.png</a>&#8221;></p>

<p>kemudian method di atas kita panggil setelah pengesetan nilai property <code>ReportSource</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-03.png">https://coding4ever.files.wordpress.com/2016/01/270116-03.png</a>&#8221;></p>

<h5>Extension method</h5>

<p><a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">Extension method</a> adalah salah satu fitur yang ada dalam bahasa pemrograman .NET yang memungkinkan kita untuk menambahkan  method baru dari sebuah type seperti class tanpa harus membuat turunan dari type tesebut.</p>

<p>Contoh class <code>CrystalReportViewer</code>  aslinya tidak mempunyai method <code>RemoveMainTab</code> tetapi dengan adanya fitur  <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">extension method</a> kita bisa menambahkan method baru tanpa harus membuat turunan dari class <code>CrystalReportViewer</code> atau merubah secara langsung class <code>CrystalReportViewer</code>.</p>

<p>Untuk membuat <a href="https://msdn.microsoft.com/en-us//library/bb383977.aspx">extension method</a> kita harus menambahkan class baru misal dengan nama <code>CrystalReportViewerExtension</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-04.png">https://coding4ever.files.wordpress.com/2016/01/270116-04.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-05.png">https://coding4ever.files.wordpress.com/2016/01/270116-05.png</a>&#8221;></p>

<p>kemudian classnya harus static, setelah itu kita tambahkan method <code>RemoveMainTab</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-06.png">https://coding4ever.files.wordpress.com/2016/01/270116-06.png</a>&#8221;></p>

<p>Nah coba perhatikan method <code>RemoveMainTab</code> di atas, selain harus <code>static</code> parameternya juga harus ditambahkan keyword <code>this</code>.</p>

<p>Jika berhasil objek dari class <code>CrystalReportViewer</code> akan ketambahan method baru dengan nama <code>RemoveMainTab</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-07.png">https://coding4ever.files.wordpress.com/2016/01/270116-07.png</a>&#8221;></p>

<p>Terakhir kita cek reportnya apakah tab Main Report sudah hilang ?</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/270116-08.png">https://coding4ever.files.wordpress.com/2016/01/270116-08.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/RemoveMainReportTabOnCRViewer">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Laporan Crystal Reports .NET Dengan Model Data-Push Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2/"/>
    <updated>2016-01-24T15:25:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg">https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg</a>&#8221; width=&#8221;120&#8221; height=&#8221;100&#8221;>Melanjutkan pembahasan tentang bagaimana cara mendesain laporan menggunakan Crystal Reports‎ .NET tanpa terhubung langsung ke database dengan memanfaatkan objek ADO.NET DataSet atau yang dikenal dengan istilah <a href="/blog/2015/04/12/membuat-laporan-crystal-reports-net-dengan-model-data-push/">Push model</a>.</p>

<!-- more -->


<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-01.png">https://coding4ever.files.wordpress.com/2016/01/240116-01.png</a>&#8221;></p>

<p>Jika pada postingan <a href="/blog/2015/04/12/membuat-laporan-crystal-reports-net-dengan-model-data-push/">sebelumnya</a> kita hanya menampilkan data dari sebuah tabel maka untuk <a href="/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2/">postingan</a> kali ini kita menampilkan data dari tiga buah tabel yang saling berhubungan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-02.png">https://coding4ever.files.wordpress.com/2016/01/240116-02.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-03.png">https://coding4ever.files.wordpress.com/2016/01/240116-03.png</a>&#8221;></p>

<p>Persiapan tool-tool yang akan digunakan :</p>

<ol>
<li><a href="http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs#d-community">Visual Studio Community 2013</a>, Anda bisa saja menggunakan Visual Studio .NET versi sebelumnya (2010, 2012)</li>
<li><a href="/blog/categories/nuget/">NuGet</a>, untuk memudahkan dalam menambahkan library pihak ketiga. Adapun library pihak ketiga yang digunakan dalam sample ini adalah <a href="/blog/categories/dapper-net/">Dapper .NET</a> dan <a href="http://www.nuget.org/packages/System.Data.SQLite.Core/">System.Data.SQLite Core</a></li>
<li><a href="http://scn.sap.com/docs/DOC-7824">Crystal Reports SP 13</a></li>
<li>Database <a href="http://www.sqlite.org/">SQLite</a></li>
</ol>


<p>Setelah semua tool yang dibutuhkan tersedia kita lanjutkan dengan pembuatan project :</p>

<ol>
<li><p>Buat project baru dengan type WinForm</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-04.png">https://coding4ever.files.wordpress.com/2016/01/240116-04.png</a>&#8221;></p></li>
<li><p>Tambahkan empat folder baru masing-masing dengan nama DataSet, Model, Repository dan Report</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-05.png">https://coding4ever.files.wordpress.com/2016/01/240116-05.png</a>&#8221;></p></li>
</ol>


<p>Folder DataSet digunakan untuk mengelompokkan item-item DataSet yang berfungsi sebagai tabel temporary, folder Model untuk mengelompokkan class-class model atau entity, folder <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository</a> untuk mengelompokkan class-class akses database dan terakhir folder Report untuk mengelompokkan item-item Crystal Reports.</p>

<h5>Class Model/Entity</h5>

<p>Untuk menerapkan konsep OOP (Object-oriented programming) dalam pemrograman database kita perlu membuat sebuah class yang disebut dengan istilah class Model atau Entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari membuat class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row dari tabel menjadi kumpulan objek (object collection).</p>

<p>Pemetaan bisa dilakukan secara manual atau bisa juga secara otomatis dengan menggunakan tool-tool ORM dari pihak ketiga seperti <a href="/blog/categories/dapper-net/">Dapper .NET</a> dan <a href="](/blog/categories/entity-framework/">Entity Framework</a>. Untuk contoh kali ini kita menggunakan <a href="/blog/categories/dapper-net/">Dapper .NET</a>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-06.png">https://coding4ever.files.wordpress.com/2016/01/240116-06.png</a>&#8221;></p>

<p>Setelah memahami apa itu class model dan bagaimana proses pemetaan record ke objek terjadi, langkah berikutnya adalah menambahkan class model <em>Category, Product</em> dan <em>Supplier</em> yang mempunyai struktur sama persis dengan rancangan tabel di atas.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-07.png">https://coding4ever.files.wordpress.com/2016/01/240116-07.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-08.png">https://coding4ever.files.wordpress.com/2016/01/240116-08.png</a>&#8221;></p>

<h5>Class Repository</h5>

<p>Class <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">repository</a> adalah class yang bertugas untuk menangani operasi database yang dikenal dengan istilah operasi CRUD (Create, Read, Update dan Delete). Di dalam class inilah kita menuliskan perintah-perintah INSERT, UPDATE, DELETE dan SELECT.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-09.png">https://coding4ever.files.wordpress.com/2016/01/240116-09.png</a>&#8221;></p>

<p>Sebagai contoh kode dibawah ini akan melakukan mapping (pemetaan) baris/row tabel menjadi kumpulan objek (object collection) secara otomatis.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-10.png">https://coding4ever.files.wordpress.com/2016/01/240116-10.png</a>&#8221;></p>

<p>Kode di atas menggunakan <a href="/blog/categories/dapper-net/">Micro ORM</a> <a href="/blog/categories/dapper-net/">Dapper.NET</a> untuk melakukan mapping/pemetaan hasil query ke objek collection.</p>

<p>Kemudian kita panggil seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-11.png">https://coding4ever.files.wordpress.com/2016/01/240116-11.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-12.png">https://coding4ever.files.wordpress.com/2016/01/240116-12.png</a>&#8221;></p>

<h5>DataSet</h5>

<p>Dengan model <a href="/blog/categories/crystal-reports-net/">data Push</a> kita tidak langsung menghubungkan antara Crystal Reports dengan database, jadi sebagai solusinya kita menggunakan DataSet yang berfungsi sebagai tabel temporary dan menjadi sumber data bagi Crystal Reports.</p>

<p>Untuk menambahkan item DataSet, klik kanan Project -> Add -> New Item…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-13.png">https://coding4ever.files.wordpress.com/2016/01/240116-13.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-14.png">https://coding4ever.files.wordpress.com/2016/01/240116-14.png</a>&#8221;></p>

<p>Setelah menambahkan item DataSet (DsNorthwind), langkah berikutnya adalah menambahkan item DataTable</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-15.png">https://coding4ever.files.wordpress.com/2016/01/240116-15.png</a>&#8221;></p>

<p>Kemudian input informasi DataTablenya seperti gambar berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-16.png">https://coding4ever.files.wordpress.com/2016/01/240116-16.png</a>&#8221;></p>

<p>Ulangi langkah sebelumnya untuk menambahkan DataTable lainnya.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-17.png">https://coding4ever.files.wordpress.com/2016/01/240116-17.png</a>&#8221;></p>

<h5>Crystal Reports</h5>

<p>Crystal Reports adalah tool yang kita gunakan untuk membuat laporan. Untuk menambahkan item Crystal Report, klik kanan Project -> Add -> New Item…</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-18.png">https://coding4ever.files.wordpress.com/2016/01/240116-18.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-19.png">https://coding4ever.files.wordpress.com/2016/01/240116-19.png</a>&#8221;></p>

<p>Pilih “As a Blank Report” karena kita akan mendesain report secara manual.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-20.png">https://coding4ever.files.wordpress.com/2016/01/240116-20.png</a>&#8221;></p>

<p>Langkah berikutnya adalah menentukan sumber data yang kita arahkan ke item DataSet yang sudah kita buat pada langkah sebelumnya</p>

<p>Klik kanan Database Fields -> Database Expert &hellip;</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-21.png">https://coding4ever.files.wordpress.com/2016/01/240116-21.png</a>&#8221;></p>

<p>Pilih ADO.NET DataSet</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-22.png">https://coding4ever.files.wordpress.com/2016/01/240116-22.png</a>&#8221;></p>

<p>Drag satu-satu field ke section detail, kemudian dirapikan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-23.png">https://coding4ever.files.wordpress.com/2016/01/240116-23.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-24.png">https://coding4ever.files.wordpress.com/2016/01/240116-24.png</a>&#8221;></p>

<h5>Crystal Report Viewer</h5>

<p>Setelah semua persiapan selesai, langkah berikutnya adalah menambahkan Crystal Report Viewer yang berfungsi sebagai container untuk untuk menampilkan report.</p>

<p>Aktifkan form kemudian tambahkan Crystal Report Viewer</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-25.png">https://coding4ever.files.wordpress.com/2016/01/240116-25.png</a>&#8221;></p>

<p>Kemudian tambahkan kode berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-26.png">https://coding4ever.files.wordpress.com/2016/01/240116-26.png</a>&#8221;></p>

<p>Dari kode di atas kita bisa melihat tidak ada lagi kode untuk mengeset koneksi database dan perintah SQL yang akan dikirimkan. Cara ini sangat cocok digunakan ketika kita akan membangun sistem dengan arsitektur <a href="/blog/2012/02/01/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-1/">N-Tier</a>, di mana aplikasi klien sudah tidak terkoneksi lagi secara langsung ke database.</p>

<p>Jika kode di atas dijalankan, akan menghasilkan output seperti gambar di bawah ini.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2016/01/240116-27.png">https://coding4ever.files.wordpress.com/2016/01/240116-27.png</a>&#8221;></p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoCRPushModel2">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
