<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visual C# | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/visual-c-number/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-07-21T07:04:51+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Repository Pattern Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/"/>
    <updated>2016-06-28T12:54:38+07:00</updated>
    <id>http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Melanjutkan pembahasan <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a>, kali ini kita akan membahas salah satu manfaat menggunakan <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a>. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<!-- more -->


<p>Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository<T> generic/umum sebagai berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-01.png">https://coding4ever.files.wordpress.com/2016/06/280616-01.png</a> %}</p>

<p>Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository<T>. Contoh interface ICategoryRepository dan IProductRepository.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-02.png">https://coding4ever.files.wordpress.com/2016/06/280616-02.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-03.png">https://coding4ever.files.wordpress.com/2016/06/280616-03.png</a> %}</p>

<p>Sebagai contoh kita akan membuat aplikasi menggunakan database <a href="https://northwinddatabase.codeplex.com/">Northwind</a>, dengan menggunakan <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.</p>

<p>{% gist 3ce54c2191c532665f2e19c09abd901b %}</p>

<p>Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit <code>kode</code> yang perlu kita ubah. Desain struktur seperti ini disebut <a href="https://en.wikipedia.org/wiki/Loose_coupling">lousley coupled</a>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-04.png">https://coding4ever.files.wordpress.com/2016/06/280616-04.png</a> %}</p>

<p>Pada gambar di atas deklarsi objek <code>categoryRepository</code> tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep <a href="http://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to interfaces</a>), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.</p>

<p>Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepository.cs">CategoryRepository</a> di atas menggunakan <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> dengan <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> lain yang lebih ringan misal <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Dapper .NET</a>. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama <a href="https://github.com/k4m4r82/RepositoryPattern2/blob/master/src/Northwind.Repository.Service/CategoryRepositoryDapper.cs">CategoryRepositoryDapper</a> kemudian mengganti implementasi classnya di sisi client. Mudah bukan :-)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-05.png">https://coding4ever.files.wordpress.com/2016/06/280616-05.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-061.png">https://coding4ever.files.wordpress.com/2016/06/280616-061.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-07.png">https://coding4ever.files.wordpress.com/2016/06/280616-07.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-08.png">https://coding4ever.files.wordpress.com/2016/06/280616-08.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/06/280616-09.png">https://coding4ever.files.wordpress.com/2016/06/280616-09.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat User Function Library Pada Crystal Report .NET]]></title>
    <link href="http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net/"/>
    <updated>2016-03-26T12:45:06+07:00</updated>
    <id>http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg">https://coding4ever.files.wordpress.com/2015/04/sap-cr.jpg</a> 120 100 %}Crystal Report .NET selain memudahkan kita dalam mendesain report/laporan juga menyediakan puluhan fungsi yang siap pakai (built-in function) yang bisa mempercepat dalam pembuatan report/laporan. Tetapi ada waktunya ketika kita membutuhkan fungsi khusus yang tidak disediakan oleh Crystal Report .NET, dan kabar baiknya Crystal Report .NET juga menyediakan fasilitas untuk membuat fungsi tambahan yang dikenal dengan istilah <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a>.</p>

<!-- more -->


<p><a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> adalah class library .NET yang dibuat dengan beberapa aturan sebagai berikut :</p>

<ol>
<li>Nama project harus di beri prefix <code>CRUFL</code>. Misal kita ingin membuat project dengan nama CrystalReportHelper, nama project ini harus kita tambahkan prefix <code>CRUFL</code>, sehingga nama projectnya menjadi <strong>CRUFL</strong>CrystalReportHelper.</li>
<li>Project harus terdiri dari interface dan class konkret</li>
<li>Setiap interface harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code></li>
<li>Begitu juga class konkret harus mempunyai attribut COM yang mempunya tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code></li>
<li>Mengaktifkan pilihan <code>Register for COM interop</code> (Project -> Properties -> Build)</li>
<li>Menginstall hasil build ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a></li>
</ol>


<p>Oke kita langsung saja, kita awali dengan membuat User Function Library Class Library.</p>

<h5>Membuat UFL Class Library</h5>

<ol>
<li><p>Klik menu File ->New -> Project â€¦</p></li>
<li><p>Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-01.png">https://coding4ever.files.wordpress.com/2016/03/260316-01.png</a> %}</p>

<p>Nama project harus diberi prefix <code>CRUFL</code></p></li>
<li><p>Setelah project berhasil dibuat, klik kanan nama project -> properties</p></li>
<li><p>Klik tab Build, kemudian aktifkan pilihan <code>Register for COM interop</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-02.png">https://coding4ever.files.wordpress.com/2016/03/260316-02.png</a> %}</p>

<p>Mengaktifkan pilihan <code>Register for COM interop</code> akan menyebabkan assembly secara otomatis diregister oleh utility regasm.exe, ketika project dibuild/compile. Jadi, kita tidak perlu menjalankan regasm.exe secara manual via command prompt.</p></li>
</ol>


<p>Setelah project berhasil dibuat, kita akan menambahkan interface dan class konkretnya. Untuk contoh kali ini kita akan membuat fungsi terbilang yang biasanya digunakan dalam pembuatan aplikasi ritel.</p>

<p>Kita akan mulai dengan interface terlebih dulu.</p>

<h5>Membuat Interface dengan Attribut COM</h5>

<ol>
<li><p>Hapus class default (Class1)</p></li>
<li><p>Tambahkan sebuah interface dengan nama ITerbilang, kemudian tambahkan juga method abstractnya dengan nama TerbilangIndonesia</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-03.png">https://coding4ever.files.wordpress.com/2016/03/260316-03.png</a> %}</p></li>
<li><p>Kemudian tambahkan attribut COM</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-04.png">https://coding4ever.files.wordpress.com/2016/03/260316-04.png</a> %}</p>

<p>Attribut COM untuk interface terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>InterfaceType</code> dan <code>Guid</code>. Attribut ini perlu kita tambahkan agar class library yang kita buat bisa dikenali oleh Crystal Report.</p>

<p>Untuk mendapatkan nilai GUID, bisa menggunakan tool GUID yang sudah disediakan oleh Visual Studio .NET. Tool ini bisa diaktifkan melalui menu <code>Tools -&gt; Create GUID</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-05.png">https://coding4ever.files.wordpress.com/2016/03/260316-05.png</a> %}</p></li>
</ol>


<p>Setelah menyelesaikan pembuatan interface ITerbilang, kita lanjutkan dengan pembuatan class konkretnya.</p>

<h5>Membuat Class dengan Attribut COM</h5>

<ol>
<li><p>Tambahkan sebuah class dengan nama Terbilang. Class harus mengimplementasikan interface ITerbilang.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-06.png">https://coding4ever.files.wordpress.com/2016/03/260316-06.png</a> %}</p>

<p>Karena class Terbilang mengimplementasikan interface ITerbilang, maka class Terbilang wajib mendefinisikan ulang (override) method TerbilangIndonesia.</p></li>
<li><p>Kemudian tambahkan Attribut COM</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-07.png">https://coding4ever.files.wordpress.com/2016/03/260316-07.png</a> %}</p>

<p>Attribut COM untuk class  terdiri dari tiga nilai yaitu <code>ComVisible</code>, <code>ClassInterface</code> dan <code>Guid</code>. Setelah itu lengkapi kode method TerbilangIndonesia seperti berikut :</p>

<p>{% gist 34337e1baec374270fb4 %}</p></li>
</ol>


<p>Langkah berikutnya adalah mengeset Strong-Name key, ini adalah peraturan berikutnya yang harus kita ikuti agar class <a href="http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2009/05/22/creating-crystal-reports-user-function-libraries-ufl-with-visual-studio-net">User Function Library (UFL)</a> yang sudah kita buat bisa di daftarkan ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>.</p>

<h5>Mengeset Strong-Name key</h5>

<ol>
<li><p>Klik kanan project -> Properties</p></li>
<li><p>Aktifkan tab signing, kemudian aktifkan pilihan <code>Sign the assembly</code></p></li>
<li><p>Pada pilihan combo <code>Choose a string name key file</code>, pilih &lt;Newâ€¦> setelah itu akan tampil dialog <code>Create Strong Name Key</code> kemudian isikan nilai input key file name, misal dengan nama <code>CRUFLCrystalReportHelperKey</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-08.png">https://coding4ever.files.wordpress.com/2016/03/260316-08.png</a> %}</p></li>
<li><p>Terakhir lakukan proses Build/Compile, melalui menu Build -> Build Solution</p></li>
</ol>


<h5>Mendaftarkan Assembly ke GAC(Global Assembly Cache)</h5>

<p>Hasil build/compile dari project <code>CRUFLCrystalReportHelper</code>, akan menghasilkan file dengan ekstensi .dll atau yang dikenal dengan istilah file Assembly. File ini harus kita daftarkan terlebih dulu ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> agar bisa dikenali oleh Crystal Report.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-22.png">https://coding4ever.files.wordpress.com/2016/03/260316-22.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-23.png">https://coding4ever.files.wordpress.com/2016/03/260316-23.png</a> %}</p>

<p>Berikut langkah-langkah untuk mendaftarkan file Assembly ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a> :</p>

<ol>
<li><p>Aktifkan Visual Studio Command Prompt sesuai dengan versi Visual Studio .NET Anda</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-09.png">https://coding4ever.files.wordpress.com/2016/03/260316-09.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-10.png">https://coding4ever.files.wordpress.com/2016/03/260316-10.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-11.png">https://coding4ever.files.wordpress.com/2016/03/260316-11.png</a> %}</p></li>
<li><p>Gunakan tool <code>gacutil</code>, dengan format perintah seperti berikut</p>

<p>{% codeblock %}
gacutil -if <Assembly Name>
{% endcodeblock %}</p>

<p>contoh :</p>

<p>{% codeblock %}
gacutil -if CRUFLCrystalReportHelper.dll
{% endcodeblock %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-12.png">https://coding4ever.files.wordpress.com/2016/03/260316-12.png</a> %}</p>

<p>Jika berhasil akan tampil pesan <code>Assembly successfully added to the cache</code>.</p></li>
</ol>


<h5>Testing User Function Library</h5>

<p>Setelah menyelesaikan project CRUFLCrystalReportHelper dan mendaftarkannya ke <a href="https://en.wikipedia.org/wiki/Global_Assembly_Cache">GAC(Global Assembly Cache)</a>, kita akan menambahkan project baru dengan tipe WinForm Application.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-13.png">https://coding4ever.files.wordpress.com/2016/03/260316-13.png</a> %}</p>

<p>Setelah itu tambahkan juga item Crystal Report.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-14.png">https://coding4ever.files.wordpress.com/2016/03/260316-14.png</a> %}</p>

<p>Kemudian desain reportnya seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-15.png">https://coding4ever.files.wordpress.com/2016/03/260316-15.png</a> %}</p>

<p>Selanjutnya kita akan menambahkan formula baru dengan nama <code>terbilang</code>, caranya dengan mengklik kanan <code>Formula Fields</code> -> New â€¦</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-16.png">https://coding4ever.files.wordpress.com/2016/03/260316-16.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-17.png">https://coding4ever.files.wordpress.com/2016/03/260316-17.png</a> %}</p>

<p>Setelah itu akan tampil dialog Formula Workshop</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-18.png">https://coding4ever.files.wordpress.com/2016/03/260316-18.png</a> %}</p>

<p>Fungsi terbilang <code>TerbilangIndonesia</code> yang sudah kita buat masuk ke dalam kelompok <code>Additional Functions</code> -> <code>COM and .NET UFLs (u212com.dll)</code>. Fungsi ini membutuhkan parameter nominal yang nilainya kita isi dengan field total dari tabel Jual.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-19.png">https://coding4ever.files.wordpress.com/2016/03/260316-19.png</a> %}</p>

<p>Kemudian tambahkan formula <code>terbilang</code> ke dalam report.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-20.png">https://coding4ever.files.wordpress.com/2016/03/260316-20.png</a> %}</p>

<p>Terakhir kita running project, dan lihat hasil dari formula terbilangnya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/03/260316-21.png">https://coding4ever.files.wordpress.com/2016/03/260316-21.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoUFLforCR">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit of Work Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/"/>
    <updated>2016-02-24T10:24:29+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Kalau sudah membahas <a href="{{%20site.url%20}}/blog/categories/repository-pattern/">Repository Pattern</a> rasanya kurang <code>manteb</code> jika tidak membahas <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work Pattern</a>, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak <em>&ldquo;ibarat sop ayam tanpa garam,  rasanya hambar&rdquo;</em> he he :D</p>

<p><a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan.
Jadi cara kerja <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> ini mirip dengan salah satu fitur andalan <a href="https://en.wikipedia.org/wiki/Category:Database_management_systems">DBMS</a> yaitu <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</p>

<!-- more -->


<p><a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> sendiri merupakan salah satu pattern <code>kesukaan</code> Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a>. Bagi Anda yang sudah pernah mencoba <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a>.</p>

<h5>Membuat Interface dan Class Konkret Unit of Work</h5>

<p>Sama seperti pembahasan <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, impelmentasi <a href="{{%20site.url%20}}/blog/2016/02/24/unit-of-work-pattern/">Unit of Work Pattern</a> juga disarankan menggunakan <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>.</p>

<p>Berdasarkan contoh project <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita akan menambahkan interface baru dengan nama <code>IUnitOfWork</code>. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/240216-01.png">https://coding4ever.files.wordpress.com/2016/02/240216-01.png</a> %}</p>

<p>Setelah itu kita buatkan class konkretnya dengan nama <code>UnitOfWork</code>, dan ingat class ini harus mengimplementasikan interface <code>IUnitOfWork</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/240216-02.png">https://coding4ever.files.wordpress.com/2016/02/240216-02.png</a> %}</p>

<p>Terakhir kita lengkapi kode class UnitOfWork seperti berikut :</p>

<p>{% gist c21f5beec8837a044f37 %}</p>

<h5>Testing Class Unit of Work</h5>

<p>Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a> menggunakan <a href="{{%20site.url%20}}">Unit of Work Pattern</a>.</p>

<p>{% gist af692dd1962816fab878 %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/UnitOfWorkPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern]]></title>
    <link href="http://coding4ever.net/blog/2016/02/22/repository-pattern/"/>
    <updated>2016-02-22T06:04:00+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/22/repository-pattern</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/logo-net.png">https://coding4ever.files.wordpress.com/2016/02/logo-net.png</a> 130 130 %}Pada postingan kali ini saya ingin membahas salah satu <code>design pattern</code> yang sering digunakan ketika bekerja dengan database yaitu <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>.</p>

<p>Sebenarnya saya kurang tertarik untuk membahas tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a> karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx">Repository Pattern</a>, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di <a href="{{%20site.url%20}}">blog</a> ini, dari pada saya harus me-link ke halaman web yang lain.</p>

<!-- more -->


<p>Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>.</p>

<p>Pattern/pola  ini  digunakan  untuk  menerapkan  konsep <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separation  of  concern</a>  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>.</p>

<p><a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Dapper.NET</a>, <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> atau <a href="http://nhibernate.info/">NHibernate</a>. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.</p>

<p>Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-01.png">https://coding4ever.files.wordpress.com/2016/02/210216-01.png</a> %}</p>

<p>Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-021.png">https://coding4ever.files.wordpress.com/2016/02/210216-021.png</a> %}</p>

<p>Class  Repository biasanya mempunyai beberapa method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> lainnya bisa ditambahkan sesuai kebutuhan.</p>

<p>Secara umum ketika menggunakan <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a> setiap table akan dibuatkan class model dan repositorynya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-101.png">https://coding4ever.files.wordpress.com/2016/02/210216-101.png</a> %}</p>

<h5>Class Model/Entity</h5>

<p>Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.</p>

<p>Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-03.png">https://coding4ever.files.wordpress.com/2016/02/210216-03.png</a> %}</p>

<p>Berikut contoh class model/entity dari tabel Category</p>

<p>{% gist bd6bbf861f46082851c7 %}</p>

<h5>Membuat Interface</h5>

<p>Ketika berbicara tentang <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, kita tidak akan jauh-jauh dari yang namanya <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a>. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :</p>

<ul>
<li>Menambahkan data baru (Save)</li>
<li>Mengupdate/edit data (Update)</li>
<li>Menghapus data (Delete)</li>
<li>Menampilkan semua data (GetAll)</li>
</ul>


<p>Nah berdasarkan method standar di atas kita bisa membuat <a href="https://en.wikipedia.org/wiki/Interface_%28computing%29">interface</a> dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-04.png">https://coding4ever.files.wordpress.com/2016/02/210216-04.png</a> %}</p>

<p>Karakter <code>T</code> pada kode di atas merupakan indikator tipe generic, artinya nilai <code>T</code> tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.</p>

<p>Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-05.png">https://coding4ever.files.wordpress.com/2016/02/210216-05.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-061.png">https://coding4ever.files.wordpress.com/2016/02/210216-061.png</a> %}</p>

<p>Pada kode di atas, nilai <code>T</code> diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.</p>

<p>Penggunaan interface dalam menulis program, dikenal dengan istilah <a href="http://www.artima.com/lejava/articles/designprinciples.html">Programming  to  interface</a> yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  <a href="https://en.wikipedia.org/wiki/Loose_coupling">loosely-coupled</a>,  karena memungkinkan secara dinamis mengganti implementasi.</p>

<h5>Membuat Class Repository</h5>

<p>Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.</p>

<p>{% gist 05123acda602dd1bdc47 %}</p>

<p>{% gist d876476ffa10fa9855d2 %}</p>

<p>Kemudian lengkapi kodenya seperti berikut :</p>

<p>{% gist 4513c85d1541f0321204 %}</p>

<p>{% gist 87ba9b6fe43275c1f59c %}</p>

<h5>Membuat Class Context</h5>

<p>Di dalam <a href="{{%20site.url%20}}/blog/2016/02/22/repository-pattern/">Repository Pattern</a>, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.</p>

<p>Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan <a href="{{%20site.url%20}}/blog/categories/dapper-net/">Micro ORM Dapper.NET</a>. Jadi kita akan membuat interface dan class konkretnya dengan nama <code>IDapperContext</code> dan <code>DapperContext</code>. Berikut kode lengkapnya :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-07.png">https://coding4ever.files.wordpress.com/2016/02/210216-07.png</a> %}</p>

<p>{% gist 207b5c995e267c01d5c4 %}</p>

<h5>Menghubungkan Class Context dan Class Repository</h5>

<p>Karena class repository merupakan class yang bertanggungjawab untuk urusan <a href="XXX">CRUD</a>, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-08.png">https://coding4ever.files.wordpress.com/2016/02/210216-08.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/210216-09.png">https://coding4ever.files.wordpress.com/2016/02/210216-09.png</a> %}</p>

<h5>Testing Class Repository</h5>

<p>Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.</p>

<p>{% gist ac5519310e9154830f1c %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/RepositoryPattern">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengembangan Aplikasi Real-time Menggunakan SignalR Bagian #2]]></title>
    <link href="http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/"/>
    <updated>2016-02-15T07:49:15+07:00</updated>
    <id>http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/02/signalr.png">https://coding4ever.files.wordpress.com/2016/02/signalr.png</a> 120 100 %}Dasar-dasar penggunaan <a href="http://signalr.net/">SignalR</a>, sudah saya bahas dipostingan <a href="{{%20site.url%20}}/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/">pertama</a>. Jadi dipostingan <a href="{{%20site.url%20}}/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">kedua</a> ini saya hanya ingin berbagai source code lain contoh penggunaan <a href="http://signalr.net/">SignalR</a> yaitu source code untuk aplikasi pemesanan <a href="{{%20site.url%20}}/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/">tiket real-time</a>.</p>

<p>Cara kerja aplikasi ini masih sederhana sekali yaitu hanya mengirimkan informasi nomor kursi yang dipilih oleh user ke server, kemudian server akan melakukan pengiriman (push) nomor kursi yang dipesan kepada semua client yang sudah terkoneksi ke server.</p>

<!-- more -->


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/02/150216-01.png">https://coding4ever.files.wordpress.com/2016/02/150216-01.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoSignalR2">MENCOBA</a> :-)</p>
]]></content>
  </entry>
  
</feed>
