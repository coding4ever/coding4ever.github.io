<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visual C# | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/visual-c-number/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2014-11-06T12:06:50+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Entity Framework Part 8]]></title>
    <link href="http://coding4ever.net/blog/2014/06/08/entity-framework-part-8/"/>
    <updated>2014-06-08T10:21:10+07:00</updated>
    <id>http://coding4ever.net/blog/2014/06/08/entity-framework-part-8</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://coding4ever.files.wordpress.com/2014/03/entity_image.png">http://coding4ever.files.wordpress.com/2014/03/entity_image.png</a> 120 100 %}Melanjutkan kembali pembahasan tentang <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a>.</p>

<p>Misalkan kita mempunyai struktur tabel seperti gambar di bawah ini.</p>

<!-- more -->


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/11.png">https://coding4ever.files.wordpress.com/2014/06/11.png</a> %}</p>

<p>Jika kita buatkan class entity dari ketiga tabel di atas, class diagramnya akan terlihat seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/21.png">https://coding4ever.files.wordpress.com/2014/06/21.png</a> %}</p>

<p>Dari gambar class diagram di atas, kita bisa melihat bahwa class <code>Siswa</code>, <code>Guru</code> dan <code>Pegawai</code> mempunyai beberapa property yang sama yaitu <code>Jalan</code>, <code>Kota</code>, <code>Provinsi</code> dan <code>KodePos</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/31.png">https://coding4ever.files.wordpress.com/2014/06/31.png</a> %}</p>

<p>Untuk alasan desain class entity yang lebih baik sebaiknya kita pisahkan property <code>Jalan</code>, <code>Kota</code>, <code>Provinsi</code> dan <code>KodePos</code> ke dalam class tersendiri, misal dengan nama class <code>Alamat</code>, kemudian masing-masing class entity <code>Siswa</code>, <code>Guru</code> dan <code>Pegawai</code> menambahkan property baru dengan tipe <code>class Alamat</code>, sehingga class diagram kita akan menjadi seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/41.png">https://coding4ever.files.wordpress.com/2014/06/41.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/10.png">https://coding4ever.files.wordpress.com/2014/06/10.png</a> %}</p>

<p>Nah class baru (Alamat) inilah yang akan menjadi pembahasan kita pada postingan kali ini yang dikenal dengan istilah <code>Complex Types</code> atau <code>Value Types</code>.</p>

<p>Sejak awal <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> sudah mendukung <code>Complex Types</code> atau yang dikenal juga dengan istilah <code>value types</code>.</p>

<p><code>Complex Types</code> atau <code>value types</code> bisa digunakan sebagai tipe data dari sebuah property sehingga ada kemiripan dengan class entity biasa yang sudah kita kenal, yang disebut dengan istilah <code>entity types</code>.</p>

<p>Lalu di mana perbedaannya ?</p>

<p>Di dalam <a href="{{%20site.url%20}}/blog/categories/entity-framework/">Entity Framework</a> setiap <code>entity types</code> harus mempunyai <code>property key</code> sedangkan <code>complex types</code> tidak.</p>

<p>Contoh :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/51.png">https://coding4ever.files.wordpress.com/2014/06/51.png</a> %}</p>

<h3>Mendefinisikan Complex Types</h3>

<p>Setelah mengetahui perbedaan antara <code>entity types</code> dan <code>complex types</code> kita juga harus mengetahui aturan dalam membuat <code>complex types</code>.</p>

<p>Berikut aturan-aturan yang harus kita penuhi untuk membuat <code>complex types</code>.</p>

<ol>
<li><code>Complex types</code> tidak boleh mempunyai <code>property key</code>.</li>
<li>Semua property yang dimiliki <code>complex types</code> harus bertipe <a href="http://en.wikipedia.org/wiki/Primitive_data_type">primitif</a>.</li>
<li>Ketika digunakan sebagai tipe data oleh class lain, tidak boleh sebagai <code>collection type</code> harus <code>single
instance</code></li>
</ol>


<p>Contoh :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/62.png">https://coding4ever.files.wordpress.com/2014/06/62.png</a> %}</p>

<h3>Konfigurasi Mapping (pemetaan) Complex Types</h3>

<p>Untuk menyederhanakan contoh kode program, konfigurasi mapping (pemetaan) <code>complex types</code> di bawah ini menggunakan konfigurasi <a href="http://msdn.microsoft.com/en-us/data/jj591583.aspx">Data Annotations</a>. Saya sendiri lebih senang menggunakan konfigurasi <a href="http://msdn.microsoft.com/en-us/data/jj591617.aspx">Fluent API</a> dengan tujuan agar class entity kita tetap bersih dari atribut-atribut <a href="http://msdn.microsoft.com/en-us/data/jj591583.aspx">Data Annotations</a>.</p>

<p>Caranya adalah dengan mengedit class Alamat, kemudian menambahkan atribut <a href="http://msdn.microsoft.com/en-us/data/jj591583.aspx">Data Annotations</a></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/71.png">https://coding4ever.files.wordpress.com/2014/06/71.png</a> %}</p>

<p>Terakhir kita coba untuk mengakses property dengan tipe <code>complex types</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/81.png">https://coding4ever.files.wordpress.com/2014/06/81.png</a> %}</p>

<p>Jika kode di atas dijalankan, akan menghasilkan output seperti berikut :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2014/06/91.png">https://coding4ever.files.wordpress.com/2014/06/91.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/EntityFramework8">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMS Gateway Edisi .NET Part 1]]></title>
    <link href="http://coding4ever.net/blog/2014/05/10/sms-gateway-edisi-net-part-1/"/>
    <updated>2014-05-10T10:11:25+07:00</updated>
    <id>http://coding4ever.net/blog/2014/05/10/sms-gateway-edisi-net-part-1</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://coding4ever.files.wordpress.com/2014/05/sms_gateway.png">http://coding4ever.files.wordpress.com/2014/05/sms_gateway.png</a> %}Postingan pertama di <a href="{{%20site.url%20}}">domain</a> yang baru :), saya ingin membahas lagi tentang pembuatan aplikasi SMS Gateway. Alasannya sederhana karna salah satu artikel yang paling banyak dibaca di blog ini adalah artikel <a href="{{%20site.url%20}}/blog/2010/07/12/membuat-sms-gateway-itu-gampang-jangan-dipersulit/">Membuat Sms Gateway Itu Gampang, Jangan Dipersulit !!!</a>.</p>

<p>Jika pada artikel <a href="{{%20site.url%20}}/blog/2010/07/12/membuat-sms-gateway-itu-gampang-jangan-dipersulit/">Membuat Sms Gateway Itu Gampang, Jangan Dipersulit !!!</a>, kita menggunakan bahasa pemrograman VB 6, untuk postingan kali ini kita akan menggunakan bahasa pemrograman C#.</p>

<!-- more -->


<p>Untuk membaca dan mengirim sms kita akan menggunakan library <a href="http://www.nuget.org/packages/GSMComm/">GSMComm</a>, yang bisa diinstall via <a href="{{%20site.url%20}}/blog/categories/nuget/">NuGet</a>.</p>

<p>Sebelum lanjut kita lihat dulu fitur dari library <a href="http://www.nuget.org/packages/GSMComm/">GSMComm</a> :</p>

<ul>
<li>Manage SMS messages: Send, read, delete, store, import and export messages, get memory status, get/set SMSC.</li>
<li>Manage the phonebook: Create, find, delete, read, import and export phonebook entries, get memory status.</li>
<li>Manage the phone: Read general info, reset configuration, enter PIN</li>
<li>Supports notifications about new messages as well as forwarding them directly to the application.</li>
<li>Detect phone connection/disconnection.</li>
<li>Other SMS message variants also possible, such as alerts and notifications.</li>
<li>Support for Smart Messaging and related messages to create, locate and recombine concatenated text messages, and also to create operator logo messages.</li>
<li>Logging support with 4 levels to assist in troubleshooting.</li>
<li>Support for GSM 7-bit default alphabet and Unicode for the message text.</li>
<li>Supports some operator functions.</li>
<li>Remoting support for sending SMS messages.</li>
<li>SMS batch mode for faster sending of multiple messages.</li>
<li>Execution of custom commands that are not directly supported.</li>
</ul>


<p>Keren bukan untuk ukuran library gratis :)</p>

<p>Pada postingan bagian pertama ini kita hanya akan membahas perintah-perintah dasar yang dibutuhkan untuk membuat aplikasi SMS Gateway, seperti <code>koneksi ke device modem atau hp</code>, <code>membaca sms masuk</code>, dan <code>mengirim sms</code>.</p>

<h3>Membuat Project</h3>

<p>Project yang kita gunakan adalah project berbasis Windows Form.</p>

<p>{% img center <a href="http://coding4ever.files.wordpress.com/2014/05/1.png">http://coding4ever.files.wordpress.com/2014/05/1.png</a> %}</p>

<h3>Menambahkan Library <a href="http://www.nuget.org/packages/GSMComm/">GSMComm</a> via <a href="{{%20site.url%20}}/blog/categories/nuget/">NuGet</a></h3>

<ul>
<li><p>Klik kanan node References -> Manage NuGet Packages &hellip;</p>

<p>{% img center <a href="http://coding4ever.files.wordpress.com/2014/05/21.png">http://coding4ever.files.wordpress.com/2014/05/21.png</a> %}</p></li>
<li><p>Pada tab Online pilih nuget.org, pada kotak pencarian ketik <code>gsm</code>, kemudian klik tombol <code>Install</code>.</p>

<p>{% img center <a href="http://coding4ever.files.wordpress.com/2014/05/3.png">http://coding4ever.files.wordpress.com/2014/05/3.png</a> %}</p></li>
</ul>


<p>kemudian tunggu sampai proses instalasi selesai.</p>

<p>{% img center <a href="http://coding4ever.files.wordpress.com/2014/05/4.png">http://coding4ever.files.wordpress.com/2014/05/4.png</a> %}</p>

<p>Tutup dialog NuGet package, Kemudian cek node references, seharusnya ada empat library baru yang sudah ditambahkan yaitu <code>GSMCommServer</code>, <code>GSMCommShared</code>, <code>GSMCommunication</code> dan <code>PDUConverter</code>.</p>

<p>{% img center <a href="http://coding4ever.files.wordpress.com/2014/05/5.png">http://coding4ever.files.wordpress.com/2014/05/5.png</a> %}</p>

<p>Library <code>PDUConverter</code> bertanggung jawaban untuk melakukan proses <code>decoding</code> pesan sms, sedangkan yang bertugas untuk melakukan komunikasi ke modem atau hp adalah library <code>GSMCommunication</code>.</p>

<p>Untuk library <code>GSMCommServer</code> dan <code>GSMCommShared</code> hanya digunakan jika kita ingin mengaktifkan fitur <a href="{{%20site.url%20}}/blog/categories/dot-net-remoting/">.NET Remoting</a> untuk mengirim sms.</p>

<p>Setelah semua persiapan selesai, kita bisa langsung mencoba perintah-perintah dasar yang diperlukan untuk pembuatan aplikasi sms gateway.</p>

<h3>1. Konek ke device modem atau hp</h3>

<p>Untuk melakukan koneksi ke modem atau hp, ada beberapa tahapan yang harus kita lakukan :</p>

<ul>
<li>Membuat objek dari class GsmCommMain</li>
<li>Mendaftarkan method ke event <code>MessageReceived</code>, yang dikenal dengan istilah <a href="http://www.codeproject.com/Articles/11657/Understanding-Delegates-in-C">delegate</a>    method.</li>
<li>Memanggil method <code>Open</code>.</li>
</ul>


<p><strong>Membuat objek dari class GsmCommMain</strong></p>

<p>Misal kita akan membuat sebuah objek dari class GsmCommMain dengan nama <code>comm</code>, maka perintahnya yang digunakan adalah :</p>

<p>{% codeblock lang:c# %}
var port = &ldquo;COM1&rdquo;; // port yang digunakan menyesuaikan
var baudRate = 9600;
var timeout = 150;</p>

<p>var comm = new GsmCommMain(port, baudRate, timeout);
{% endcodeblock %}</p>

<p><strong>Mendaftarkan method ke event <code>MessageReceived</code> yang dikenal dengan istilah <a href="http://www.codeproject.com/Articles/11657/Understanding-Delegates-in-C">delegate</a>    method</strong></p>

<p>Salah satu fitur keren yang dimiliki oleh library <a href="http://www.nuget.org/packages/GSMComm/">GSMComm</a> adalah Event <code>MessageReceived</code>. Dengan adanya event ini kita tidak perlu menggunakan objek timer untuk mengecek apakah ada sms yang masuk.</p>

<p>Event ini tidak bisa kita akses secara langsung, yang perlu kita lakukan adalah membuat sebuah method kemudian mendaftarkannya ke event ini.</p>

<p>Contoh kita membuat sebuah method dengan nama <code>comm_MessageReceived</code>, method ini hanya akan menampilkan notifikasi sms masuk. Untuk selanjutnya method ini bisa kita kembangkan lagi, misal ketika ada sms masuk datanya langsung kita simpan ke database.</p>

<p>{% codeblock lang:c# %}
private void comm_MessageReceived(object sender, MessageReceivedEventArgs e)
{
    var obj = e.IndicationObject;</p>

<pre><code>if (obj is MemoryLocation)
{
    var loc = (MemoryLocation)obj;

    var msg = string.Format("New message received in storage \"{0}\", index {1}.",
                            loc.Storage, loc.Index);
    MessageBox.Show(msg);

    return;
}

if (obj is ShortMessage)
{
    var msg = (ShortMessage)obj;
    var pdu = comm.DecodeReceivedMessage(msg);

    MessageBox.Show("New message received");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Kemudian kita daftarkan ke event <code>MessageReceived</code> dengan perintah :</p>

<p>{% codeblock lang:c# %}
comm.MessageReceived += new MessageReceivedEventHandler(comm_MessageReceived);
{% endcodeblock %}</p>

<p>sehingga ketika ada sms yang masuk method <code>comm_MessageReceived</code> akan otomatis dipanggil.</p>

<p><strong>Memanggil method <code>Open</code></strong></p>

<p>Setelah langkah pertama dan kedua selesai dikerjakan kita bisa langsung memanggil method <code>Open</code> untuk melakukan koneksi ke modem atau hp.</p>

<p>{% codeblock lang:c# %}
comm.Open();</p>

<p>while (!comm.IsConnected())
{
    var msgResult = MessageBox.Show(this, &ldquo;No phone connected.&rdquo;, &ldquo;Connection setup&rdquo;,
                                        MessageBoxButtons.RetryCancel, MessageBoxIcon.Exclamation);</p>

<pre><code>if (msgResult == DialogResult.Cancel)
{
    comm.Close();
    return;
}
else
{
    comm.Close();
    comm.Open();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>2. Membaca SMS Masuk</h3>

<p>Method yang digunakan untuk membaca sms adalah method <code>ReadMessages</code>, method ini mempunyai dua parameter yaitu <code>PhoneMessageStatus</code> dan <code>Storage</code>.</p>

<p>Untuk <code>PhoneMessageStatus</code> pilihannya adalah : <code>ReceivedUnread</code>, <code>ReceivedRead</code>, <code>StoredUnsent</code>, <code>StoredSent</code> dan <code>All</code>. Sedangkan <code>Storage</code> pilihannya hanya dua yaitu : <code>SM</code> dan <code>ME</code>.</p>

<p>{% codeblock lang:c# %}  <br/>
private void btnBacaSMS_Click(object sender, EventArgs e)
{
    var messages = comm.ReadMessages(PhoneMessageStatus.All, PhoneStorageType.Sim);
    foreach (var message in messages)
    {
        var data = (SmsDeliverPdu)message.Data;</p>

<pre><code>    var phoneNumber = data.OriginatingAddress;
    var msg = data.UserDataText;
    var tanggal = string.Format("{0:yyyy/MM/dd}", data.SCTimestamp.ToDateTime());
    var jam = string.Format("{0:HH:mm:ss}", data.SCTimestamp.ToDateTime());

    lstDaftarSMS.Items.Add(string.Format("{0}, {1}, {2}, {3}", tanggal, jam, phoneNumber, msg));
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>3. Mengirim SMS</h3>

<p>Untuk mengirim sms kita menggunakan method <code>SendMessage</code> yang membutuhkan objek <a href="http://en.wikipedia.org/wiki/Protocol_data_unit">pdu</a>.</p>

<p>{% codeblock lang:c# %}
private void btnKirimSMS_Click(object sender, EventArgs e)
{
    var msg = txtPesan.Text;
    var phoneNumber = txtNoHp.Text;</p>

<pre><code>var pdu = new SmsSubmitPdu(msg, phoneNumber, string.Empty);
comm.SendMessage(pdu);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Kode di atas hanya bisa mengirim sms dengan jumlah karakter maksimal 160 karakter, jika ingin lebih kita harus merevisi kode di atas dengan menambahkan beberapa method baru yaitu <code>CreateConcatMessage</code> dan <code>SendMultiple</code>.</p>

<p>{% codeblock lang:c# %}
private OutgoingSmsPdu[] CreateConcatMessage(string message, string number)
{
    OutgoingSmsPdu[] pdus = null;</p>

<pre><code>try
{
    pdus = SmartMessageFactory.CreateConcatTextMessage(message, number);
}
catch
{
    return null;
}

return pdus;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock lang:c# %}
private void SendMultiple(OutgoingSmsPdu[] pdus)
{
    var num = pdus.Length;</p>

<pre><code>try
{
    // Send the created messages
    comm.EnableTemporarySmsBatchMode();

    foreach (OutgoingSmsPdu pdu in pdus)
    {
        comm.SendMessage(pdu);
    }
}
catch
{
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Terakhir kode yang ada di method <code>btnKirimSMS_Click</code> juga harus di revisi :</p>

<p>{% codeblock lang:c# %}
private void btnKirimSMS_Click(object sender, EventArgs e)
{
    var msg = txtPesan.Text;
    var phoneNumber = txtNoHp.Text;</p>

<pre><code>if (msg.Length &gt; 160)
{
    var pdus = CreateConcatMessage(msg, phoneNumber);
    if (pdus != null) SendMultiple(pdus);
}
else
{
    var pdu = new SmsSubmitPdu(msg, phoneNumber, string.Empty);
    comm.SendMessage(pdu);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Yuph akhirnya selesai juga.</p>

<p>Selamat <a href="https://github.com/k4m4r82/SMSGatewayNET1">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework Part 7]]></title>
    <link href="http://coding4ever.net/blog/2014/04/11/entity-framework-part-7/"/>
    <updated>2014-04-11T10:52:57+07:00</updated>
    <id>http://coding4ever.net/blog/2014/04/11/entity-framework-part-7</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://coding4ever.files.wordpress.com/2014/03/entity_image.png">http://coding4ever.files.wordpress.com/2014/03/entity_image.png</a> 120 100 %}Masih melanjutkan <a href="{{%20site.url%20}}/blog/2014/04/03/entity-framework-part-6/">postingan</a> sebelumnya, setelah data pembelian berhasil disimpan tentu suatu saat kita ingin menampilkan kembali data tersebut.</p>

<p>Sedikit berbeda dengan postingan yang di<a href="{{%20site.url%20}}/blog/2014/04/01/entity-framework-part-5/">sini</a>, saya sudah mendemokan bagaimana <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework </a>melakukan query dari sebuah tabel.</p>

<p>Sedangkan pada postingan kali ini, kita akan melihat bagaimana <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> melakukan query dari beberapa tabel sekaligus yang saling berhubungan.</p>

<p>Misal kita ingin menampilkan datanya dengan format seperti berikut :</p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2014/04/16.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/16.jpg" alt="1" /></a></p>

<p>Maka ada dua proses yang perlu kita lakukan :</p>

<ol>
<li><p> Mengambil data header (beli dan supplier)</p></li>
<li><p> Mengambil data detail (item beli dan barang)</p></li>
</ol>


<p>Untuk poin pertama, jika menggunakan query konvensional, perintah SQL SELECTnya seperti berikut :</p>

<p>{% codeblock lang:mysql %}
SELECT Beli.Nota, Beli.Tanggal, Supplier.SupplierID, Supplier.NamaSupplier
FROM Supplier INNER JOIN Beli ON Supplier.SupplierID = Beli.SupplierID
WHERE Beli.Nota = &lsquo;N001&rsquo;
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/21.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/21.jpg" alt="2" /></a></p>

<p>Sedangkan poin kedua perintahnya seperti berikut :</p>

<p>{% codeblock lang:mysql %}
SELECT Barang.BarangID, Barang.NamaBarang, ItemBeli.Jumlah, ItemBeli.HargaBeli, ItemBeli.HargaJual
FROM Barang INNER JOIN ItemBeli ON Barang.BarangID = ItemBeli.BarangID
WHERE ItemBeli.Nota = &lsquo;N001&rsquo;
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/31.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/31.jpg" alt="3" /></a></p>

<p>Selanjutnya kita tinggal implementasikan dalam bentuk kode program (menggunakan ADO.NET) dengan membuat dua buah method masing-masing dengan nama <code>GetPembelianUsingADONET</code> dan <code>GetDetailPembelian</code>.</p>

<p>Method <code>GetPembelianUsingADONET</code> akan mengeksekusi query pertama sedangkan query kedua akan dieksekusi oleh method <code>GetDetailPembelian</code>.</p>

<p>{% codeblock lang:c# %}
private static Beli GetPembelianUsingADONET(string nota)
{
    Beli beli = null;</p>

<pre><code>using (var conn = GetOpenConnection())
{
    // ambil data header
    var sql = @"SELECT Beli.Nota, Beli.Tanggal, Supplier.SupplierID, Supplier.NamaSupplier
                FROM Supplier INNER JOIN Beli ON Supplier.SupplierID = Beli.SupplierID
                WHERE Beli.Nota = @1";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", nota);

        using (var dtr = cmd.ExecuteReader())
        {
            if (dtr.Read())
            {
                // mapping record ke objek supplier
                var supplier = new Supplier
                {
                    SupplierID = dtr["SupplierID"] is DBNull ? 0 : (int)dtr["SupplierID"],
                    NamaSupplier = dtr["NamaSupplier"] is DBNull ? string.Empty : (string)dtr["NamaSupplier"]
                };

                // mapping record ke objek beli
                beli = new Beli();
                beli.Nota = dtr["Nota"] is DBNull ? string.Empty : (string)dtr["Nota"];
                beli.Tanggal = dtr["Tanggal"] is DBNull ? DateTime.MinValue : (DateTime)dtr["Tanggal"];
                beli.Supplier = supplier; // hubungkan objek supplier dan beli
            }
        }
    }

    if (beli != null)
    {
        // ambil data detail
        var daftarItemBeli = GetDetailPembelian(nota, conn);
        beli.ItemBelis = daftarItemBeli; // hubungkan objek beli dg detail beli
    }
}

return beli;
</code></pre>

<p>}</p>

<p>private static IList<ItemBeli> GetDetailPembelian(string nota, SqlConnection conn)
{
    var daftarItemBeli = new List<ItemBeli>();</p>

<pre><code>var sql = @"SELECT Barang.BarangID, Barang.NamaBarang, ItemBeli.Jumlah, ItemBeli.HargaBeli, ItemBeli.HargaJual
            FROM Barang INNER JOIN ItemBeli ON Barang.BarangID = ItemBeli.BarangID
            WHERE ItemBeli.Nota = @1";
using (var cmd = new SqlCommand(sql, conn))
{
    cmd.Parameters.AddWithValue("@1", nota);

    using (var dtr = cmd.ExecuteReader())
    {
        while (dtr.Read())
        {
            // mapping record ke objek barang
            var barang = new Barang
            {
                BarangID = dtr["BarangID"] is DBNull ? string.Empty : (string)dtr["BarangID"],
                NamaBarang = dtr["NamaBarang"] is DBNull ? string.Empty : (string)dtr["NamaBarang"]
            };

            // mapping record ke objek item beli
            var itemBeli = new ItemBeli
            {
                Barang = barang, // hubungkan barang dg item beli
                Jumlah = dtr["Jumlah"] is DBNull ? 0 : (int)dtr["Jumlah"],
                HargaBeli = dtr["HargaBeli"] is DBNull ? 0 : (int)dtr["HargaBeli"],
                HargaJual = dtr["HargaJual"] is DBNull ? 0 : (int)dtr["HargaJual"]
            };

            daftarItemBeli.Add(itemBeli);
        }
    }
}

return daftarItemBeli;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Untuk mencoba kode di atas gunakan kode berikut :</p>

<p>{% codeblock lang:c# %}
static void Main(string[] args)
{
    var beli = GetPembelianUsingADONET(&ldquo;N001&rdquo;);
    Console.WriteLine(&ldquo;Nota : {0}\nTanggal : {1}\nSupplier : {2}&rdquo;,
                        beli.Nota, beli.Tanggal, beli.Supplier.NamaSupplier);</p>

<pre><code>Console.WriteLine("\nItem Beli :");

// ekstrak item beli
foreach (var item in beli.ItemBelis)
{
    Console.WriteLine("Barang : {0}, Jumlah : {1}, Harga Jual : {2}",
                        item.Barang.NamaBarang, item.Jumlah, item.HargaJual);
}

Console.WriteLine("\nPress any key to exit ...");
Console.ReadKey();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Jika kode di atas dijalankan akan menghasilkan output seperti <a href="http://coding4ever.files.wordpress.com/2014/04/16.jpg">gambar pertama</a>.</p>

<p>Trus bagaimana dengan <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> ?</p>

<p>Tool <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> seperti <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a>, dibuat untuk memudahkan hidup kita sebagai pengembang aplikasi. Hidup ini sudah susah kenapa harus dipersulit :D</p>

<p>Oke, kita akan tulis ulang kode di atas menggunakan <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a>.</p>

<p>{% codeblock lang:c# %}
private static Beli GetPembelianUsingEF(string nota)
{
    Beli beli;</p>

<pre><code>using (var db = new RetailContext())
{
    beli = db.Belis
             .Include(bl =&gt; bl.Supplier)
             .Include(bl =&gt; bl.ItemBelis.Select(ib =&gt; ib.Barang))
             .Where(bl =&gt; bl.Nota == nota)
             .SingleOrDefault();
}

return beli;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Gimana lebih simple bukan ? :)</p>

<p>Dan ingat &hellip;</p>

<blockquote><p>Semakin sedikit kode yang kita tulis, semakin sedikit juga <strong><em>bug</em></strong> yang dihasilkan dan semakin sedikit kode yang kita tulis, semakin mudah juga untuk melakukan <strong><em>maintenance</em></strong>.</p></blockquote>

<p>Selamat <a href="https://github.com/k4m4r82/EntityFramework7">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework Part 6]]></title>
    <link href="http://coding4ever.net/blog/2014/04/03/entity-framework-part-6/"/>
    <updated>2014-04-03T10:17:31+07:00</updated>
    <id>http://coding4ever.net/blog/2014/04/03/entity-framework-part-6</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://coding4ever.files.wordpress.com/2014/03/entity_image.png">http://coding4ever.files.wordpress.com/2014/03/entity_image.png</a> 120 100 %}Pada <a href="{{%20site.url%20}}/blog/2014/04/01/entity-framework-part-5/">postingan</a> sebelumnya kita sudah membahas bagaimana <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> menangani sebuah tabel tunggal. Pada kenyataannya hampir semua aplikasi database menggunakan lebih dari satu tabel dan tentunya diantara tabel ini juga mempunyai hubungan (relasi).</p>

<p>Di postingan kali ini kita akan membahas bagaimana <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> menangani dua buah tabel yang saling berhubungan yaitu <em>Beli</em> dan <em>ItemBeli.</em></p>

<!-- more -->


<p><a href="http://coding4ever.files.wordpress.com/2014/04/4.png"><img src="http://coding4ever.files.wordpress.com/2014/04/4.png" alt="4" /></a></p>

<p>Untuk tabel Supplier dan Barang kita abaikan dulu walaupun kedua tabel ini juga terhubung ke tabel Beli dan ItemBeli.</p>

<p>Proses pembelian di dalam sebuah aplikasinya biasa masuk ke dalam modul transaksi. Ada sebuah proses yang penting ketika akan menyimpan data berupa transaksi, apalagi jika data tersebut saling berhubungan.</p>

<p>Proses ini dikenal dengan istilah <em><a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>,</em> dan salah satu poin pentingnya adalah <a href="http://en.wikipedia.org/wiki/Atomicity_%28database_systems%29"><em>atomic</em></a>, yaitu beberapa perintah dianggap sebagai satu kesatuan. Kalau satu gagal, yang lain harus dibatalkan. Contoh pada saat transaksi pembelian proses yang terjadi adalah :</p>

<ol>
<li><p> Insert 1 kali ke tabel Beli</p></li>
<li><p> Insert n kali ke tabel ItemBeli</p></li>
<li><p> Menambah stok barang (tidak di bahas di postingan ini), karena bisa juga diselesaikan dengan database <a href="http://en.wikipedia.org/wiki/Database_trigger">trigger</a></p></li>
</ol>


<p>Ketika insert ke tabel ItemBeli gagal, maka tabel Belinya juga harus di batalkan (undo), klo enggak ya datanya jadi enggak konsisten dong, ada nota Beli yang enggak ada item belinya.</p>

<p>Nah kabar gembiranya <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> secara default sudah mendukung <em><a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</em></p>

<p>Untuk membuat class entity Barang dan ItemBeli berikut class mappingnya sudah tidak dibahas lagi disini, karena saya menggunakan <a href="http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d">Entity Framework Power Tools</a>.</p>

<p>Sebelum kita lanjut ke pembahasan kode program, kita lihat dulu class entity diagram ke empat tabel di atas.<a href="http://coding4ever.files.wordpress.com/2014/04/12.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/12.jpg" alt="1" /></a></p>

<p><strong>Independent association dan Foreign key association</strong></p>

<p>Hubungan dua buah entity atau lebih dikenal dengan istilah asosiasi (association). Asosiasi ini mencakup <em>one-to-one, one-to-many</em> dan <em>many-to-many</em>.</p>

<p>Dari sisi pemrograman Entity Framework, diperkenalkan lagi dua jenis asosiasi. Yang pertama dikenal dengan istilah <a href="http://www.ladislavmrnka.com/2011/05/foreign-key-vs-independent-associations-in-ef-4/"><em>independent association</em></a>, asosiasi ini sudah diperkenalkan sejak Entity Framework versi awal, dan untuk memudahkan kita sebagai pengembang aplikasi, mulai Entity Framework versi 4, tim Entity Framework menambahkan asosiasi kedua yaitu <em><a href="http://www.ladislavmrnka.com/2011/05/foreign-key-vs-independent-associations-in-ef-4/">foreign key association</a></em>.</p>

<p>Dari kedua asosiasi di atas, implementasi <em>foreign key association</em> lebih disarankan dibandingkan <em>independent association</em>, sehingga untuk kode Entity Framework di bawah ini kita juga menggunakan <em>foreign key association</em> :D.</p>

<p>Untuk informasi lebih lanjut mengenai <em>Independent association</em> dan <em>Foreign key association</em> bisa merujuk ke referensi berikut :</p>

<ul>
<li><p><a href="http://it-ebooks.info/book/1619/">Entity Framework 4 in Action</a></p></li>
<li><p><a href="http://it-ebooks.info/book/613/">Programming Entity Framework, 2nd Edition</a></p></li>
<li><p><a href="http://www.ladislavmrnka.com/2011/05/foreign-key-vs-independent-associations-in-ef-4/">Foreign key vs. Independent associations in EF 4</a></p></li>
</ul>


<p>Seperti <a href="{{%20site.url%20}}/blog/2014/04/01/entity-framework-part-5/">postingan</a> sebelumnya, saya akan menuliskan 2 versi kode sebagai bahan perbandingan yaitu menggunakan ADO.NET secara langsung dan Entity Framework.</p>

<p>Nama method yang akan kita gunakan untuk menambahkan data beli berikut itemnya adalah <em>AddPembelian</em>. Method ini akan menambahkan data di dua tabel sekaligus (Beli dan ItemBeli), sehingga sangat disarankan menggunakan database <em><a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</em></p>

<p>Untuk ADO.NET fitur <em><a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a></em> harus ditambahkan secara manual, sedangkan Entity Framework secara default sudah menerapkan fitur <em><a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>.</em></p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static int AddPembelianUsingADONET(Beli beli)
{
    var result = 0;</p>

<pre><code>using (var conn = GetOpenConnection())
{

    try
    {
        // mulai transaksi
        var transaction = conn.BeginTransaction();

        var sql = @"INSERT INTO Beli (Nota, SupplierID, Tanggal, Keterangan)
                    VALUES (@1, @2, @3, @4)";

        // insert ke tabel beli
        using (var cmd = new SqlCommand(sql, conn, transaction))
        {
            cmd.Parameters.AddWithValue("@1", beli.Nota);
            cmd.Parameters.AddWithValue("@2", beli.SupplierID);
            cmd.Parameters.AddWithValue("@3", beli.Tanggal);
            cmd.Parameters.AddWithValue("@4", beli.Keterangan);

            result = cmd.ExecuteNonQuery();
        }

        sql = @"INSERT INTO ItemBeli (Nota, BarangID, Jumlah, HargaBeli, HargaJual)
                VALUES (@1, @2, @3, @4, @5)";

        // insert ke tabel item beli sebanyak n item
        foreach (var item in beli.ItemBelis)
        {
            using (var cmd = new SqlCommand(sql, conn, transaction))
            {
                cmd.Parameters.AddWithValue("@1", beli.Nota);
                cmd.Parameters.AddWithValue("@2", item.BarangID);
                cmd.Parameters.AddWithValue("@3", item.Jumlah);
                cmd.Parameters.AddWithValue("@4", item.HargaBeli);
                cmd.Parameters.AddWithValue("@5", item.HargaJual);

                result = cmd.ExecuteNonQuery();
            }
        }                    

        // transaksi selesai
        // simpan perubahan secara permanen
        transaction.Commit();

        result = 1; // status transaksi berhasil
    }
    catch
    {
        result = 0;
    }
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework</strong></p>

<p>Menggunakan Entity Framework ternyata sangat mudah, coba lihat kode berikut setara dengan kode ADO.NET di atas :)</p>

<p>{% codeblock lang:c# %}
private static int AddPembelianUsingEF(Beli beli)
{
    var result = 0;</p>

<pre><code>using (var db = new RetailContext())
{
    try
    {
        db.Entry(beli).State = EntityState.Added;
        db.SaveChanges();

        result = 1;
    }
    catch
    {
    }
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
// buat objek item beli (3 objek)
var item1 = new ItemBeli
{
    BarangID = &ldquo;BB-7421&rdquo;,
    Jumlah = 5,
    HargaBeli = 54,
    HargaJual = 60
};</p>

<p>var item2 = new ItemBeli
{
    BarangID = &ldquo;BB-8107&rdquo;,
    Jumlah = 7,
    HargaBeli = 101,
    HargaJual = 110
};</p>

<p>var item3 = new ItemBeli
{
    BarangID = &ldquo;BK-M18B-44&rdquo;,
    Jumlah = 10,
    HargaBeli = 540,
    HargaJual = 693
};</p>

<p>// buat objek beli
var beli = new Beli
{
    Nota = &ldquo;N001&rdquo;,
    SupplierID = 3,
    Tanggal = DateTime.Today,
    Keterangan = &ldquo;Transaksi beli menggunakan Entity Framework&rdquo;
};</p>

<p>// tambahkan item beli ke objek beli
beli.ItemBelis.Add(item1);
beli.ItemBelis.Add(item2);
beli.ItemBelis.Add(item3);</p>

<p>var result = AddPembelianUsingEF(beli);</p>

<p>Console.WriteLine(&ldquo;\nStatus transaksi : {0}&rdquo;, result == 1 ? &ldquo;Sukses&rdquo; : &ldquo;Gagal&rdquo;);
{% endcodeblock %}</p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/13.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/13.jpg" alt="1" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/2.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/2.jpg" alt="2" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/3.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/3.jpg" alt="3" /></a></p>

<p>Tabel Beli terhubung dengan tabel Supplier, sehingga Supplier dengan ID 3 harus sudah ada di tabel Supplier. Begitu juga dengan table ItemBeli yang terhubung dengan tabel Barang, sehingga Barang dengan ID BB-7421, BB-8107 dan BK-M18B-44 juga harus ada di tabel Barang.</p>

<p>Selamat <a href="https://github.com/k4m4r82/EntityFramework6">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework Part 5]]></title>
    <link href="http://coding4ever.net/blog/2014/04/01/entity-framework-part-5/"/>
    <updated>2014-04-01T09:53:25+07:00</updated>
    <id>http://coding4ever.net/blog/2014/04/01/entity-framework-part-5</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://coding4ever.files.wordpress.com/2014/03/entity_image.png">http://coding4ever.files.wordpress.com/2014/03/entity_image.png</a> 120 100 %}Setelah selesai melakukan mapping, baik secara <a href="{{%20site.url%20}}/blog/2014/03/21/entity-framework-part-2/">manual</a> atau menggunakan tool seperti <a href="{{%20site.url%20}}/blog/2014/03/26/entity-framework-part-3/">ADO.NET Entity Data Model Designer</a> dan <a href="{{%20site.url%20}}/blog/2014/03/27/entity-framework-part-4/">Entity Framework Power Tools</a>, kita bisa langsung mencoba method-method dasar aplikasi database yang dikenal dengan istilah method <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> seperti Save, Update, Delete dan Get.</p>

<p>Ingat tujuan kita menggunakan <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> seperti <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a> dalam pengembangan aplikasi database adalah agar kita tidak  lagi berhubungan secara langsung dengan database berikut objek-objeknya seperti tabel, view dan objek database lainnya, sehingga bisa lebih fokus ke aturan bisnis dari aplikasi yang sedang dikembangkan.</p>

<!-- more -->


<p>Dalam paradigma <a href="http://www.google.co.id/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCYQFjAA&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObject-oriented_programming&amp;ei=YOk0U--cLsS_rgfhqICQBg&amp;usg=AFQjCNHESpDSeAXQKCKWdjccXfDywTnxtg&amp;bvm=bv.63808443,d.bmk">OOP</a>, semuanya adalah objek. Saya, Anda, Customer, Supplier, Product adalah objek.</p>

<p>Ada beberapa keuntungan yang kita dapatkan ketika berhubungan dengan class dan objek :</p>

<ul>
<li><p>Persistence ignorance - Kita tidak perlu lagi khawatir bagaimana data disimpan ataupun media yang digunakan.</p></li>
<li><p>Strong typing - Kita tidak perlu lagi melakukan konversi secara manual untuk setiap tipe data kolom/field yang ada di dalam sebuah tabel ketika ingin mengambil nilainya.</p></li>
<li><p>Compile-time checking - Class mempunyai daftar property, jika kita mengetikkan nama property yang salah, secara langsung akan mendapatkan kompilasi error. Sehingga tidak perlu menjalankan aplikasi untuk mengetahui kesalahan penulisan kode.</p></li>
<li><p>Ease of development - Editor kode seperti Visual Studio mempunyai fitur IntelliSense untuk mempercepat proses pengembangan aplikasi. IntelliSense memberikan petunjuk kepada pengembang aplikasi tentang daftar property, event dan method yang dimiliki oleh sebuah class. Tetapi jika kita menggunakan DataSet atau DataReader, fitur IntelliSense jadi tidak berfungsi karena penulisan nama field/kolom berbasis teks (string).</p></li>
</ul>


<p>Di bawah ini kita akan membandingkan pembuatan method-method <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> menggunakan library ADO.NET secara langsung dan menggunakan Entity Framework.</p>

<p>Adapun sebagai targetnya adalah tabel Supplier yang diwakili oleh class Supplier.</p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/1.jpg"><img src="http://coding4ever.files.wordpress.com/2014/04/1.jpg" alt="1" /></a></p>

<p><strong>1. Save - Untuk menambahkan data baru</strong></p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static int SaveUsingADONET(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"INSERT INTO Supplier (NamaSupplier, Jalan, Kota)
                VALUES (@1, @2, @3)";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", supplier.NamaSupplier);
        cmd.Parameters.AddWithValue("@2", supplier.Jalan);
        cmd.Parameters.AddWithValue("@3", supplier.Kota);

        result = cmd.ExecuteNonQuery();
    }
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)
</strong></p>

<p>{% codeblock lang:c# %}
private static int SaveUsingEF(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var db = new RetailContext())
{
    db.Entry(supplier).State = EntityState.Added;
    db.SaveChanges();

    result = 1;
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Dari dua method di atas, kita bisa melihat bahwa method Save menggunakan Entity Framework (EF) lebih sederhana sehingga mengurangi kesalahan dalam penulisan kode dibandingkan dengan menggunakan ADO.NET secara langsung. Kita tidak lagi menuliskan perintah SQL INSERT yang masih berbasis teks (string).</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
// buat objek supplier
var supplier = new Supplier
{
    NamaSupplier = &ldquo;Morgan Bike Accessories&rdquo;,
    Jalan = &ldquo;6387 Scenic Avenue&rdquo;,
    Kota = &ldquo;Bothell&rdquo;
};</p>

<p>var result1 = SaveUsingADONET(supplier);
var result2 = SaveUsingEF(supplier);
{% endcodeblock %}</p>

<p><strong>2. Update - Untuk mengupdate data
</strong></p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static int UpdateUsingADONET(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"UPDATE Supplier SET NamaSupplier = @1, Jalan = @2, Kota = @3
                WHERE SupplierID = @4";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", supplier.NamaSupplier);
        cmd.Parameters.AddWithValue("@2", supplier.Jalan);
        cmd.Parameters.AddWithValue("@3", supplier.Kota);
        cmd.Parameters.AddWithValue("@4", supplier.SupplierID);

        result = cmd.ExecuteNonQuery();
    }
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)
</strong></p>

<p>{% codeblock lang:c# %}
private static int UpdateUsingEF(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var db = new RetailContext())
{
    db.Entry(supplier).State = EntityState.Modified;
    db.SaveChanges();

    result = 1;
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
// buat objek supplier
var supplier = new Supplier
{
    SupplierID = 34,
    NamaSupplier = &ldquo;Morgan Bike Accessories&rdquo;,
    Jalan = &ldquo;6387 Scenic Avenue&rdquo;,
    Kota = &ldquo;Bothell&rdquo;
};</p>

<p>var result1 = UpdateUsingADONET(supplier);
var result2 = UpdateUsingEF(supplier);
{% endcodeblock %}</p>

<p><strong>3. Delete - Untuk menghapus data
</strong></p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static int DeleteUsingADONET(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"DELETE FROM Supplier
                WHERE SupplierID = @1";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", supplier.SupplierID);

        result = cmd.ExecuteNonQuery();
    }
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)
</strong></p>

<p>{% codeblock lang:c# %}
private static int DeleteUsingEF(Supplier supplier)
{
    var result = 0;</p>

<pre><code>using (var db = new RetailContext())
{
    db.Entry(supplier).State = EntityState.Deleted;
    db.SaveChanges();

    result = 1;
}

return result;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
// buat objek supplier
var supplier = new Supplier
{
    SupplierID = 34
};</p>

<p>var result1 = DeleteUsingADONET(supplier);
var result2 = DeleteUsingEF(supplier);
{% endcodeblock %}</p>

<p><strong>4. GetAll - Untuk menampilkan semua data
</strong></p>

<p>Method ini akan mengembalikan kumpulan objek supplier, karena objek suppliernya bisa lebih dari satu maka dibutuhkan sebuah wadah (container) untuk menampung kumpulan objek supplier.</p>

<p>Untuk contoh di bawah ini saya menggunakan objek <a href="http://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx">List</a> untuk menampung kumpulan objek supplier.</p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static IList<Supplier> GetAllUsingADONET()
{
    var daftarSupplier = new List<Supplier>();</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"SELECT SupplierID, NamaSupplier, Jalan, Kota
                FROM Supplier
                ORDER BY NamaSupplier";

    using (var cmd = new SqlCommand(sql, conn))
    {
        using (var dtr = cmd.ExecuteReader())
        {
            while (dtr.Read())
            {
                var supplier = new Supplier
                {
                    SupplierID = dtr["SupplierID"] is DBNull ? 0 : (int)dtr["SupplierID"],
                    NamaSupplier = dtr["NamaSupplier"] is DBNull ? string.Empty : (string)dtr["NamaSupplier"],
                    Jalan = dtr["Jalan"] is DBNull ? string.Empty : (string)dtr["Jalan"],
                    Kota = dtr["Kota"] is DBNull ? string.Empty : (string)dtr["Kota"]
                };

                daftarSupplier.Add(supplier);
            }
        }
    }
}

return daftarSupplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var noUrut = 1;</p>

<p>var daftarSupplier = GetAllUsingADONET();
foreach (var supplier in daftarSupplier)
{
    Console.WriteLine(&ldquo;{0}. {1}&rdquo;, noUrut, supplier.NamaSupplier);</p>

<pre><code>noUrut++;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)</strong></p>

<p>Tidak seperti ADO.NET yang masih menggunakan perintah SQL SELECT untuk mengakses data yang ada di dalam database, Entity Framework menggunakan <a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a>.</p>

<p>{% codeblock lang:c# %}
private static IList<Supplier> GetAllUsingEF()
{
    var daftarSupplier = new List<Supplier>();</p>

<pre><code>using (var db = new RetailContext())
{
    daftarSupplier = db.Suppliers
                       .OrderBy(s =&gt; s.NamaSupplier)
                       .ToList();
}

return daftarSupplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var noUrut = 1;</p>

<p>var daftarSupplier = GetAllUsingEF();
foreach (var supplier in daftarSupplier)
{
    Console.WriteLine(&ldquo;{0}. {1}&rdquo;, noUrut, supplier.NamaSupplier);</p>

<pre><code>noUrut++;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>5. GetByName - Untuk menampilkan data berdasarkan nama Supplier
</strong></p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static IList<Supplier> GetByNameUsingADONET(string namaSupplier)
{
    var daftarSupplier = new List<Supplier>();</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"SELECT SupplierID, NamaSupplier, Jalan, Kota
                FROM Supplier
                WHERE NamaSupplier LIKE @1
                ORDER BY NamaSupplier";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", "%" + namaSupplier + "%");

        using (var dtr = cmd.ExecuteReader())
        {
            while (dtr.Read())
            {
                var supplier = new Supplier
                {
                    SupplierID = dtr["SupplierID"] is DBNull ? 0 : (int)dtr["SupplierID"],
                    NamaSupplier = dtr["NamaSupplier"] is DBNull ? string.Empty : (string)dtr["NamaSupplier"],
                    Jalan = dtr["Jalan"] is DBNull ? string.Empty : (string)dtr["Jalan"],
                    Kota = dtr["Kota"] is DBNull ? string.Empty : (string)dtr["Kota"]
                };

                daftarSupplier.Add(supplier);
            }
        }
    }
}

return daftarSupplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var noUrut = 1;</p>

<p>var daftarSupplier = GetByNameUsingADONET(&ldquo;new&rdquo;);
foreach (var supplier in daftarSupplier)
{
    Console.WriteLine(&ldquo;{0}. {1}&rdquo;, noUrut, supplier.NamaSupplier);</p>

<pre><code>noUrut++;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)
</strong></p>

<p>{% codeblock lang:c# %}
private static IList<Supplier> GetByNameUsingEF(string namaSupplier)
{
    var daftarSupplier = new List<Supplier>();</p>

<pre><code>using (var db = new RetailContext())
{
    daftarSupplier = db.Suppliers
                       .Where(s =&gt; s.NamaSupplier.Contains(namaSupplier))
                       .OrderBy(s =&gt; s.NamaSupplier)
                       .ToList();
}

return daftarSupplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var noUrut = 1;</p>

<p>var daftarSupplier = GetByNameUsingEF(&ldquo;new&rdquo;);
foreach (var supplier in daftarSupplier)
{
    Console.WriteLine(&ldquo;{0}. {1}&rdquo;, noUrut, supplier.NamaSupplier);</p>

<pre><code>noUrut++;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Dan method terakhir adalah &hellip;</p>

<p><strong>6. GetByID - Untuk menampilkan data berdasarkan Supplier ID
</strong></p>

<p>Method ini hanya mengembalikan satu objek supplier jika ditemukan, selain itu akan mengembalikan nilai null.</p>

<p><strong>ADO.NET</strong></p>

<p>{% codeblock lang:c# %}
private static Supplier GetByIDUsingADONET(int supplierID)
{
    Supplier supplier = null;</p>

<pre><code>using (var conn = GetOpenConnection())
{
    var sql = @"SELECT SupplierID, NamaSupplier, Jalan, Kota
                FROM Supplier
                WHERE SupplierID = @1";

    using (var cmd = new SqlCommand(sql, conn))
    {
        cmd.Parameters.AddWithValue("@1", supplierID);

        using (var dtr = cmd.ExecuteReader())
        {
            if (dtr.Read())
            {
                supplier = new Supplier();
                supplier.SupplierID = dtr["SupplierID"] is DBNull ? 0 : (int)dtr["SupplierID"];
                supplier.NamaSupplier = dtr["NamaSupplier"] is DBNull ? string.Empty : (string)dtr["NamaSupplier"];
                supplier.Jalan = dtr["Jalan"] is DBNull ? string.Empty : (string)dtr["Jalan"];
                supplier.Kota = dtr["Kota"] is DBNull ? string.Empty : (string)dtr["Kota"];

            }
        }
    }
}

return supplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var supplier = GetByIDUsingADONET(19);
if (supplier != null)
    Console.WriteLine(&ldquo;{0}&rdquo;, supplier.NamaSupplier);
{% endcodeblock %}</p>

<p><strong>Entity Framework (EF)
</strong></p>

<p>{% codeblock lang:c# %}
private static Supplier GetByIDUsingEF(int supplierID)
{
    Supplier supplier = null;</p>

<pre><code>using (var db = new RetailContext())
{
    supplier = db.Suppliers
                 .Where(s =&gt; s.SupplierID == supplierID)
                 .SingleOrDefault();
}

return supplier;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Contoh penggunaan :</p>

<p>{% codeblock lang:c# %}
var supplier = GetByIDUsingEF(19);
if (supplier != null)
    Console.WriteLine(&ldquo;{0}&rdquo;, supplier.NamaSupplier);
{% endcodeblock %}</p>

<p>Semua contoh method di atas masih menggunakan access modifier <em>private static</em> karena saya melakukan testingnya langsung di method Main (static void Main). Idealnya semua method di atas disimpan di dalam sebuah class dengan access modifier <em>public</em>.</p>

<p>Dan kesimpulan akhirnya adalah, dengan menggunakan <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> seperti <a href="http://msdn.microsoft.com/en-us/data/aa937723">Entity Framework</a>, kita bisa dengan mudah membuat standarisasi penulisan kode untuk mengakses database karena memiliki pola yang sama, yg membedakan hanya nilai Statenya saja.</p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/1.png"><img src="http://coding4ever.files.wordpress.com/2014/04/1.png" alt="1" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/2.png"><img src="http://coding4ever.files.wordpress.com/2014/04/2.png" alt="2" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2014/04/3.png"><img src="http://coding4ever.files.wordpress.com/2014/04/3.png" alt="3" /></a></p>

<p>Selamat <a href="https://github.com/k4m4r82/EntityFramework5">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
</feed>
