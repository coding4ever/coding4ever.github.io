<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-07-23T08:40:54+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Online Backup Database]]></title>
    <link href="http://coding4ever.net/blog/2016/01/06/online-backup-database/"/>
    <updated>2016-01-06T14:42:52+07:00</updated>
    <id>http://coding4ever.net/blog/2016/01/06/online-backup-database</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2016/01/google-drive.png">https://coding4ever.files.wordpress.com/2016/01/google-drive.png</a> 100 100 %}<a href="{{%20site.url%20}}/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/">Backup database lokal</a> saja ternyata tidak cukup, paling tidak itu yang saya rasakan ketika salah satu klien saya hardisk servernya <code>tewas</code> :-D. Padahal dulu itu saya sudah menyarankan untuk menggunakan UPS, tapi katanya &ldquo;<em>kalo pake UPS, fitur  powerON di biosnya jadi gak jalan&hellip;</em>&rdquo; dan saya maklum karena servernya memang ON 24 jam dan memang tidak ada petugas khusus yang mengONkan servernya kalo pas lagi OFF.
Jadi kita memang dituntut untuk memberikan solusi untuk masalah ini, terutama solusi yang murah meriah he he :-D</p>

<!-- more -->


<p>Salah satu solusinya adalah dengan memanfaatkan media penyimpanan online yang memang sudah terbukti handal dan gratis yaitu <code>Google Drive</code>. Dengan <code>Google Drive</code> limit ukuran file yang bisa diupload adalah maksimal 5GB.</p>

<p>Kita langsung saja berikut adalah langkah-langkah untuk mengakses layanan/API dari <code>Google Drive</code> atau layanan Google lainnya.</p>

<h5>1. Membuat Client id</h5>

<p>Untuk membuat client id, kita bisa langsung mengakses link <a href="https://console.developers.google.com/">Google Developer Console</a> kemudian login menggunakan email google Anda</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-19.png">https://coding4ever.files.wordpress.com/2016/01/060116-19.png</a> %}</p>

<h5>2. Membuat project</h5>

<p>Klik menu Select a project -> Create a projectâ€¦</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-01.png">https://coding4ever.files.wordpress.com/2016/01/060116-01.png</a> %}</p>

<p>Kemudian isikan nama project, misal <code>OnlineBackup</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-02.png">https://coding4ever.files.wordpress.com/2016/01/060116-02.png</a> %}</p>

<h5>3. Mengaktifkan Google API</h5>

<p>Dari menu dashboard klik link <code>Use Google APIs</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-03.png">https://coding4ever.files.wordpress.com/2016/01/060116-03.png</a> %}</p>

<p>Secara default google sudah mengaktifkan beberapa API yang bisa kita akses dari aplikasi</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-04.png">https://coding4ever.files.wordpress.com/2016/01/060116-04.png</a> %}</p>

<p>Dari daftar api di atas kita belum menemukan API untuk mengakses google drive, sehingga API ini harus kita aktifkan secara manual dengan mengklik link <code>Google APIs</code> kemudian di kotak pencarian ketik <code>Drive API</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-05.png">https://coding4ever.files.wordpress.com/2016/01/060116-05.png</a> %}</p>

<p>Selanjutnya klik link <code>Drive API</code> kemudian pilih <code>Enable API</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-06.png">https://coding4ever.files.wordpress.com/2016/01/060116-06.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-07.png">https://coding4ever.files.wordpress.com/2016/01/060116-07.png</a> %}</p>

<h5>4. Membuat Credential</h5>

<p>Sebelum layanan/API <code>Google Drive</code> ini bisa kita akses, kita harus membuat <code>Credential</code> terlebih dulu sebagai otorisasi bahwa kita adalah memang orang yang berhak untuk mengakses layanan ini.</p>

<p>Untuk membuat <code>Credential</code> klik menu <code>Credentials</code> kemudian pilih <code>OAuth client ID</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-08.png">https://coding4ever.files.wordpress.com/2016/01/060116-08.png</a> %}</p>

<p>Kemudian klik menu <code>Configure consent screen</code></p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-09.png">https://coding4ever.files.wordpress.com/2016/01/060116-09.png</a> %}</p>

<p>Isikan datanya sesuai kebutuhan</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-10.png">https://coding4ever.files.wordpress.com/2016/01/060116-10.png</a> %}</p>

<p>Selanjutnya kita akan menentukan jenis aplikasi yang akan mengakses API ini. Untuk contoh disini saya menggunakan aplikasi console.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-11.png">https://coding4ever.files.wordpress.com/2016/01/060116-11.png</a> %}</p>

<p>Jika berhasil kita akan mendapatkan informasi <code>client ID</code> dan <code>client secret</code>. Informasi ini akan kita gunakan untuk mengakses layanan/API google drive ataupun layanan lainnya.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-12.png">https://coding4ever.files.wordpress.com/2016/01/060116-12.png</a> %}</p>

<h5>5. Menyiapkan folder backup</h5>

<p>Langkah berikutnya adalah masuk ke <code>Google Drive</code> kemudian kita buat folder untuk backup database. Setelah membuat folder ini, kita perlu mengetahui informasi <code>folder id</code> dari folder backup ini. Untuk mendapatkan <code>folder id</code> bisa kita lihat dibagian address bar.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-13.png">https://coding4ever.files.wordpress.com/2016/01/060116-13.png</a> %}</p>

<p>Pada gambar di atas <code>folder id</code> dari folder <code>Backup Database</code> ini adalah : <code>0B5aEAoHOGHqkelgzM2cxVncxNGM</code>.</p>

<p>Simpan informasi ini karena akan digunakan untuk mengakses folder Backup Database ini via aplikasi.</p>

<h5>6. Membuat aplikasi client</h5>

<p>Untuk contoh di sini kita akan menggunakan <code>aplikasi console</code> untuk mendemokan proses upload file ke Google Drive. Artinya aplikasi ini akan dijalankan via batch command atau command prompt.</p>

<p>Aplikasi ini juga membutuhkan dua library pihak ketiga yaitu <a href="https://www.nuget.org/packages/Google.Apis.Drive.v2/">Google.Apis.Drive.v2</a> dan <a href="https://www.nuget.org/packages/DotNetZip/">DotNetZip</a> yang bisa diinstall via <a href="{{%20site.url%20}}/blog/categories/nuget/">NuGet</a>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-14.png">https://coding4ever.files.wordpress.com/2016/01/060116-14.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-15.png">https://coding4ever.files.wordpress.com/2016/01/060116-15.png</a> %}</p>

<p>File backup database yang akan kita upload adalah file backup yang sudah kita buatkan versi kompresnya, disini kita menggunakan library <a href="https://www.nuget.org/packages/DotNetZip/">DotNetZip</a>.
Contoh kodenya  seperti berikut :</p>

<p>{% codeblock lang:c# %}
private static void CreateZip(string pathFileBackup, string fileBackup, string extension)
{
    var fileToZip = string.Format(@&ldquo;{0}{1}.zip&rdquo;, pathFileBackup, fileBackup);
    fileBackup = string.Format(@&ldquo;{0}{1}.{2}&rdquo;, pathFileBackup, fileBackup, extension);</p>

<pre><code>using (var zip = new ZipFile())
{
    Console.WriteLine("\nAdding {0}...", fileBackup);
    ZipEntry e = zip.AddFile(fileBackup, "");

    zip.Save(fileToZip);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Setelah berhasil membuat file zipnya, tinggal upload ke google drive. Berikut contoh kodenya :</p>

<p>{% codeblock lang:c# %}
private static void UploadToGoogleDrive(string pathFileBackup, string fileBackup)
{
    // TODO : disesuaikan dengan nilai clientId dan clientSecret Anda
    //        setting ini juga bisa disimpan di file App.config
    var clientId = &ldquo;505165741497-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com&rdquo;;
    var clientSecret = &ldquo;6Nxxxxxx-xxxxxxxxxxxxxxx&rdquo;;</p>

<pre><code>var service = GoogleDriveHelper.AuthenticateOauth(clientId, clientSecret, Environment.UserName);

if (service == null)
{
    Console.WriteLine("Authentication error");
    Console.ReadLine();
}            

try
{
    Console.WriteLine("Sedang proses upload ...");

    // TODO : disesuaikan dengan nilai folder id Anda
    //        setting ini juga bisa disimpan di file App.config
    var folderId = "0B5xxxxxxxxxxxxxxxxxxxxxxxxx";                

    // upload file
    var fileToUpload = string.Format("{0}\\{1}.zip", pathFileBackup, fileBackup);
    File newFile = GoogleDriveHelper.UploadFile(service, fileToUpload, folderId);

}
catch
{
    Console.WriteLine("\nUpload file gagal !");
}
finally
{
    // hapus file yang berhasil diupload
    var fileToDelete = string.Format("{0}\\{1}.zip", pathFileBackup, fileBackup);
    System.IO.File.Delete(fileToDelete);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Method <code>UploadToGoogleDrive</code> di atas membutuhkan class <a href="https://github.com/k4m4r82/DemoOnlineBackup/blob/master/src/DemoOnlineBackup/GoogleDriveHelper.cs">GoogleDriveHelper</a> yang bisa Anda cek di <a href="https://github.com/k4m4r82/DemoOnlineBackup/blob/master/src/DemoOnlineBackup/GoogleDriveHelper.cs">sini</a>.</p>

<p>Method <code>CreateZip</code> dan <code>UploadToGoogleDrive</code> di atas mempunyai parameter seperti berikut :
{% codeblock lang:c# %}
void CreateZip(string pathFileBackup, string fileBackup, string extension)
void UploadToGoogleDrive(string pathFileBackup, string fileBackup)
{% endcodeblock %}</p>

<p>Nilai masing-masing parameter di atas kita isi pada saat memanggil aplikasi via batch command atau command prompt. Contoh :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-16.png">https://coding4ever.files.wordpress.com/2016/01/060116-16.png</a> %}</p>

<p>Dan untuk mendapatkan nilainya, kita bisa mengakses parameter <code>args</code> dari method Main.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-17.png">https://coding4ever.files.wordpress.com/2016/01/060116-17.png</a> %}</p>

<h5>7. Menjalankan aplikasi client via batch command</h5>

<p>Untuk menjalankan aplikasi di atas kita bisa menggunakan batch command. Untuk contoh kodenya menggunakan database MySQL :</p>

<p>{% codeblock %}
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set year=%%c
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set month=%%a
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set day=%%b</p>

<p>for /f &ldquo;tokens=1 delims=: &rdquo; %%h in (&lsquo;time /T&rsquo;) do set hour=%%h
for /f &ldquo;tokens=2 delims=: &rdquo; %%m in (&lsquo;time /T&rsquo;) do set minutes=%%m
for /f &ldquo;tokens=3 delims=: &rdquo; %%a in (&lsquo;time /T&rsquo;) do set ampm=%%a</p>

<p>rem membuat file backup database dengan format nama_database-tahun-bulan-hari_jam_menit
set FILE_BACKUP=pulsa-%year%-%month%-%day%_%hour%-%minutes%-%ampm%
set LOKASI_BACKUP=D:\BackupDatabase\backups
set FILE_EXTENSION=sql</p>

<p>rem set user dan password mysql
set USER_MYSQL=root
set PASS_MYSQL=rahasia</p>

<p>rem USER_NAME, USER_PASSWORD dan NAMA_DATABASE menyesuaikan
mysqldump -u%USER_MYSQL% -p%PASS_MYSQL% pulsa > %LOKASI_BACKUP%\%FILE_BACKUP%.%FILE_EXTENSION%</p>

<p>D:\BackupDatabase\DemoOnlineBackup.exe %LOKASI_BACKUP% %FILE_BACKUP% %FILE_EXTENSION%
{% endcodeblock %}</p>

<p>Kemudian kode di atas kita simpan dengan nama <code>backup.cmd</code> di folder <code>Instalasi MySQL\bin</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-18.png">https://coding4ever.files.wordpress.com/2016/01/060116-18.png</a> %}</p>

<p>Agar proses backup ini bisa otomatis dan terjadwal kita bisa memanfaatkan <a href="{{%20site.url%20}}/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/">Windows Task Scheduler</a>.</p>

<p>Terakhir hasil tes kode di atas berhasil mengupload file ke Google Drive dengan lancar :-)</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2016/01/060116-20.png">https://coding4ever.files.wordpress.com/2016/01/060116-20.png</a> %}</p>

<p>Selamat <a href="https://github.com/k4m4r82/DemoOnlineBackup">MENCOBA</a> :-)</p>

<p>Referensi :</p>

<ul>
<li><a href="http://www.daimto.com/google-drive-api-c-upload/">Google Drive API with C# .net â€“ Upload, update, patch, delete,trash</a></li>
<li><a href="https://github.com/LindaLawton/Google-Dotnet-Samples">Google-Dotnet-Samples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Jadwal Backup Database Otomatis]]></title>
    <link href="http://coding4ever.net/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/"/>
    <updated>2015-04-30T15:33:59+07:00</updated>
    <id>http://coding4ever.net/blog/2015/04/30/membuat-jadwal-backup-database-otomatis</id>
    <content type="html"><![CDATA[<p>{% img left <a href="https://coding4ever.files.wordpress.com/2015/04/300415-14.png">https://coding4ever.files.wordpress.com/2015/04/300415-14.png</a> 100 100 %}Backup database merupakan salah satu hal penting, apalagi jika kita bekerja sebagai database administrator.</p>

<p>Semakin banyaknya data-data yang tersimpan seperti data keuangan, akademik dan data penting lainnya mengharuskan kita untuk meluangkan waktu khusus untuk melakukan backup database.</p>

<p>Backup secara manual tentu saja tidak disarankan, apalagi jika datanya sudah banyak, tentu saja sedikit banyaknya akan menyita waktu kita untuk melakukan hal penting lainnya.</p>

<!-- more -->


<p>Salah satu keuntungan menggunakan backup otomatis adalah, kita bisa mengset jadwal backup diluar jam-jam kantor. Misal jam 5 sore, jam 12 malam atau jam lainnya sesuai dengan kebutuhan.</p>

<h3>Database MySQL</h3>

<p>Adapun database yang kita gunakan untuk simulasi backup otomatis ini adalah database MySQL. Untuk membackup database MySQL kita bisa gunakan tool bawaan MySQL yaitu <code>mysqldump</code>.</p>

<p>Adapun perintahnya seperti berikut :</p>

<p>{% codeblock %}
&lsquo; backup
mysqldump -uUSER_NAME -pUSER_PASSWORD &ndash;routines NAMA_DATABASE > LOKASI_FILE_BACKUP.SQL
{% endcodeblock %}</p>

<p>Parameter <code>â€“routines</code> ditambahkan jika database mempunyai fungsi/trigger.</p>

<p>Karena data backupnya yang disimpan lebih dari satu, untuk nama database akan kita buat unik dengan format : <code>nama_database-tahun-bulan-hari_jam_menit</code>. Contoh :</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-01.png">https://coding4ever.files.wordpress.com/2015/04/300415-01.png</a> %}</p>

<p>Untuk mendapatkan informasi tahun, bulan, hari dan jam, kita bisa memanfaatkan batch command dengan perintah seperti berikut :</p>

<p>{% codeblock %}
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set year=%%c
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set month=%%a
for /f &ldquo;tokens=2-4 delims=/ &rdquo; %%a in (&lsquo;date /T&rsquo;) do set day=%%b</p>

<p>for /f &ldquo;tokens=1 delims=: &rdquo; %%h in (&lsquo;time /T&rsquo;) do set hour=%%h
for /f &ldquo;tokens=2 delims=: &rdquo; %%m in (&lsquo;time /T&rsquo;) do set minutes=%%m
for /f &ldquo;tokens=3 delims=: &rdquo; %%a in (&lsquo;time /T&rsquo;) do set ampm=%%a</p>

<p>rem membuat file backup database dengan format nama_database-tahun-bulan-hari_jam_menit
set FILE_BACKUP=D:\backup\Chinook-%year%-%month%-%day%_%hour%-%minutes%-%ampm%</p>

<p>rem USER_NAME, USER_PASSWORD dan NAMA_DATABASE menyesuaikan
mysqldump -uroot -prahasia &ndash;routines Chinook > %FILE_BACKUP%.sql
{% endcodeblock %}</p>

<p>Setelah itu kode di atas kita simpan di folder <code>Instalasi MySQL\bin</code>, misal dengan nama <code>backup.cmd</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-02.png">https://coding4ever.files.wordpress.com/2015/04/300415-02.png</a> %}</p>

<h3>Windows Task Scheduler</h3>

<p>Agar file <code>backup.cmd</code> ini bisa dijalankan secara berulang-ulang dan otomatis, kita bisa memanfaatkan tool yang sudah tersedia di Windows yaitu <code>Windows Task Scheduler</code>.</p>

<p>Untuk mengakses tool ini bisa dilakukan melalui menu Start -> Accessories -> System Tools -> Task Scheduler</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-03.png">https://coding4ever.files.wordpress.com/2015/04/300415-03.png</a> %}</p>

<p>Berikut langkah-langkah untuk menambahkan task baru.</p>

<ol>
<li><p>Klik <code>Create Basic Task</code> di panel Actions
{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-04.png">https://coding4ever.files.wordpress.com/2015/04/300415-04.png</a> %}
Kemudian isikan informasi <code>Name</code> dan <code>Description</code> kemudian klik tombol Next</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-05.png">https://coding4ever.files.wordpress.com/2015/04/300415-05.png</a> %}</p></li>
<li><p>Di dialog berikutnya kita akan menentukan kapan task ini akan di eksekusi. Contoh jika task ini akan dieksekusi setiap hari kita pilih <code>Daily</code>.</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-06.png">https://coding4ever.files.wordpress.com/2015/04/300415-06.png</a> %}</p></li>
<li><p>Berikutnya kita akan menentukan jam berapa task ini akan dieksekusi</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-07.png">https://coding4ever.files.wordpress.com/2015/04/300415-07.png</a> %}
Pada gambar di atas, task ini akan dieksekusi setiap jam 5 sore.</p></li>
<li><p>Berikutnya kita akan menentukan apa yang akan dilakukan task ini, ketika dieksekusi. Sebagai contoh task ini akan menjalankan file <code>backup.cmd</code> yang tersimpan di folder bin MySQL</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-08.png">https://coding4ever.files.wordpress.com/2015/04/300415-08.png</a> %}
{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-09.png">https://coding4ever.files.wordpress.com/2015/04/300415-09.png</a> %}
Di bagian <code>Program/script</code> kita tentukan nama file <code>backup.cmd</code>, sedangkan untuk <code>Start in</code> kita tentukan lokasi/folder file <code>backup.cmd</code></p></li>
<li>Terakhir klik tombol Finish</li>
</ol>


<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-10.png">https://coding4ever.files.wordpress.com/2015/04/300415-10.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-11.png">https://coding4ever.files.wordpress.com/2015/04/300415-11.png</a> %}</p>

<p>Untuk mencoba apakah backup berjalan dengan baik, klik kanan nama task <code>Backup Database Chinook</code> -> Run</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-12.png">https://coding4ever.files.wordpress.com/2015/04/300415-12.png</a> %}</p>

<p>{% img center <a href="https://coding4ever.files.wordpress.com/2015/04/300415-13.png">https://coding4ever.files.wordpress.com/2015/04/300415-13.png</a> %}</p>

<p>Selamat MENCOBA :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengakses Database MySQL Menggunakan C# Bagian 2]]></title>
    <link href="http://coding4ever.net/blog/2011/06/26/mengakses-database-mysql-menggunakan-c-bagian-2/"/>
    <updated>2011-06-26T11:04:42+07:00</updated>
    <id>http://coding4ever.net/blog/2011/06/26/mengakses-database-mysql-menggunakan-c-bagian-2</id>
    <content type="html"><![CDATA[<p>Seperti yang sudah saya janjikan pada <a href="{{%20site.url%20}}/blog/2011/06/25/mengakses-database-mysql-menggunakan-c-bagian-1/">postingan</a> sebelumnya, kali ini kita akan membahas bagaimana cara memanfaatkan class Mahasiswa dan MahasiswaDao pada Presentation layer</p>

<p>Sudah merupakan rahasia umum :D untuk melakukan koneksi ke database MySQL kita membutuhkan string koneksi berikut :</p>

<p>{% codeblock %}
SERVER=nama_server;DATABASE=nama_database;UID=user_database;PASSWORD=user_password
{% endcodeblock %}</p>

<p><!-- more -->Terlihat dengan jelas ada beberapa informasi yang tentunya tidak ingin kita hardcode di program, kita ambil contoh informasi <strong>nama_server</strong> dan <strong>nama_database</strong>.</p>

<p>Kalo dulu mungkin kita biasanya meyimpan informasi tersebut di registry windows atau file dengan format <a href="{{%20site.url%20}}/blog/2010/04/23/contoh-sederhana-memanipulasi-ini-file-untuk-menyimpan-informasi/">INI</a>, tapi kali ini kita akan memanfaatkan file XML yang sudah disediakan .NET</p>

<p>Bagaimana cara menambahkan file XML tersebut ikuti langkah-langkah berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-1.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-1.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-2.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-2.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-3.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-3.png?w=300" alt="" /></a></p>

<p>kemudian kita lengkapi kodenya seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-4.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-4.png?w=300" alt="" /></a></p>

<p>gampang bukan ??? :)</p>

<p>Cara mengakses informasi pada file XML tersebut akan kita bahas pada saat pembuat class DBConnection.</p>

<p>Class DBConnection dari namanya kita sudah ngerti kalo class ini tugasnya untuk melakukan koneksi ke database dalam hal ini database MySQL.</p>

<p>Oke langsung saja kita tambahkan class baru.</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-5.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-5.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-6.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-6.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-7.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-7.png?w=300" alt="" /></a></p>

<p>Namespace (package kalo istilah javanya) <strong>MySql.Data.MySqlClient</strong> kita butuhkan untuk bisa menggunakan class-class akses database MySQL.</p>

<p>Sedangkan namespace <strong>System.Configuration</strong> dibutuhkan agar kita bisa menggunakan classÂ ConfigurationSettings untuk mengakses file XML yang sudah kita buat pada langkah-langkah sebelumnya.</p>

<p>Berikut adalah kode lengkap class DBConnectionnya :</p>

<p>{% codeblock lang:c# %}
using MySql.Data.MySqlClient;
using System.Configuration;</p>

<p>namespace DemoDAO
{
    public class DBConnection
    {</p>

<pre><code>    private MySqlConnection conn = null;
    private static DBConnection dbConn = null;

    // constructor
    private DBConnection()
    {
        if (conn == null)
        {
            // cara membaca informasi yang ada pada file XML (App.config)
            string server = ConfigurationSettings.AppSettings["Server"];
            string database = ConfigurationSettings.AppSettings["Database"];

            string user = "root";
            string password = "rahasia";

            string strConn = "SERVER=" + server + ";DATABASE=" + database + ";UID=" + user + ";PASSWORD=" + password;

            conn = new MySqlConnection(strConn);
            conn.Open();
        }
    }

    public static DBConnection GetInstance()
    {
        if (dbConn == null) { dbConn = new DBConnection(); }

        return dbConn;
    }

    public MySqlConnection GetConnection()
    {
        return this.conn;
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Sampai disini semua persiapan sudah oke, saatnya kita melengkapi kode program untuk Presentation layer dan untuk merefresh ingatan kita saya tampilkan kembali form mahasiswa yang sudah kita rancang pada <a href="{{%20site.url%20}}/blog/2011/06/25/mengakses-database-mysql-menggunakan-c-bagian-1/">postingan</a> sebelumnya.</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-31.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-31.png?w=300" alt="" /></a></p>

<p>Aktifkan terlebih dulu FrmMahasiswanya kemudian masuk kebagian editor codenya setelah itu tambahkan kode berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-8.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-8.png?w=300" alt="" /></a></p>

<p>Namespace DemoDAO.Model danÂ DemoDAO.Dao dibutuhkan agar bisa mengakses class Mahasiswa dan MahasiswaDao.</p>

<p><strong>1. Menyimpan Data</strong></p>

<p>{% codeblock lang:c# %}
private void btnSimpan_Click(object sender, EventArgs e)
{
    // buat objek mhs
    Mahasiswa mhs = new Mahasiswa();</p>

<pre><code>// isi nilai masing-masing property
mhs.NomorMahasiswa = txtNomorMahasiswa.Text;
mhs.Nama = txtNama.Text;
mhs.Alamat = txtAlamat.Text;

result = mhsDao.Save(mhs); // panggil method Save
if (result &gt; 0)
{
    MsgInfo("Data sudah disimpan");
    KosongkanInputan();

    txtNomorMahasiswa.Focus();
}
else
{
    MsgInfo("Data gagal disimpan");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>2. Mengupdate Data</strong></p>

<p>{% codeblock lang:c# %}
private void btnPerbaiki_Click(object sender, EventArgs e)
{
    // buat objek mhs
    Mahasiswa mhs = new Mahasiswa();</p>

<pre><code>// isi nilai masing-masing property
mhs.NomorMahasiswa = txtNomorMahasiswa.Text;
mhs.Nama = txtNama.Text;
mhs.Alamat = txtAlamat.Text;

result = mhsDao.Update(mhs); // panggil method Update
if (result &gt; 0)
{
    MsgInfo("Data sudah disimpan");
    KosongkanInputan();

    txtNomorMahasiswa.Focus();
}
else
{
    MsgInfo("Data gagal disimpan");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>3. Menghapus Data</strong></p>

<p>{% codeblock lang:c# %}
private void btnHapus_Click(object sender, EventArgs e)
{
    result = mhsDao.Delete(txtNomorMahasiswa.Text); // panggil method Delete
    if (result > 0)
    {
        MsgInfo(&ldquo;Data sudah dihapus&rdquo;);
        KosongkanInputan();</p>

<pre><code>    txtNomorMahasiswa.Focus();
}
else
{
    MsgInfo("Data gagal dihapus");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>4. Menampilkan data</strong></p>

<p>Untuk menampilkan data kita membutuhkan 2 methode yaitu <strong>FillToListView</strong> untuk menambahkan objek mahasiswa ke ListView dan <strong>LoadDataMahasiswa</strong> untuk mengambil data mahasiswa dari database dan menyimpannya ke objek mahasiswa.</p>

<p>Karena data mahasiswa yang ditampilkan bisa lebih dari satu disini kita bisa menggunakan class List untuk menampung objeknya.</p>

<p>{% codeblock lang:c# %}
private void FillToListView(Mahasiswa mhs)
{</p>

<pre><code>int noUrut = lvwMahasiswa.Items.Count + 1;

ListViewItem item = new ListViewItem(noUrut.ToString());

item.SubItems.Add(mhs.NomorMahasiswa);
item.SubItems.Add(mhs.Nama);
item.SubItems.Add(mhs.Alamat);

lvwMahasiswa.Items.Add(item);
</code></pre>

<p>}</p>

<p>private void LoadDataMahasiswa()
{
    lvwMahasiswa.Items.Clear();</p>

<pre><code>List&lt;Mahasiswa&gt; daftarMhs = mhsDao.GetAll();
foreach (Mahasiswa mhs in daftarMhs)
{
    FillToListView(mhs); // panggil method FillToListView
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Setelah itu tinggal panggil method LoadDataMahasiswa di constructorÂ FrmMahasiswa</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-9.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-9.png?w=300" alt="" /></a></p>

<p><strong>5. Pencarian Data Berdasarkan Nama</strong></p>

<p>Untuk pencarian data kita tinggal mengoverload methodÂ  LoadDataMahasiswa dimana kita menambahkan parameter nama dengan tipe string, selain itu method MahasiswaDao yang kita panggil adalah GetByName</p>

<p>{% codeblock lang:c# %}
private void LoadDataMahasiswa(string nama)
{
    lvwMahasiswa.Items.Clear();</p>

<pre><code>List&lt;Mahasiswa&gt; daftarMhs = mhsDao.GetByName(nama);
foreach (Mahasiswa mhs in daftarMhs)
{
    FillToListView(mhs);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Selanjutnya tinggal dipanggil di eventÂ btnCari_Click</p>

<p>{% codeblock lang:c# %}
private void btnCari_Click(object sender, EventArgs e)
{
    LoadDataMahasiswa(txtKeywordPencarian.Text);
}
{% endcodeblock %}</p>

<p>Sebagai bonus :) saya akan tambahkan satu lagi method untuk pencarian data berdasarkan nomor mahasiswa, untuk melakukan ini kita akan menambahkan method <strong>GetByNoMahasiswa</strong>, adapun kodenya sebgai berikut :</p>

<p>{% codeblock lang:c# %}
public Mahasiswa GetByNoMahasiswa(string nomorMahasiswa)
{
    Mahasiswa mhs = null;</p>

<pre><code>strSql = "SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa " +
         "WHERE nomor_mahasiswa = @1";

using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    cmd.Parameters.AddWithValue("@1", nomorMahasiswa);

    using (MySqlDataReader dtr = cmd.ExecuteReader())
    {
        if (dtr.Read())
        {
            mhs = MappingRowToObject(dtr);
        }
    }
}

return mhs;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Method tersebut ditambahkan di class MahasiswaDao, selain itu kita juga menambahkan satu button lagi di FrmMahasiswa untuk memanggil method tersebut.</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/26062011-10.png"><img src="http://coding4ever.files.wordpress.com/2011/06/26062011-10.png?w=300" alt="" /></a></p>

<p>{% codeblock lang:c# %}
private void btnCariByNoMhs_Click(object sender, EventArgs e)
{
    Mahasiswa mhs = mhsDao.GetByNoMahasiswa(txtNomorMahasiswa.Text);
    if (mhs != null)
    {
        txtNomorMahasiswa.Text = mhs.NomorMahasiswa;
        txtNama.Text = mhs.Nama;
        txtAlamat.Text = mhs.Alamat;</p>

<pre><code>    MsgInfo("Data mahasiswa ditemukan");
}
else
{
    MsgInfo("Nomor mahasiswa tidak ditemukan");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Akhirnya selesai juga, tapi mungkin saya butuh satu postingan lagi untuk menutup artikel berseri ini, insya Allah :).</p>

<p>Selamat <a href="http://www.4shared.com/file/MSyZd_nN/DemoDAO2.html">MENCOBA</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengakses Database MySQL Menggunakan C# Bagian 1]]></title>
    <link href="http://coding4ever.net/blog/2011/06/25/mengakses-database-mysql-menggunakan-c-bagian-1/"/>
    <updated>2011-06-25T20:28:26+07:00</updated>
    <id>http://coding4ever.net/blog/2011/06/25/mengakses-database-mysql-menggunakan-c-bagian-1</id>
    <content type="html"><![CDATA[<p>Berhubung sudah mulai bosan bermain-main dengan Visual Basic 6 dan Visual Basic .NET kali ini kita akan menggunakan C# untuk mencoba membuat aplikasi sederhana mengakses database.</p>

<p>Database yang akan kita gunakan adalah MySQL versi 5.x dan untuk C# nya saya menggunakan versi .NET 2008.</p>

<p>Untuk menyederhanan postingan kali ini saya cukupkan dulu untuk mengakses 1 tabel yaitu tabel mahasiswa.</p>

<p>Adapun struktur tabelnya seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-0.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-0.png" alt="" /></a><!-- more --></p>

<p>Untuk akses database kali ini kita akan menggunakan konsep <a href="http://en.wikipedia.org/wiki/Data_access_object">DAO</a>, walaupun enggak 100% :D, dimana kita akan memisahkan modul program menjadi beberapa layer/lapisan yaitu :</p>

<ol>
<li><p>Presentation</p></li>
<li><p>Business Logic</p></li>
<li><p>Data Access</p></li>
</ol>


<p>Kok mirip <a href="http://en.wikipedia.org/wiki/Multitier_architecture">3-Tier Architecture</a> ya? :D</p>

<p>Untuk presentation layer berhubungan dengan UI (user interface) dalam artikel ini kita akan menggunakan Windows Form.</p>

<p>Business Logic biasanya berhubungannya dengan entity class dan entity class sendiri merupakan representasi tabel-tabel yang ada di database.</p>

<p>Terakhir Data Access yaitu bagian yang menangani urusan akses database.</p>

<p><strong>1. Memulai project baru</strong></p>

<p>Jalankan Visual Studio .NET kemudian aktifkan menu File -> New -> Project &hellip;</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-1.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-1.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-2.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-2.png?w=300" alt="" /></a></p>

<p><strong>2. Membuat Presentation Layer</strong></p>

<p>Presentation layer berhubungan dengan user interface atau tampilan, dan untuk tampilannya kita akan desain seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-31.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-31.png?w=300" alt="" /></a></p>

<p><strong>3. Membuat Business Logic</strong></p>

<p>Business Logic ada hubungannya dengan entity class yang merupakan representasi dari tabel-tabel yang ada didatabase.</p>

<p>Berdasarkan struktur tabel diatas kita akan menambahkan class baru dengan nama Mahasiswa yang memiliki tiga property yaitu NomorMahasiswa, Nama dan Alamat.</p>

<p>Jadi property ini sudah mewakili method mutator dan accessor yang sudah biasa kita kenal penggunakannya di Java.</p>

<p>Sebelum kita menambahkan class Mahasiswa kita tambahkan dulu folder untuk mengelompok ke tiga layer diatas, caranya dengan mengklik kan project -> Add -> New Folder</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-4.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-4.png?w=300" alt="" /></a></p>

<p>kita akan menambahkan 3 folder yaitu Dao, Model dan View</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-5.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-5.png?w=300" alt="" /></a></p>

<p>jika sudah kita klik kanan folder Model -> Add -> Class &hellip;</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-6.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-6.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-7.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-7.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-8.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-8.png?w=300" alt="" /></a></p>

<p>pada gambar diatas tambahkan access modifier public agar class Mahasiswa bisa digunakan antar namespace (package kalo istilah javanya).</p>

<p>Oke sampai disini kita tinggal melengkapi kode untuk class Mahasiswa diatas, kode lengkapnya sebagai berikut :</p>

<p>{% codeblock lang:c# %}
namespace DemoDAO.Model
{
    public class Mahasiswa
    {
        private string nomorMahasiswa;
        public string NomorMahasiswa
        {
            get { return nomorMahasiswa; }
            set { nomorMahasiswa = value; }
        }</p>

<pre><code>    private string nama;
    public string Nama
    {
        get { return nama; }
        set { nama = value; }
    }

    private string alamat;
    public string Alamat
    {
        get { return alamat; }
        set { alamat = value; }
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>4. Membuat Data Access</strong></p>

<p>Lapisan ini biasanya berisi operasi CRUD (Create, Read, Update, Delete), tapi kita akan menggunakan istilah yang sedikit berbeda untuk nama operasinya yaitu :</p>

<ol>
<li><p>Save</p></li>
<li><p>Update</p></li>
<li><p>Delete</p></li>
<li><p>GetAll</p></li>
<li><p>GetByName</p></li>
</ol>


<p>Biasanya untuk penamaan classnya cukup menambahkan Akhiran (Suffixes) Dao untuk setiap class entitynya.</p>

<p>Contoh untuk class entity Mahasiswa, biasanya class Data Accessnya diberi nama MahasiswaDao.</p>

<p>Oke langsung aja kita klik kanan folder Dao -> Add -> Class &hellip;</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-9.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-9.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-10.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-10.png?w=300" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-11.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-11.png?w=300" alt="" /></a></p>

<p>jangan lupa tambahkan juga keyword public pada class MahasiswaDaonya.</p>

<p>jadi hasil akhir sementar project kita seperti berikut :</p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-12.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-12.png" alt="" /></a></p>

<p>Untuk mengakses database MySQL kita membutuhkan library MySql Connection yang bisa didownload di<a href="http://dev.mysql.com/downloads/connector/net/6.2.html">sini</a>.</p>

<p>Untuk tutorial kali ini saya menggunakan versi <a href="http://dev.mysql.com/downloads/connector/net/6.2.html">MySQL Connector/Net 6.2.4</a></p>

<p>Silahkan download library tersebut kemudian lakukan instalasi.</p>

<p>Adapun langkah-langkah untuk menambahkan library tersebut kedalam project adalah sebagi berikut :</p>

<p><strong>Klik kanan References -> Add References &hellip;</strong></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-13.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-13.png" alt="" /></a></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-14.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-14.png?w=300" alt="" /></a></p>

<p>Selanjutnya kita tinggal melengkapi class MahasiswaDaonya.</p>

<p><strong>1. Menambahkan namespace MySql.Data.MySqlClient dan DemoDAO.Model</strong></p>

<p><a href="http://coding4ever.files.wordpress.com/2011/06/25062011-15.png"><img src="http://coding4ever.files.wordpress.com/2011/06/25062011-15.png?w=300" alt="" /></a></p>

<p>namespace MySql.Data.MySqlClient dibutuhkan agar bisa menggunakan class-class untuk mengakses database MySQL sedangkan namespaceÂ DemoDAO.Model agar bisa mengakses class Mahasiswa dari class MahasiswaDao.</p>

<p><strong>2. Menambah beberapa variabel pendukung seperti conn, strSql dan sebuah constructor</strong></p>

<p>{% codeblock lang:c# %}
private MySqlConnection conn;
private string strSql = string.Empty;</p>

<p>// constructor
public MahasiswaDao(MySqlConnection conn)
{
    this.conn = conn;
}
{% endcodeblock %}</p>

<p><strong>3. Menambahkan method Save, Update dan Delete</strong></p>

<p>{% codeblock lang:c# %}
public int Save(Mahasiswa mhs)
{
    strSql = &ldquo;INSERT INTO mahasiswa (nomor_mahasiswa, nama, alamat) VALUES (@1, @2, @3)&rdquo;;</p>

<pre><code>using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    cmd.Parameters.AddWithValue("@1", mhs.NomorMahasiswa);
    cmd.Parameters.AddWithValue("@2", mhs.Nama);
    cmd.Parameters.AddWithValue("@3", mhs.Alamat);

    return cmd.ExecuteNonQuery();
}
</code></pre>

<p>}</p>

<p>public int Update(Mahasiswa mhs)
{
    strSql = &ldquo;UPDATE mahasiswa SET nama = @1, alamat = @2 WHERE nomor_mahasiswa = @3&rdquo;;</p>

<pre><code>using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    cmd.Parameters.AddWithValue("@1", mhs.Nama);
    cmd.Parameters.AddWithValue("@2", mhs.Alamat);
    cmd.Parameters.AddWithValue("@3", mhs.NomorMahasiswa);

    return cmd.ExecuteNonQuery();
}
</code></pre>

<p>}</p>

<p>public int Delete(string nomorMahasiswa)
{
    strSql = &ldquo;DELETE FROM mahasiswa WHERE nomor_mahasiswa = @1&rdquo;;</p>

<pre><code>using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    cmd.Parameters.AddWithValue("@1", nomorMahasiswa);

    return cmd.ExecuteNonQuery();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>4. Menambahkan method GetAll dan GetByName</strong></p>

<p>{% codeblock lang:c# %}
private Mahasiswa MappingRowToObject(MySqlDataReader dtr)
{
    Mahasiswa mhs = new Mahasiswa();</p>

<pre><code>mhs.NomorMahasiswa = dtr["nomor_mahasiswa"] is DBNull ? string.Empty : dtr["nomor_mahasiswa"].ToString();
mhs.Nama = dtr["nama"] is DBNull ? string.Empty : dtr["nama"].ToString();
mhs.Alamat = dtr["alamat"] is DBNull ? string.Empty : dtr["alamat"].ToString();

return mhs;
</code></pre>

<p>}</p>

<p>public List<Mahasiswa> GetAll()
{
    List<Mahasiswa> daftarMhs = new List<Mahasiswa>();</p>

<pre><code>strSql = "SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa " +
         "ORDER BY nama";

using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    using (MySqlDataReader dtr = cmd.ExecuteReader())
    {
        while (dtr.Read())
        {
            daftarMhs.Add(MappingRowToObject(dtr));
        }
    }
}

return daftarMhs;
</code></pre>

<p>}</p>

<p>public List<Mahasiswa> GetByName(string nama)
{
    List<Mahasiswa> daftarMhs = new List<Mahasiswa>();</p>

<pre><code>strSql = "SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa " +
         "WHERE nama LIKE @1 " +
         "ORDER BY nama";

using (MySqlCommand cmd = new MySqlCommand(strSql, conn))
{
    cmd.Parameters.AddWithValue("@1", "%" + nama + "%");

    using (MySqlDataReader dtr = cmd.ExecuteReader())
    {
        while (dtr.Read())
        {
            daftarMhs.Add(MappingRowToObject(dtr));
        }
    }
}

return daftarMhs;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Selesai sudah pembuatan class MahasiswaDaonya sekarang tinggal bagaimana cara menggunakan class Mahasiswa dan MahasiswaDao pada Presentation layer, tapi &hellip; akan saya bahas pada <a href="{{%20site.url%20}}/blog/2011/06/26/mengakses-database-mysql-menggunakan-c-bagian-2/">postingan</a> berikutnya :D insya Allah.</p>

<p>Selamat <a href="http://www.4shared.com/file/6vack9Yi/DemoDAO.html">MENCOBA</a> :)</p>

<p>Referensi : <a href="http://netindonesia.net/">Geeks Portal .NET Indonesia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup Dan Restore Database MySQL Dari Aplikasi]]></title>
    <link href="http://coding4ever.net/blog/2011/03/20/backup-dan-restore-database-mysql-dari-aplikasi/"/>
    <updated>2011-03-20T13:19:18+07:00</updated>
    <id>http://coding4ever.net/blog/2011/03/20/backup-dan-restore-database-mysql-dari-aplikasi</id>
    <content type="html"><![CDATA[<p>Artikel kali ini hanya posting ulang dari jawaban saya yang ada di artikel <a href="https://coding4ever.wordpress.com/2010/01/16/membuat-paket-instalasi-vb-mysql-dengan-nsis/">Membuat paket instalasi vb + mysql dengan NSIS</a>, karena masih ada beberapa pengunjung yang bertanya tentang masalah ini.</p>

<p>Untuk proses backup kita cukup menggunakan tool bawaan MySQL yaitu <strong>mysqldump</strong> dan untuk restorenya menggunakan <strong>mysql</strong>.</p>

<p>Adapun perintah dasar untuk melakukan backup dan restore adalah sebagai berikut :</p>

<p>{% codeblock %}
&lsquo; backup
mysqldump -uUSER_NAME -pUSER_PASSWORD &ndash;routines NAMA_DATABASE > LOKASI_FILE_BACKUP.SQL</p>

<p>&lsquo; restore
mysql -uUSER_NAME -pUSER_PASSWORD NAMA_DATABASE &lt; LOKASI_FILE_BACKUP.SQL
{% endcodeblock %}</p>

<!-- more -->


<p>parameter &ndash;routines ditambahkan jika database mempunyai fungsi/trigger</p>

<p>Sekarang tinggal kita siapkan kode berikut :</p>

<p>{% codeblock %}
Private Declare Function OpenProcess Lib &ldquo;kernel32&rdquo; (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
Private Declare Function WaitForSingleObject Lib &ldquo;kernel32&rdquo; (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function CloseHandle Lib &ldquo;kernel32&rdquo; (ByVal hObject As Long) As Long</p>

<p>Private Const SYNCHRONIZE       As Long = &amp;H100000
Private Const INFINITE          As Long = &amp;HFFFF</p>

<p>Private Sub execCommand(ByVal cmd As String)
    Dim result  As Long
    Dim lPid    As Long
    Dim lHnd    As Long
    Dim lRet    As Long</p>

<pre><code>cmd = "cmd /c " &amp; cmd
result = Shell(cmd, vbHide)

lPid = result
If lPid &lt;&gt; 0 Then
    lHnd = OpenProcess(SYNCHRONIZE, 0, lPid)
    If lHnd &lt;&gt; 0 Then
        lRet = WaitForSingleObject(lHnd, INFINITE)
        CloseHandle (lHnd)
    End If
End If
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>kemudian tinggal panggil di masing-masing proses (backup dan restore)</p>

<p>{% codeblock %}
Dim cmd As String</p>

<p>Private Sub cmdBackup_Click()
    Screen.MousePointer = vbHourglass
    DoEvents</p>

<pre><code>cmd = Chr(34) &amp; "C:\Program Files\MySQL\MySQL Server 5.1\bin\mysqldump" &amp; Chr(34) &amp; " -uroot -prahasia --routines --comments nama_database &gt; c:\nama_database.sql"
Call execCommand(cmd)

Screen.MousePointer = vbDefault
MsgBox "done"
</code></pre>

<p>End Sub</p>

<p>Private Sub cmdRestore_Click()
    Screen.MousePointer = vbHourglass
    DoEvents</p>

<pre><code>cmd = Chr(34) &amp; "C:\Program Files\MySQL\MySQL Server 5.1\bin\mysql" &amp; Chr(34) &amp; " -uroot -prahasia --comments nama_database &lt; c:\nama_database.sql"
Call execCommand(cmd)

Screen.MousePointer = vbDefault
MsgBox "done"
</code></pre>

<p>End Sub
{% endcodeblock %}</p>

<p>kode diatas dengan asumsi direktori bin MySQL ada di folder &ldquo;C:\Program Files\MySQL\MySQL Server 5.1\bin&rdquo;.</p>

<p>Selamat mencoba :)</p>
]]></content>
  </entry>
  
</feed>
