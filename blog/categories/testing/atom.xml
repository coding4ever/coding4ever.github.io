<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Coding4ever's Blog]]></title>
  <link href="http://coding4ever.net/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://coding4ever.net/"/>
  <updated>2016-02-15T07:47:15+07:00</updated>
  <id>http://coding4ever.net/</id>
  <author>
    <name><![CDATA[Admin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performance Test Menggunakan JMeter]]></title>
    <link href="http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/"/>
    <updated>2015-10-20T09:26:38+07:00</updated>
    <id>http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="https://coding4ever.files.wordpress.com/2015/10/apache-jmeter.png">https://coding4ever.files.wordpress.com/2015/10/apache-jmeter.png</a>&#8221; width=&#8221;100&#8221; height=&#8221;100&#8221;>Aktivitas saya di kantor akhir-akhir ini, lebih sering ngoding untuk backend/web service. Nah untuk membuat service ini, saya biasanya menggunakan teknologi <a href="/blog/categories/wcf/">WCF</a>, hanya saja untuk <code>kekinian</code> :-D saya juga menggunakan <a href="http://www.asp.net/web-api">ASP.NET Web Api</a>.</p>

<p>Untuk tahapan testing wajib yang saya lakukan adalah minimal <a href="https://en.wikipedia.org/wiki/Unit_testing">unit test</a>. <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit test</a> yang dilakukan biasanya di level DAL (Data Access Layer) dan Controller.</p>

<!-- more -->


<p><a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> ini merupakan bagian dari <code>white box testing</code> karena testing ini dieksekusi langsung oleh programmer. Sedangkan untuk <code>black box testing</code> bisa dilakukan menggunakan aplikasi sejenis <a href="http://www.telerik.com/fiddler">Fiddler</a> atau menggunakan add-ons yang dimiliki oleh browser-browser seperti Mozilla Firefox dan Google Chrome.</p>

<p>Karena service ini nantinya akan digunakan oleh banyak client dan user, tentu akan <code>ngeri-ngeri sedap</code>  :-D jika testingnya masih dilakukan secara manual. Jadi sebaiknya kita menggunakan <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> untuk proses ini.</p>

<p>Ada banyak <a href="http://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/">Performance Test Tool</a> yang tersedia baik yang gratis maupun yang berbayar. Untuk postingan kali ini saya menggunakan <a href="http://jmeter.apache.org/">JMeter</a>.</p>

<p>Apa itu <a href="http://jmeter.apache.org/">JMeter</a> ?</p>

<blockquote><p>The Apache JMeterâ„¢ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions</p></blockquote>

<p>Berikut langkah-langkah menggunakan <a href="http://jmeter.apache.org/">JMeter</a> :</p>

<h5>1. Download <a href="http://jmeter.apache.org/download_jmeter.cgi">JMeter</a> kemudian ekstrak, misal di drive C:\</h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-1.png">https://coding4ever.files.wordpress.com/2015/10/201015-1.png</a>&#8221;></p>

<h5>2. Untuk menjalankan <a href="http://jmeter.apache.org/">JMeter</a>, klik ganda file <code>jmeter.bat</code> yang ada di folder <code>bin</code></h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-2.png">https://coding4ever.files.wordpress.com/2015/10/201015-2.png</a>&#8221;></p>

<p>Tunggu beberapa saat sampai tampil, aplikasi <a href="http://jmeter.apache.org/">JMeter</a></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-3.png">https://coding4ever.files.wordpress.com/2015/10/201015-3.png</a>&#8221;></p>

<p>Kemudian ganti informasi Name, sesuai kebutuhan. Misal <code>Performance Test Web Service Presensi</code>.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-4.png">https://coding4ever.files.wordpress.com/2015/10/201015-4.png</a>&#8221;></p>

<h5>3. Menambahkan User Defined Variables</h5>

<p>Di node ini kita akan menambahkan informasi global yang sering digunakan pada saat testing seperti informasi <code>host</code> dan <code>port</code>.</p>

<p>Untuk menambahkan node <code>User Defined Variables</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Config Element -> User Defined Variables.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-5.png">https://coding4ever.files.wordpress.com/2015/10/201015-5.png</a>&#8221;></p>

<p>Kemudian lakukan pengaturan <code>User Defined Variables</code> seperti gambar berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-6.png">https://coding4ever.files.wordpress.com/2015/10/201015-6.png</a>&#8221;></p>

<p>Pada gambar di atas kita menambahkan dua variabel yaitu <code>host</code> dan <code>port</code>. Nah variabel-variabel ini nantinya akan digunakan pada langkah-langkah berikutnya.</p>

<h5>4. Menambahkan HTTP Header Manager</h5>

<p>Setelah menambahkan node <code>User Defined Variables</code>, kita lanjutkan dengan menambahkan node <code>HTTP Header Manager</code>. Langkah-langkahnya sama seperti menambahkan node <code>User Defined Variables</code>, hanya saja yang dipilih adalah <code>HTTP Header Manager</code>.</p>

<p>Di node ini kita akan menambahkan informasi apa saja yang dikirimkan <a href="http://jmeter.apache.org/">JMeter</a> ke HTTP request header.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-7.png">https://coding4ever.files.wordpress.com/2015/10/201015-7.png</a>&#8221;></p>

<h5>5. Menambahkan HTTP Request Defaults</h5>

<p>Langkah berikutnya adalah menambahkan node <code>HTTP Request Defaults</code>, caranya juga sama seperti sebelumnya hanya saja yang dipilih node <code>HTTP Request Defaults</code>.</p>

<p>Di node ini kita cukup mengeset informasi nama server/ip address, port dan protocol.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-8.png">https://coding4ever.files.wordpress.com/2015/10/201015-8.png</a>&#8221;></p>

<p>Karena sebelumnya kita sudah mendefinisikan nama host dan port di node <code>User Defined Variables</code>, di node ini kita tinggal panggil variabel tersebut dengan format : ${<strong>NAMA_VARIABEL</strong>}.</p>

<h5>6. Menambahkan Thread Group</h5>

<p>Node ini digunakan untuk mengelompokan service yang akan di tes. Misal kita mempunyai service Mahasiswa dan Dosen, kedua service ini sebaiknya dibuatkan <code>Thread Group</code> masing-masing.</p>

<p>Untuk menambahkan node <code>Thread Group</code> klik kanan node Test Plan (Performance Test Web Service Presensi) -> Add -> Threads (Users) -> Thread Group.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-9.png">https://coding4ever.files.wordpress.com/2015/10/201015-9.png</a>&#8221;></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-10.png">https://coding4ever.files.wordpress.com/2015/10/201015-10.png</a>&#8221;></p>

<p>Dari setting di atas, kita akan membuat skenario <code>performance test</code> seperti berikut :</p>

<ul>
<li>Jumlah user sebanyak 50 orang</li>
<li>Setiap 2 detik (100/50), akan mengirimkan 6 request ke server.</li>
<li>Total jumlah sample = 300 (50 x 6)</li>
</ul>


<p>Skenario <code>performance test</code> ini bisa diganti-ganti nilainya sesuai kebutuhan.</p>

<h5>7. Menambahkan HTTP Request</h5>

<p>Setelah menentukan skenario <code>performance test</code>, langkah berikutnya adalah menambahkan node <code>HTTP Request</code>. Di node inilah kita akan menentukan web service yang akan di tes. Misal web service mahasiswa mempunyai dua layanan yaitu <code>GetByID</code> dan <code>GetByName</code>. Nah dua layanan ini akan kita tambahkan sebagi bagian dari <code>HTTP Request</code>.</p>

<p>Untuk menambahkan node <code>HTTP Request</code> klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Sampler -> HTTP Request.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-11.png">https://coding4ever.files.wordpress.com/2015/10/201015-11.png</a>&#8221;></p>

<p>Kemudian atur settingnya seperti berikut :</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-12.png">https://coding4ever.files.wordpress.com/2015/10/201015-12.png</a>&#8221;></p>

<p>Dari gambar di atas, informasi web servicenya sebagai berikut :</p>

<ul>
<li>Nama service : <code>GetById</code></li>
<li>Path/Url : <code>/Api/Mahasiswa/GetById</code></li>
<li>Service ini mempunyai satu parameter yaitu <code>id</code>, yang kita set nilainya <code>09.01.2488</code></li>
<li>Informasi server name/ip dan port number tidak perlu di set, karena sudah kita set nilainya di node <code>HTTP Request Defaults</code></li>
</ul>


<p>Ulangi langkah sebelumnya untuk menambahkan service yang lain.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-13.png">https://coding4ever.files.wordpress.com/2015/10/201015-13.png</a>&#8221;></p>

<h5>8. Menambahkan report untuk menampilkan hasil Performance test</h5>

<p>Ada beberapa format laporan yang digunakan untuk menampilkan hasil performance test yaitu :</p>

<ul>
<li>View Results in Table</li>
<li>View Results Tree</li>
<li>Response Times Over Time</li>
<li>Transactions per Second</li>
<li>Statistical Aggregate Report</li>
<li>Summary Report</li>
</ul>


<p>Untuk menambahkan semua format laporan di atas klik kanan node Thread Group (Web Service Mahasiswa) -> Add -> Listener -> Pilih jenis laporan.</p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-14.png">https://coding4ever.files.wordpress.com/2015/10/201015-14.png</a>&#8221;></p>

<h5>9. Menjalankan Performance test</h5>

<p>Untuk menjalankan performance test, kita tinggal mengklik toolbar <code>Start</code></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-15.png">https://coding4ever.files.wordpress.com/2015/10/201015-15.png</a>&#8221;></p>

<p><code>Performance test</code> ini di jalankan menggunakan <code>Environment Test</code> sebagai berikut :</p>

<h5>Server Web Service :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2008 64 Bit</li>
<li>Web Server : IIS 7</li>
<li>Teknologi/framwork REST Service : ASP.NET Web API 2</li>
<li>Processor : Intel Xeon X5570 2.93 Ghz</li>
<li>RAM : 12 GB</li>
</ul>


<h5>Server Database :</h5>

<ul>
<li>Sistem Operasi : Windows Server 2012 64 Bit</li>
<li>Database : SQL Server 2014</li>
<li>Processor : Intel Xeon E5-2620 v2 2.10 Ghz</li>
<li>RAM : 24 Gb</li>
</ul>


<h5>10. Contoh Hasil Performance Test</h5>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-16.png">https://coding4ever.files.wordpress.com/2015/10/201015-16.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-17.png">https://coding4ever.files.wordpress.com/2015/10/201015-17.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-18.png">https://coding4ever.files.wordpress.com/2015/10/201015-18.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-19.png">https://coding4ever.files.wordpress.com/2015/10/201015-19.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-20.png">https://coding4ever.files.wordpress.com/2015/10/201015-20.png</a>&#8221;></p>

<p><img class="center <a" src="href="https://coding4ever.files.wordpress.com/2015/10/201015-21.png">https://coding4ever.files.wordpress.com/2015/10/201015-21.png</a>&#8221;></p>

<p>Sebagai penutup saya belum menemukan referensi yang tepat bagaimana cara menganalisa hasil dari <code>performance test</code> di atas, tetapi biasanya yang saya jadikan acuan adalah hasil yang bisa dilihat melalui node <code>View Results in Table</code> kolom Status, dari node ini kelihatan apakah ada request service yang berstatus <code>Warning</code>. Jika ada mungkin ini bisa menjadi bahan acuan apakah service kita masih perlu di-<code>improve</code> lagi atau skenario <code>performance test</code> yang perlu diganti atau karena faktor lainnya seperti kondisi jaringan yang lagi <code>enggak fit</code> pada saat melakukan tes :-D.</p>

<p>Selamat mencoba :-)</p>
]]></content>
  </entry>
  
</feed>
